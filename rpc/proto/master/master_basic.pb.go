// Code generated by protoc-gen-go.
// source: master_basic.proto
// DO NOT EDIT!

/*
Package master is a generated protocol buffer package.

It is generated from these files:
	master_basic.proto

It has these top-level messages:
	Credential
	NewCredential
	Message
*/
package admin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// 凭据
type Credential struct {
	Usr string `protobuf:"bytes,1,opt,name=usr" json:"usr,omitempty"`
	Pwd string `protobuf:"bytes,2,opt,name=pwd" json:"pwd,omitempty"`
}

func (m *Credential) Reset()                    { *m = Credential{} }
func (m *Credential) String() string            { return proto.CompactTextString(m) }
func (*Credential) ProtoMessage()               {}
func (*Credential) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 新凭据
type NewCredential struct {
	Usr    string `protobuf:"bytes,1,opt,name=usr" json:"usr,omitempty"`
	OldPwd string `protobuf:"bytes,2,opt,name=oldPwd" json:"oldPwd,omitempty"`
	Pwd    string `protobuf:"bytes,3,opt,name=pwd" json:"pwd,omitempty"`
}

func (m *NewCredential) Reset()                    { *m = NewCredential{} }
func (m *NewCredential) String() string            { return proto.CompactTextString(m) }
func (*NewCredential) ProtoMessage()               {}
func (*NewCredential) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 消息
type Message struct {
	Result  bool   `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Data    string `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Message string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Credential)(nil), "master.Credential")
	proto.RegisterType((*NewCredential)(nil), "master.NewCredential")
	proto.RegisterType((*Message)(nil), "master.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Basic service

type BasicClient interface {
	Login(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Message, error)
	Passwd(ctx context.Context, in *NewCredential, opts ...grpc.CallOption) (*Message, error)
}

type basicClient struct {
	cc *grpc.ClientConn
}

func NewBasicClient(cc *grpc.ClientConn) BasicClient {
	return &basicClient{cc}
}

func (c *basicClient) Login(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/master.basic/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) Passwd(ctx context.Context, in *NewCredential, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/master.basic/Passwd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Basic service

type BasicServer interface {
	Login(context.Context, *Credential) (*Message, error)
	Passwd(context.Context, *NewCredential) (*Message, error)
}

func RegisterBasicServer(s *grpc.Server, srv BasicServer) {
	s.RegisterService(&_Basic_serviceDesc, srv)
}

func _Basic_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.basic/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).Login(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_Passwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).Passwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.basic/Passwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).Passwd(ctx, req.(*NewCredential))
	}
	return interceptor(ctx, in, info, handler)
}

var _Basic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "master.basic",
	HandlerType: (*BasicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Basic_Login_Handler,
		},
		{
			MethodName: "Passwd",
			Handler:    _Basic_Passwd_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x91, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x6d, 0xb7, 0x76, 0x7a, 0x44, 0x94, 0x23, 0x4a, 0xf1, 0x4a, 0x7a, 0xa5, 0x37, 0x41,
	0xea, 0x1b, 0xcc, 0x4b, 0xad, 0x84, 0xbe, 0x80, 0x64, 0x4d, 0x28, 0xc5, 0x6e, 0x29, 0x49, 0xc6,
	0xde, 0xc7, 0x27, 0x75, 0x39, 0x4d, 0x2c, 0x82, 0x78, 0xd5, 0xff, 0xfc, 0xcd, 0xff, 0x71, 0xfe,
	0x04, 0x70, 0x2b, 0xac, 0x53, 0xe6, 0x63, 0x23, 0x6c, 0xdf, 0xb2, 0xd1, 0x68, 0xa7, 0x31, 0x9f,
	0xbc, 0xf2, 0x09, 0xe0, 0xc5, 0x28, 0xa9, 0x76, 0xae, 0x17, 0x03, 0x5e, 0xc1, 0x62, 0x6f, 0x4d,
	0x91, 0xdc, 0x27, 0x0f, 0x67, 0x8d, 0x97, 0xde, 0x19, 0x0f, 0xb2, 0x48, 0x27, 0xe7, 0x28, 0xcb,
	0x57, 0xb8, 0x78, 0x57, 0x87, 0x7f, 0x43, 0xb7, 0x90, 0xeb, 0x41, 0xf2, 0x9f, 0x5c, 0x98, 0x22,
	0x6c, 0x31, 0xc3, 0x5a, 0x58, 0xd5, 0xca, 0x5a, 0xd1, 0x29, 0x1f, 0x32, 0xca, 0xee, 0x07, 0x47,
	0xa4, 0xd3, 0x26, 0x4c, 0x88, 0xb0, 0x6c, 0xb5, 0x54, 0x84, 0xca, 0x1a, 0xd2, 0xde, 0x93, 0xc2,
	0x89, 0x40, 0x22, 0x8d, 0x05, 0xac, 0xb6, 0x13, 0xaa, 0x58, 0x92, 0x1d, 0xc7, 0xea, 0x13, 0x32,
	0xaa, 0x8e, 0x0c, 0xb2, 0x37, 0xdd, 0xf5, 0x3b, 0x44, 0x36, 0xd5, 0x67, 0x73, 0x8d, 0xbb, 0xcb,
	0xe8, 0x85, 0x85, 0xca, 0x13, 0xac, 0x20, 0xe7, 0xc2, 0xda, 0xe3, 0xe6, 0x37, 0xf1, 0xe7, 0xaf,
	0xea, 0x7f, 0x64, 0xd6, 0x8f, 0x70, 0xdd, 0x6b, 0xd6, 0x99, 0xb1, 0x65, 0x9d, 0xae, 0x74, 0x38,
	0xb0, 0x3e, 0xaf, 0xe9, 0xcb, 0xfd, 0xe5, 0xf3, 0xe4, 0x2b, 0x4d, 0x6b, 0xbe, 0xc9, 0xe9, 0x29,
	0x9e, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xcd, 0x7d, 0x52, 0xa0, 0x01, 0x00, 0x00,
}

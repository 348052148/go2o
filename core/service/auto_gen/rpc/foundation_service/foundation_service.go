// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package foundation_service

import (
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"go2o/core/service/auto_gen/rpc/ttype"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = ttype.GoUnusedProtection__

// Attributes:
//  - ID
//  - Name
//  - ApiUrl
//  - Token
type SSsoApp struct {
	ID     int32  `thrift:"ID,1" db:"ID" json:"ID"`
	Name   string `thrift:"Name,2" db:"Name" json:"Name"`
	ApiUrl string `thrift:"ApiUrl,3" db:"ApiUrl" json:"ApiUrl"`
	Token  string `thrift:"Token,4" db:"Token" json:"Token"`
}

func NewSSsoApp() *SSsoApp {
	return &SSsoApp{}
}

func (p *SSsoApp) GetID() int32 {
	return p.ID
}

func (p *SSsoApp) GetName() string {
	return p.Name
}

func (p *SSsoApp) GetApiUrl() string {
	return p.ApiUrl
}

func (p *SSsoApp) GetToken() string {
	return p.Token
}
func (p *SSsoApp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SSsoApp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *SSsoApp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *SSsoApp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ApiUrl = v
	}
	return nil
}

func (p *SSsoApp) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *SSsoApp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SSsoApp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SSsoApp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *SSsoApp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Name: ", p), err)
	}
	return err
}

func (p *SSsoApp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ApiUrl", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ApiUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApiUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ApiUrl (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ApiUrl: ", p), err)
	}
	return err
}

func (p *SSsoApp) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Token", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Token (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Token: ", p), err)
	}
	return err
}

func (p *SSsoApp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SSsoApp(%+v)", *p)
}

// 行政区域
//
// Attributes:
//  - Code
//  - Parent
//  - Name
type SArea struct {
	Code   int32  `thrift:"Code,1" db:"Code" json:"Code"`
	Parent int32  `thrift:"Parent,2" db:"Parent" json:"Parent"`
	Name   string `thrift:"Name,3" db:"Name" json:"Name"`
}

func NewSArea() *SArea {
	return &SArea{}
}

func (p *SArea) GetCode() int32 {
	return p.Code
}

func (p *SArea) GetParent() int32 {
	return p.Parent
}

func (p *SArea) GetName() string {
	return p.Name
}
func (p *SArea) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SArea) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *SArea) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Parent = v
	}
	return nil
}

func (p *SArea) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *SArea) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SArea"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SArea) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Code: ", p), err)
	}
	return err
}

func (p *SArea) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Parent", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Parent: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Parent)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Parent (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Parent: ", p), err)
	}
	return err
}

func (p *SArea) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Name: ", p), err)
	}
	return err
}

func (p *SArea) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SArea(%+v)", *p)
}

// 短信接口信息
//
// Attributes:
//  - ApiUrl: 接口地址
//  - Key: 接口KEY
//  - Secret: 接口密钥
//  - Params: 请求数据,如: phone={phone}&content={content}
//  - Method: 请求方式, GET或POST
//  - Charset: 编码
//  - Signature: 签名
//  - SuccessChar: 发送成功，包含的字符，用于检测是否发送成功
type SSmsApi struct {
	ApiUrl      string `thrift:"ApiUrl,1" db:"ApiUrl" json:"ApiUrl"`
	Key         string `thrift:"Key,2" db:"Key" json:"Key"`
	Secret      string `thrift:"Secret,3" db:"Secret" json:"Secret"`
	Params      string `thrift:"Params,4" db:"Params" json:"Params"`
	Method      string `thrift:"Method,5" db:"Method" json:"Method"`
	Charset     string `thrift:"Charset,6" db:"Charset" json:"Charset"`
	Signature   string `thrift:"Signature,7" db:"Signature" json:"Signature"`
	SuccessChar string `thrift:"SuccessChar,8" db:"SuccessChar" json:"SuccessChar"`
}

func NewSSmsApi() *SSmsApi {
	return &SSmsApi{}
}

func (p *SSmsApi) GetApiUrl() string {
	return p.ApiUrl
}

func (p *SSmsApi) GetKey() string {
	return p.Key
}

func (p *SSmsApi) GetSecret() string {
	return p.Secret
}

func (p *SSmsApi) GetParams() string {
	return p.Params
}

func (p *SSmsApi) GetMethod() string {
	return p.Method
}

func (p *SSmsApi) GetCharset() string {
	return p.Charset
}

func (p *SSmsApi) GetSignature() string {
	return p.Signature
}

func (p *SSmsApi) GetSuccessChar() string {
	return p.SuccessChar
}
func (p *SSmsApi) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SSmsApi) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ApiUrl = v
	}
	return nil
}

func (p *SSmsApi) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *SSmsApi) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Secret = v
	}
	return nil
}

func (p *SSmsApi) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Params = v
	}
	return nil
}

func (p *SSmsApi) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Method = v
	}
	return nil
}

func (p *SSmsApi) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Charset = v
	}
	return nil
}

func (p *SSmsApi) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Signature = v
	}
	return nil
}

func (p *SSmsApi) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.SuccessChar = v
	}
	return nil
}

func (p *SSmsApi) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SSmsApi"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SSmsApi) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ApiUrl", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ApiUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApiUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ApiUrl (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ApiUrl: ", p), err)
	}
	return err
}

func (p *SSmsApi) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Key", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Key (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Key: ", p), err)
	}
	return err
}

func (p *SSmsApi) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Secret", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Secret: ", p), err)
	}
	if err := oprot.WriteString(string(p.Secret)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Secret (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Secret: ", p), err)
	}
	return err
}

func (p *SSmsApi) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Params", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Params: ", p), err)
	}
	if err := oprot.WriteString(string(p.Params)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Params (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Params: ", p), err)
	}
	return err
}

func (p *SSmsApi) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Method", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Method: ", p), err)
	}
	if err := oprot.WriteString(string(p.Method)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Method (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Method: ", p), err)
	}
	return err
}

func (p *SSmsApi) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Charset", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Charset: ", p), err)
	}
	if err := oprot.WriteString(string(p.Charset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Charset (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Charset: ", p), err)
	}
	return err
}

func (p *SSmsApi) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Signature", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Signature: ", p), err)
	}
	if err := oprot.WriteString(string(p.Signature)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Signature (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Signature: ", p), err)
	}
	return err
}

func (p *SSmsApi) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SuccessChar", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:SuccessChar: ", p), err)
	}
	if err := oprot.WriteString(string(p.SuccessChar)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SuccessChar (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:SuccessChar: ", p), err)
	}
	return err
}

func (p *SSmsApi) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SSmsApi(%+v)", *p)
}

type FoundationService interface {
	// 获取短信API凭据, @provider 短信服务商, 默认:http
	//
	// Parameters:
	//  - Provider
	GetSmsApi(ctx context.Context, provider string) (r *SSmsApi, err error)
	// 保存短信API凭据,@provider 短信服务商, 默认:http
	//
	// Parameters:
	//  - Provider
	//  - API
	SaveSmsApi(ctx context.Context, provider string, api *SSmsApi) (r *ttype.Result_, err error)
	// 保存面板HOOK数据,这通常是在第三方应用中初始化或调用,参见文档：BoardHooks
	//
	// Parameters:
	//  - HookURL
	//  - Token
	SaveBoardHook(ctx context.Context, hookURL string, token string) (r *ttype.Result_, err error)
	// Parameters:
	//  - URL
	ResourceUrl(ctx context.Context, url string) (r string, err error)
	// Parameters:
	//  - Key
	//  - Value
	SetValue(ctx context.Context, key string, value string) (r *ttype.Result_, err error)
	// Parameters:
	//  - Key
	DeleteValue(ctx context.Context, key string) (r *ttype.Result_, err error)
	// Parameters:
	//  - Prefix
	GetValuesByPrefix(ctx context.Context, prefix string) (r map[string]string, err error)
	// Parameters:
	//  - App
	RegisterApp(ctx context.Context, app *SSsoApp) (r string, err error)
	// Parameters:
	//  - Name
	GetApp(ctx context.Context, name string) (r *SSsoApp, err error)
	GetAllSsoApp(ctx context.Context) (r []string, err error)
	// Parameters:
	//  - User
	//  - Pwd
	SuperValidate(ctx context.Context, user string, pwd string) (r bool, err error)
	// Parameters:
	//  - User
	//  - Pwd
	FlushSuperPwd(ctx context.Context, user string, pwd string) (err error)
	// Parameters:
	//  - ReturnUrl
	GetSyncLoginUrl(ctx context.Context, returnUrl string) (r string, err error)
	// Parameters:
	//  - Codes
	GetAreaNames(ctx context.Context, codes []int32) (r []string, err error)
	// Parameters:
	//  - Code
	GetChildAreas(ctx context.Context, code int32) (r []*SArea, err error)
}

type FoundationServiceClient struct {
	c thrift.TClient
}

func NewFoundationServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FoundationServiceClient {
	return &FoundationServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewFoundationServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FoundationServiceClient {
	return &FoundationServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewFoundationServiceClient(c thrift.TClient) *FoundationServiceClient {
	return &FoundationServiceClient{
		c: c,
	}
}

func (p *FoundationServiceClient) Client_() thrift.TClient {
	return p.c
}

// 获取短信API凭据, @provider 短信服务商, 默认:http
//
// Parameters:
//  - Provider
func (p *FoundationServiceClient) GetSmsApi(ctx context.Context, provider string) (r *SSmsApi, err error) {
	var _args0 FoundationServiceGetSmsApiArgs
	_args0.Provider = provider
	var _result1 FoundationServiceGetSmsApiResult
	if err = p.Client_().Call(ctx, "GetSmsApi", &_args0, &_result1); err != nil {
		return
	}
	return _result1.GetSuccess(), nil
}

// 保存短信API凭据,@provider 短信服务商, 默认:http
//
// Parameters:
//  - Provider
//  - API
func (p *FoundationServiceClient) SaveSmsApi(ctx context.Context, provider string, api *SSmsApi) (r *ttype.Result_, err error) {
	var _args2 FoundationServiceSaveSmsApiArgs
	_args2.Provider = provider
	_args2.API = api
	var _result3 FoundationServiceSaveSmsApiResult
	if err = p.Client_().Call(ctx, "SaveSmsApi", &_args2, &_result3); err != nil {
		return
	}
	return _result3.GetSuccess(), nil
}

// 保存面板HOOK数据,这通常是在第三方应用中初始化或调用,参见文档：BoardHooks
//
// Parameters:
//  - HookURL
//  - Token
func (p *FoundationServiceClient) SaveBoardHook(ctx context.Context, hookURL string, token string) (r *ttype.Result_, err error) {
	var _args4 FoundationServiceSaveBoardHookArgs
	_args4.HookURL = hookURL
	_args4.Token = token
	var _result5 FoundationServiceSaveBoardHookResult
	if err = p.Client_().Call(ctx, "SaveBoardHook", &_args4, &_result5); err != nil {
		return
	}
	return _result5.GetSuccess(), nil
}

// Parameters:
//  - URL
func (p *FoundationServiceClient) ResourceUrl(ctx context.Context, url string) (r string, err error) {
	var _args6 FoundationServiceResourceUrlArgs
	_args6.URL = url
	var _result7 FoundationServiceResourceUrlResult
	if err = p.Client_().Call(ctx, "ResourceUrl", &_args6, &_result7); err != nil {
		return
	}
	return _result7.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - Value
func (p *FoundationServiceClient) SetValue(ctx context.Context, key string, value string) (r *ttype.Result_, err error) {
	var _args8 FoundationServiceSetValueArgs
	_args8.Key = key
	_args8.Value = value
	var _result9 FoundationServiceSetValueResult
	if err = p.Client_().Call(ctx, "SetValue", &_args8, &_result9); err != nil {
		return
	}
	return _result9.GetSuccess(), nil
}

// Parameters:
//  - Key
func (p *FoundationServiceClient) DeleteValue(ctx context.Context, key string) (r *ttype.Result_, err error) {
	var _args10 FoundationServiceDeleteValueArgs
	_args10.Key = key
	var _result11 FoundationServiceDeleteValueResult
	if err = p.Client_().Call(ctx, "DeleteValue", &_args10, &_result11); err != nil {
		return
	}
	return _result11.GetSuccess(), nil
}

// Parameters:
//  - Prefix
func (p *FoundationServiceClient) GetValuesByPrefix(ctx context.Context, prefix string) (r map[string]string, err error) {
	var _args12 FoundationServiceGetValuesByPrefixArgs
	_args12.Prefix = prefix
	var _result13 FoundationServiceGetValuesByPrefixResult
	if err = p.Client_().Call(ctx, "GetValuesByPrefix", &_args12, &_result13); err != nil {
		return
	}
	return _result13.GetSuccess(), nil
}

// Parameters:
//  - App
func (p *FoundationServiceClient) RegisterApp(ctx context.Context, app *SSsoApp) (r string, err error) {
	var _args14 FoundationServiceRegisterAppArgs
	_args14.App = app
	var _result15 FoundationServiceRegisterAppResult
	if err = p.Client_().Call(ctx, "RegisterApp", &_args14, &_result15); err != nil {
		return
	}
	return _result15.GetSuccess(), nil
}

// Parameters:
//  - Name
func (p *FoundationServiceClient) GetApp(ctx context.Context, name string) (r *SSsoApp, err error) {
	var _args16 FoundationServiceGetAppArgs
	_args16.Name = name
	var _result17 FoundationServiceGetAppResult
	if err = p.Client_().Call(ctx, "GetApp", &_args16, &_result17); err != nil {
		return
	}
	return _result17.GetSuccess(), nil
}

func (p *FoundationServiceClient) GetAllSsoApp(ctx context.Context) (r []string, err error) {
	var _args18 FoundationServiceGetAllSsoAppArgs
	var _result19 FoundationServiceGetAllSsoAppResult
	if err = p.Client_().Call(ctx, "GetAllSsoApp", &_args18, &_result19); err != nil {
		return
	}
	return _result19.GetSuccess(), nil
}

// Parameters:
//  - User
//  - Pwd
func (p *FoundationServiceClient) SuperValidate(ctx context.Context, user string, pwd string) (r bool, err error) {
	var _args20 FoundationServiceSuperValidateArgs
	_args20.User = user
	_args20.Pwd = pwd
	var _result21 FoundationServiceSuperValidateResult
	if err = p.Client_().Call(ctx, "SuperValidate", &_args20, &_result21); err != nil {
		return
	}
	return _result21.GetSuccess(), nil
}

// Parameters:
//  - User
//  - Pwd
func (p *FoundationServiceClient) FlushSuperPwd(ctx context.Context, user string, pwd string) (err error) {
	var _args22 FoundationServiceFlushSuperPwdArgs
	_args22.User = user
	_args22.Pwd = pwd
	var _result23 FoundationServiceFlushSuperPwdResult
	if err = p.Client_().Call(ctx, "FlushSuperPwd", &_args22, &_result23); err != nil {
		return
	}
	return nil
}

// Parameters:
//  - ReturnUrl
func (p *FoundationServiceClient) GetSyncLoginUrl(ctx context.Context, returnUrl string) (r string, err error) {
	var _args24 FoundationServiceGetSyncLoginUrlArgs
	_args24.ReturnUrl = returnUrl
	var _result25 FoundationServiceGetSyncLoginUrlResult
	if err = p.Client_().Call(ctx, "GetSyncLoginUrl", &_args24, &_result25); err != nil {
		return
	}
	return _result25.GetSuccess(), nil
}

// Parameters:
//  - Codes
func (p *FoundationServiceClient) GetAreaNames(ctx context.Context, codes []int32) (r []string, err error) {
	var _args26 FoundationServiceGetAreaNamesArgs
	_args26.Codes = codes
	var _result27 FoundationServiceGetAreaNamesResult
	if err = p.Client_().Call(ctx, "GetAreaNames", &_args26, &_result27); err != nil {
		return
	}
	return _result27.GetSuccess(), nil
}

// Parameters:
//  - Code
func (p *FoundationServiceClient) GetChildAreas(ctx context.Context, code int32) (r []*SArea, err error) {
	var _args28 FoundationServiceGetChildAreasArgs
	_args28.Code = code
	var _result29 FoundationServiceGetChildAreasResult
	if err = p.Client_().Call(ctx, "GetChildAreas", &_args28, &_result29); err != nil {
		return
	}
	return _result29.GetSuccess(), nil
}

type FoundationServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      FoundationService
}

func (p *FoundationServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *FoundationServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *FoundationServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewFoundationServiceProcessor(handler FoundationService) *FoundationServiceProcessor {

	self30 := &FoundationServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self30.processorMap["GetSmsApi"] = &foundationServiceProcessorGetSmsApi{handler: handler}
	self30.processorMap["SaveSmsApi"] = &foundationServiceProcessorSaveSmsApi{handler: handler}
	self30.processorMap["SaveBoardHook"] = &foundationServiceProcessorSaveBoardHook{handler: handler}
	self30.processorMap["ResourceUrl"] = &foundationServiceProcessorResourceUrl{handler: handler}
	self30.processorMap["SetValue"] = &foundationServiceProcessorSetValue{handler: handler}
	self30.processorMap["DeleteValue"] = &foundationServiceProcessorDeleteValue{handler: handler}
	self30.processorMap["GetValuesByPrefix"] = &foundationServiceProcessorGetValuesByPrefix{handler: handler}
	self30.processorMap["RegisterApp"] = &foundationServiceProcessorRegisterApp{handler: handler}
	self30.processorMap["GetApp"] = &foundationServiceProcessorGetApp{handler: handler}
	self30.processorMap["GetAllSsoApp"] = &foundationServiceProcessorGetAllSsoApp{handler: handler}
	self30.processorMap["SuperValidate"] = &foundationServiceProcessorSuperValidate{handler: handler}
	self30.processorMap["FlushSuperPwd"] = &foundationServiceProcessorFlushSuperPwd{handler: handler}
	self30.processorMap["GetSyncLoginUrl"] = &foundationServiceProcessorGetSyncLoginUrl{handler: handler}
	self30.processorMap["GetAreaNames"] = &foundationServiceProcessorGetAreaNames{handler: handler}
	self30.processorMap["GetChildAreas"] = &foundationServiceProcessorGetChildAreas{handler: handler}
	return self30
}

func (p *FoundationServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x31 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x31.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x31

}

type foundationServiceProcessorGetSmsApi struct {
	handler FoundationService
}

func (p *foundationServiceProcessorGetSmsApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceGetSmsApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSmsApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceGetSmsApiResult{}
	var retval *SSmsApi
	var err2 error
	if retval, err2 = p.handler.GetSmsApi(ctx, args.Provider); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSmsApi: "+err2.Error())
		oprot.WriteMessageBegin("GetSmsApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSmsApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorSaveSmsApi struct {
	handler FoundationService
}

func (p *foundationServiceProcessorSaveSmsApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceSaveSmsApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SaveSmsApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceSaveSmsApiResult{}
	var retval *ttype.Result_
	var err2 error
	if retval, err2 = p.handler.SaveSmsApi(ctx, args.Provider, args.API); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SaveSmsApi: "+err2.Error())
		oprot.WriteMessageBegin("SaveSmsApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SaveSmsApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorSaveBoardHook struct {
	handler FoundationService
}

func (p *foundationServiceProcessorSaveBoardHook) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceSaveBoardHookArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SaveBoardHook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceSaveBoardHookResult{}
	var retval *ttype.Result_
	var err2 error
	if retval, err2 = p.handler.SaveBoardHook(ctx, args.HookURL, args.Token); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SaveBoardHook: "+err2.Error())
		oprot.WriteMessageBegin("SaveBoardHook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SaveBoardHook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorResourceUrl struct {
	handler FoundationService
}

func (p *foundationServiceProcessorResourceUrl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceResourceUrlArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ResourceUrl", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceResourceUrlResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ResourceUrl(ctx, args.URL); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ResourceUrl: "+err2.Error())
		oprot.WriteMessageBegin("ResourceUrl", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("ResourceUrl", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorSetValue struct {
	handler FoundationService
}

func (p *foundationServiceProcessorSetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceSetValueArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SetValue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceSetValueResult{}
	var retval *ttype.Result_
	var err2 error
	if retval, err2 = p.handler.SetValue(ctx, args.Key, args.Value); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValue: "+err2.Error())
		oprot.WriteMessageBegin("SetValue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SetValue", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorDeleteValue struct {
	handler FoundationService
}

func (p *foundationServiceProcessorDeleteValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceDeleteValueArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteValue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceDeleteValueResult{}
	var retval *ttype.Result_
	var err2 error
	if retval, err2 = p.handler.DeleteValue(ctx, args.Key); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteValue: "+err2.Error())
		oprot.WriteMessageBegin("DeleteValue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteValue", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorGetValuesByPrefix struct {
	handler FoundationService
}

func (p *foundationServiceProcessorGetValuesByPrefix) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceGetValuesByPrefixArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetValuesByPrefix", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceGetValuesByPrefixResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.GetValuesByPrefix(ctx, args.Prefix); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValuesByPrefix: "+err2.Error())
		oprot.WriteMessageBegin("GetValuesByPrefix", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetValuesByPrefix", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorRegisterApp struct {
	handler FoundationService
}

func (p *foundationServiceProcessorRegisterApp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceRegisterAppArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RegisterApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceRegisterAppResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.RegisterApp(ctx, args.App); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RegisterApp: "+err2.Error())
		oprot.WriteMessageBegin("RegisterApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("RegisterApp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorGetApp struct {
	handler FoundationService
}

func (p *foundationServiceProcessorGetApp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceGetAppArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceGetAppResult{}
	var retval *SSsoApp
	var err2 error
	if retval, err2 = p.handler.GetApp(ctx, args.Name); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetApp: "+err2.Error())
		oprot.WriteMessageBegin("GetApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetApp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorGetAllSsoApp struct {
	handler FoundationService
}

func (p *foundationServiceProcessorGetAllSsoApp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceGetAllSsoAppArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAllSsoApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceGetAllSsoAppResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetAllSsoApp(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAllSsoApp: "+err2.Error())
		oprot.WriteMessageBegin("GetAllSsoApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAllSsoApp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorSuperValidate struct {
	handler FoundationService
}

func (p *foundationServiceProcessorSuperValidate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceSuperValidateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SuperValidate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceSuperValidateResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.SuperValidate(ctx, args.User, args.Pwd); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SuperValidate: "+err2.Error())
		oprot.WriteMessageBegin("SuperValidate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("SuperValidate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorFlushSuperPwd struct {
	handler FoundationService
}

func (p *foundationServiceProcessorFlushSuperPwd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceFlushSuperPwdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FlushSuperPwd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceFlushSuperPwdResult{}
	var err2 error
	if err2 = p.handler.FlushSuperPwd(ctx, args.User, args.Pwd); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FlushSuperPwd: "+err2.Error())
		oprot.WriteMessageBegin("FlushSuperPwd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("FlushSuperPwd", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorGetSyncLoginUrl struct {
	handler FoundationService
}

func (p *foundationServiceProcessorGetSyncLoginUrl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceGetSyncLoginUrlArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSyncLoginUrl", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceGetSyncLoginUrlResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetSyncLoginUrl(ctx, args.ReturnUrl); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSyncLoginUrl: "+err2.Error())
		oprot.WriteMessageBegin("GetSyncLoginUrl", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetSyncLoginUrl", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorGetAreaNames struct {
	handler FoundationService
}

func (p *foundationServiceProcessorGetAreaNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceGetAreaNamesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAreaNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceGetAreaNamesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetAreaNames(ctx, args.Codes); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAreaNames: "+err2.Error())
		oprot.WriteMessageBegin("GetAreaNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAreaNames", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorGetChildAreas struct {
	handler FoundationService
}

func (p *foundationServiceProcessorGetChildAreas) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceGetChildAreasArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetChildAreas", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceGetChildAreasResult{}
	var retval []*SArea
	var err2 error
	if retval, err2 = p.handler.GetChildAreas(ctx, args.Code); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetChildAreas: "+err2.Error())
		oprot.WriteMessageBegin("GetChildAreas", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetChildAreas", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Provider
type FoundationServiceGetSmsApiArgs struct {
	Provider string `thrift:"provider,1" db:"provider" json:"provider"`
}

func NewFoundationServiceGetSmsApiArgs() *FoundationServiceGetSmsApiArgs {
	return &FoundationServiceGetSmsApiArgs{}
}

func (p *FoundationServiceGetSmsApiArgs) GetProvider() string {
	return p.Provider
}
func (p *FoundationServiceGetSmsApiArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetSmsApiArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Provider = v
	}
	return nil
}

func (p *FoundationServiceGetSmsApiArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSmsApi_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetSmsApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provider", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:provider: ", p), err)
	}
	if err := oprot.WriteString(string(p.Provider)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.provider (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:provider: ", p), err)
	}
	return err
}

func (p *FoundationServiceGetSmsApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetSmsApiArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetSmsApiResult struct {
	Success *SSmsApi `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceGetSmsApiResult() *FoundationServiceGetSmsApiResult {
	return &FoundationServiceGetSmsApiResult{}
}

var FoundationServiceGetSmsApiResult_Success_DEFAULT *SSmsApi

func (p *FoundationServiceGetSmsApiResult) GetSuccess() *SSmsApi {
	if !p.IsSetSuccess() {
		return FoundationServiceGetSmsApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FoundationServiceGetSmsApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceGetSmsApiResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetSmsApiResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SSmsApi{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FoundationServiceGetSmsApiResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSmsApi_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetSmsApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceGetSmsApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetSmsApiResult(%+v)", *p)
}

// Attributes:
//  - Provider
//  - API
type FoundationServiceSaveSmsApiArgs struct {
	Provider string   `thrift:"provider,1" db:"provider" json:"provider"`
	API      *SSmsApi `thrift:"api,2" db:"api" json:"api"`
}

func NewFoundationServiceSaveSmsApiArgs() *FoundationServiceSaveSmsApiArgs {
	return &FoundationServiceSaveSmsApiArgs{}
}

func (p *FoundationServiceSaveSmsApiArgs) GetProvider() string {
	return p.Provider
}

var FoundationServiceSaveSmsApiArgs_API_DEFAULT *SSmsApi

func (p *FoundationServiceSaveSmsApiArgs) GetAPI() *SSmsApi {
	if !p.IsSetAPI() {
		return FoundationServiceSaveSmsApiArgs_API_DEFAULT
	}
	return p.API
}
func (p *FoundationServiceSaveSmsApiArgs) IsSetAPI() bool {
	return p.API != nil
}

func (p *FoundationServiceSaveSmsApiArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceSaveSmsApiArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Provider = v
	}
	return nil
}

func (p *FoundationServiceSaveSmsApiArgs) ReadField2(iprot thrift.TProtocol) error {
	p.API = &SSmsApi{}
	if err := p.API.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.API), err)
	}
	return nil
}

func (p *FoundationServiceSaveSmsApiArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SaveSmsApi_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceSaveSmsApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provider", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:provider: ", p), err)
	}
	if err := oprot.WriteString(string(p.Provider)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.provider (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:provider: ", p), err)
	}
	return err
}

func (p *FoundationServiceSaveSmsApiArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("api", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:api: ", p), err)
	}
	if err := p.API.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.API), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:api: ", p), err)
	}
	return err
}

func (p *FoundationServiceSaveSmsApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceSaveSmsApiArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceSaveSmsApiResult struct {
	Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceSaveSmsApiResult() *FoundationServiceSaveSmsApiResult {
	return &FoundationServiceSaveSmsApiResult{}
}

var FoundationServiceSaveSmsApiResult_Success_DEFAULT *ttype.Result_

func (p *FoundationServiceSaveSmsApiResult) GetSuccess() *ttype.Result_ {
	if !p.IsSetSuccess() {
		return FoundationServiceSaveSmsApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FoundationServiceSaveSmsApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceSaveSmsApiResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceSaveSmsApiResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ttype.Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FoundationServiceSaveSmsApiResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SaveSmsApi_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceSaveSmsApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceSaveSmsApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceSaveSmsApiResult(%+v)", *p)
}

// Attributes:
//  - HookURL
//  - Token
type FoundationServiceSaveBoardHookArgs struct {
	HookURL string `thrift:"hookURL,1" db:"hookURL" json:"hookURL"`
	Token   string `thrift:"token,2" db:"token" json:"token"`
}

func NewFoundationServiceSaveBoardHookArgs() *FoundationServiceSaveBoardHookArgs {
	return &FoundationServiceSaveBoardHookArgs{}
}

func (p *FoundationServiceSaveBoardHookArgs) GetHookURL() string {
	return p.HookURL
}

func (p *FoundationServiceSaveBoardHookArgs) GetToken() string {
	return p.Token
}
func (p *FoundationServiceSaveBoardHookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceSaveBoardHookArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HookURL = v
	}
	return nil
}

func (p *FoundationServiceSaveBoardHookArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *FoundationServiceSaveBoardHookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SaveBoardHook_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceSaveBoardHookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hookURL", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hookURL: ", p), err)
	}
	if err := oprot.WriteString(string(p.HookURL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hookURL (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hookURL: ", p), err)
	}
	return err
}

func (p *FoundationServiceSaveBoardHookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err)
	}
	return err
}

func (p *FoundationServiceSaveBoardHookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceSaveBoardHookArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceSaveBoardHookResult struct {
	Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceSaveBoardHookResult() *FoundationServiceSaveBoardHookResult {
	return &FoundationServiceSaveBoardHookResult{}
}

var FoundationServiceSaveBoardHookResult_Success_DEFAULT *ttype.Result_

func (p *FoundationServiceSaveBoardHookResult) GetSuccess() *ttype.Result_ {
	if !p.IsSetSuccess() {
		return FoundationServiceSaveBoardHookResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FoundationServiceSaveBoardHookResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceSaveBoardHookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceSaveBoardHookResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ttype.Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FoundationServiceSaveBoardHookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SaveBoardHook_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceSaveBoardHookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceSaveBoardHookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceSaveBoardHookResult(%+v)", *p)
}

// Attributes:
//  - URL
type FoundationServiceResourceUrlArgs struct {
	URL string `thrift:"url,1" db:"url" json:"url"`
}

func NewFoundationServiceResourceUrlArgs() *FoundationServiceResourceUrlArgs {
	return &FoundationServiceResourceUrlArgs{}
}

func (p *FoundationServiceResourceUrlArgs) GetURL() string {
	return p.URL
}
func (p *FoundationServiceResourceUrlArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceResourceUrlArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.URL = v
	}
	return nil
}

func (p *FoundationServiceResourceUrlArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResourceUrl_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceResourceUrlArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err)
	}
	if err := oprot.WriteString(string(p.URL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err)
	}
	return err
}

func (p *FoundationServiceResourceUrlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceResourceUrlArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceResourceUrlResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceResourceUrlResult() *FoundationServiceResourceUrlResult {
	return &FoundationServiceResourceUrlResult{}
}

var FoundationServiceResourceUrlResult_Success_DEFAULT string

func (p *FoundationServiceResourceUrlResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return FoundationServiceResourceUrlResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FoundationServiceResourceUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceResourceUrlResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceResourceUrlResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FoundationServiceResourceUrlResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResourceUrl_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceResourceUrlResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceResourceUrlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceResourceUrlResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type FoundationServiceSetValueArgs struct {
	Key   string `thrift:"key,1" db:"key" json:"key"`
	Value string `thrift:"value,2" db:"value" json:"value"`
}

func NewFoundationServiceSetValueArgs() *FoundationServiceSetValueArgs {
	return &FoundationServiceSetValueArgs{}
}

func (p *FoundationServiceSetValueArgs) GetKey() string {
	return p.Key
}

func (p *FoundationServiceSetValueArgs) GetValue() string {
	return p.Value
}
func (p *FoundationServiceSetValueArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceSetValueArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *FoundationServiceSetValueArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *FoundationServiceSetValueArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetValue_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceSetValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *FoundationServiceSetValueArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *FoundationServiceSetValueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceSetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceSetValueResult struct {
	Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceSetValueResult() *FoundationServiceSetValueResult {
	return &FoundationServiceSetValueResult{}
}

var FoundationServiceSetValueResult_Success_DEFAULT *ttype.Result_

func (p *FoundationServiceSetValueResult) GetSuccess() *ttype.Result_ {
	if !p.IsSetSuccess() {
		return FoundationServiceSetValueResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FoundationServiceSetValueResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceSetValueResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceSetValueResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ttype.Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FoundationServiceSetValueResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetValue_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceSetValueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceSetValueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceSetValueResult(%+v)", *p)
}

// Attributes:
//  - Key
type FoundationServiceDeleteValueArgs struct {
	Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewFoundationServiceDeleteValueArgs() *FoundationServiceDeleteValueArgs {
	return &FoundationServiceDeleteValueArgs{}
}

func (p *FoundationServiceDeleteValueArgs) GetKey() string {
	return p.Key
}
func (p *FoundationServiceDeleteValueArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceDeleteValueArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *FoundationServiceDeleteValueArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteValue_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceDeleteValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *FoundationServiceDeleteValueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceDeleteValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceDeleteValueResult struct {
	Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceDeleteValueResult() *FoundationServiceDeleteValueResult {
	return &FoundationServiceDeleteValueResult{}
}

var FoundationServiceDeleteValueResult_Success_DEFAULT *ttype.Result_

func (p *FoundationServiceDeleteValueResult) GetSuccess() *ttype.Result_ {
	if !p.IsSetSuccess() {
		return FoundationServiceDeleteValueResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FoundationServiceDeleteValueResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceDeleteValueResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceDeleteValueResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ttype.Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FoundationServiceDeleteValueResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteValue_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceDeleteValueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceDeleteValueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceDeleteValueResult(%+v)", *p)
}

// Attributes:
//  - Prefix
type FoundationServiceGetValuesByPrefixArgs struct {
	Prefix string `thrift:"prefix,1" db:"prefix" json:"prefix"`
}

func NewFoundationServiceGetValuesByPrefixArgs() *FoundationServiceGetValuesByPrefixArgs {
	return &FoundationServiceGetValuesByPrefixArgs{}
}

func (p *FoundationServiceGetValuesByPrefixArgs) GetPrefix() string {
	return p.Prefix
}
func (p *FoundationServiceGetValuesByPrefixArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetValuesByPrefixArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Prefix = v
	}
	return nil
}

func (p *FoundationServiceGetValuesByPrefixArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetValuesByPrefix_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetValuesByPrefixArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("prefix", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:prefix: ", p), err)
	}
	if err := oprot.WriteString(string(p.Prefix)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.prefix (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:prefix: ", p), err)
	}
	return err
}

func (p *FoundationServiceGetValuesByPrefixArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetValuesByPrefixArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetValuesByPrefixResult struct {
	Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceGetValuesByPrefixResult() *FoundationServiceGetValuesByPrefixResult {
	return &FoundationServiceGetValuesByPrefixResult{}
}

var FoundationServiceGetValuesByPrefixResult_Success_DEFAULT map[string]string

func (p *FoundationServiceGetValuesByPrefixResult) GetSuccess() map[string]string {
	return p.Success
}
func (p *FoundationServiceGetValuesByPrefixResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceGetValuesByPrefixResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetValuesByPrefixResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key32 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key32 = v
		}
		var _val33 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val33 = v
		}
		p.Success[_key32] = _val33
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *FoundationServiceGetValuesByPrefixResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetValuesByPrefix_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetValuesByPrefixResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceGetValuesByPrefixResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetValuesByPrefixResult(%+v)", *p)
}

// Attributes:
//  - App
type FoundationServiceRegisterAppArgs struct {
	App *SSsoApp `thrift:"app,1" db:"app" json:"app"`
}

func NewFoundationServiceRegisterAppArgs() *FoundationServiceRegisterAppArgs {
	return &FoundationServiceRegisterAppArgs{}
}

var FoundationServiceRegisterAppArgs_App_DEFAULT *SSsoApp

func (p *FoundationServiceRegisterAppArgs) GetApp() *SSsoApp {
	if !p.IsSetApp() {
		return FoundationServiceRegisterAppArgs_App_DEFAULT
	}
	return p.App
}
func (p *FoundationServiceRegisterAppArgs) IsSetApp() bool {
	return p.App != nil
}

func (p *FoundationServiceRegisterAppArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceRegisterAppArgs) ReadField1(iprot thrift.TProtocol) error {
	p.App = &SSsoApp{}
	if err := p.App.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.App), err)
	}
	return nil
}

func (p *FoundationServiceRegisterAppArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RegisterApp_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceRegisterAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app: ", p), err)
	}
	if err := p.App.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.App), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app: ", p), err)
	}
	return err
}

func (p *FoundationServiceRegisterAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceRegisterAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceRegisterAppResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceRegisterAppResult() *FoundationServiceRegisterAppResult {
	return &FoundationServiceRegisterAppResult{}
}

var FoundationServiceRegisterAppResult_Success_DEFAULT string

func (p *FoundationServiceRegisterAppResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return FoundationServiceRegisterAppResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FoundationServiceRegisterAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceRegisterAppResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceRegisterAppResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FoundationServiceRegisterAppResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RegisterApp_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceRegisterAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceRegisterAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceRegisterAppResult(%+v)", *p)
}

// Attributes:
//  - Name
type FoundationServiceGetAppArgs struct {
	Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewFoundationServiceGetAppArgs() *FoundationServiceGetAppArgs {
	return &FoundationServiceGetAppArgs{}
}

func (p *FoundationServiceGetAppArgs) GetName() string {
	return p.Name
}
func (p *FoundationServiceGetAppArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetAppArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *FoundationServiceGetAppArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetApp_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *FoundationServiceGetAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetAppResult struct {
	Success *SSsoApp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceGetAppResult() *FoundationServiceGetAppResult {
	return &FoundationServiceGetAppResult{}
}

var FoundationServiceGetAppResult_Success_DEFAULT *SSsoApp

func (p *FoundationServiceGetAppResult) GetSuccess() *SSsoApp {
	if !p.IsSetSuccess() {
		return FoundationServiceGetAppResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FoundationServiceGetAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceGetAppResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetAppResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SSsoApp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FoundationServiceGetAppResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetApp_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceGetAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetAppResult(%+v)", *p)
}

type FoundationServiceGetAllSsoAppArgs struct {
}

func NewFoundationServiceGetAllSsoAppArgs() *FoundationServiceGetAllSsoAppArgs {
	return &FoundationServiceGetAllSsoAppArgs{}
}

func (p *FoundationServiceGetAllSsoAppArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetAllSsoAppArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAllSsoApp_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetAllSsoAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetAllSsoAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetAllSsoAppResult struct {
	Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceGetAllSsoAppResult() *FoundationServiceGetAllSsoAppResult {
	return &FoundationServiceGetAllSsoAppResult{}
}

var FoundationServiceGetAllSsoAppResult_Success_DEFAULT []string

func (p *FoundationServiceGetAllSsoAppResult) GetSuccess() []string {
	return p.Success
}
func (p *FoundationServiceGetAllSsoAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceGetAllSsoAppResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetAllSsoAppResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem34 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem34 = v
		}
		p.Success = append(p.Success, _elem34)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FoundationServiceGetAllSsoAppResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAllSsoApp_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetAllSsoAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceGetAllSsoAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetAllSsoAppResult(%+v)", *p)
}

// Attributes:
//  - User
//  - Pwd
type FoundationServiceSuperValidateArgs struct {
	User string `thrift:"user,1" db:"user" json:"user"`
	Pwd  string `thrift:"pwd,2" db:"pwd" json:"pwd"`
}

func NewFoundationServiceSuperValidateArgs() *FoundationServiceSuperValidateArgs {
	return &FoundationServiceSuperValidateArgs{}
}

func (p *FoundationServiceSuperValidateArgs) GetUser() string {
	return p.User
}

func (p *FoundationServiceSuperValidateArgs) GetPwd() string {
	return p.Pwd
}
func (p *FoundationServiceSuperValidateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceSuperValidateArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *FoundationServiceSuperValidateArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Pwd = v
	}
	return nil
}

func (p *FoundationServiceSuperValidateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SuperValidate_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceSuperValidateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err)
	}
	return err
}

func (p *FoundationServiceSuperValidateArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err)
	}
	return err
}

func (p *FoundationServiceSuperValidateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceSuperValidateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceSuperValidateResult struct {
	Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceSuperValidateResult() *FoundationServiceSuperValidateResult {
	return &FoundationServiceSuperValidateResult{}
}

var FoundationServiceSuperValidateResult_Success_DEFAULT bool

func (p *FoundationServiceSuperValidateResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return FoundationServiceSuperValidateResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FoundationServiceSuperValidateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceSuperValidateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceSuperValidateResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FoundationServiceSuperValidateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SuperValidate_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceSuperValidateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceSuperValidateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceSuperValidateResult(%+v)", *p)
}

// Attributes:
//  - User
//  - Pwd
type FoundationServiceFlushSuperPwdArgs struct {
	User string `thrift:"user,1" db:"user" json:"user"`
	Pwd  string `thrift:"pwd,2" db:"pwd" json:"pwd"`
}

func NewFoundationServiceFlushSuperPwdArgs() *FoundationServiceFlushSuperPwdArgs {
	return &FoundationServiceFlushSuperPwdArgs{}
}

func (p *FoundationServiceFlushSuperPwdArgs) GetUser() string {
	return p.User
}

func (p *FoundationServiceFlushSuperPwdArgs) GetPwd() string {
	return p.Pwd
}
func (p *FoundationServiceFlushSuperPwdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceFlushSuperPwdArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *FoundationServiceFlushSuperPwdArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Pwd = v
	}
	return nil
}

func (p *FoundationServiceFlushSuperPwdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FlushSuperPwd_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceFlushSuperPwdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err)
	}
	return err
}

func (p *FoundationServiceFlushSuperPwdArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err)
	}
	return err
}

func (p *FoundationServiceFlushSuperPwdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceFlushSuperPwdArgs(%+v)", *p)
}

type FoundationServiceFlushSuperPwdResult struct {
}

func NewFoundationServiceFlushSuperPwdResult() *FoundationServiceFlushSuperPwdResult {
	return &FoundationServiceFlushSuperPwdResult{}
}

func (p *FoundationServiceFlushSuperPwdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceFlushSuperPwdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FlushSuperPwd_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceFlushSuperPwdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceFlushSuperPwdResult(%+v)", *p)
}

// Attributes:
//  - ReturnUrl
type FoundationServiceGetSyncLoginUrlArgs struct {
	ReturnUrl string `thrift:"returnUrl,1" db:"returnUrl" json:"returnUrl"`
}

func NewFoundationServiceGetSyncLoginUrlArgs() *FoundationServiceGetSyncLoginUrlArgs {
	return &FoundationServiceGetSyncLoginUrlArgs{}
}

func (p *FoundationServiceGetSyncLoginUrlArgs) GetReturnUrl() string {
	return p.ReturnUrl
}
func (p *FoundationServiceGetSyncLoginUrlArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetSyncLoginUrlArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReturnUrl = v
	}
	return nil
}

func (p *FoundationServiceGetSyncLoginUrlArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSyncLoginUrl_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetSyncLoginUrlArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("returnUrl", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:returnUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ReturnUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.returnUrl (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:returnUrl: ", p), err)
	}
	return err
}

func (p *FoundationServiceGetSyncLoginUrlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetSyncLoginUrlArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetSyncLoginUrlResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceGetSyncLoginUrlResult() *FoundationServiceGetSyncLoginUrlResult {
	return &FoundationServiceGetSyncLoginUrlResult{}
}

var FoundationServiceGetSyncLoginUrlResult_Success_DEFAULT string

func (p *FoundationServiceGetSyncLoginUrlResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return FoundationServiceGetSyncLoginUrlResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FoundationServiceGetSyncLoginUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceGetSyncLoginUrlResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetSyncLoginUrlResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FoundationServiceGetSyncLoginUrlResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSyncLoginUrl_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetSyncLoginUrlResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceGetSyncLoginUrlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetSyncLoginUrlResult(%+v)", *p)
}

// Attributes:
//  - Codes
type FoundationServiceGetAreaNamesArgs struct {
	Codes []int32 `thrift:"codes,1" db:"codes" json:"codes"`
}

func NewFoundationServiceGetAreaNamesArgs() *FoundationServiceGetAreaNamesArgs {
	return &FoundationServiceGetAreaNamesArgs{}
}

func (p *FoundationServiceGetAreaNamesArgs) GetCodes() []int32 {
	return p.Codes
}
func (p *FoundationServiceGetAreaNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetAreaNamesArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.Codes = tSlice
	for i := 0; i < size; i++ {
		var _elem35 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem35 = v
		}
		p.Codes = append(p.Codes, _elem35)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FoundationServiceGetAreaNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAreaNames_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetAreaNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("codes", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:codes: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Codes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Codes {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:codes: ", p), err)
	}
	return err
}

func (p *FoundationServiceGetAreaNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetAreaNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetAreaNamesResult struct {
	Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceGetAreaNamesResult() *FoundationServiceGetAreaNamesResult {
	return &FoundationServiceGetAreaNamesResult{}
}

var FoundationServiceGetAreaNamesResult_Success_DEFAULT []string

func (p *FoundationServiceGetAreaNamesResult) GetSuccess() []string {
	return p.Success
}
func (p *FoundationServiceGetAreaNamesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceGetAreaNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetAreaNamesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem36 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem36 = v
		}
		p.Success = append(p.Success, _elem36)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FoundationServiceGetAreaNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAreaNames_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetAreaNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceGetAreaNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetAreaNamesResult(%+v)", *p)
}

// Attributes:
//  - Code
type FoundationServiceGetChildAreasArgs struct {
	Code int32 `thrift:"code,1" db:"code" json:"code"`
}

func NewFoundationServiceGetChildAreasArgs() *FoundationServiceGetChildAreasArgs {
	return &FoundationServiceGetChildAreasArgs{}
}

func (p *FoundationServiceGetChildAreasArgs) GetCode() int32 {
	return p.Code
}
func (p *FoundationServiceGetChildAreasArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetChildAreasArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *FoundationServiceGetChildAreasArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetChildAreas_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetChildAreasArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *FoundationServiceGetChildAreasArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetChildAreasArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetChildAreasResult struct {
	Success []*SArea `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceGetChildAreasResult() *FoundationServiceGetChildAreasResult {
	return &FoundationServiceGetChildAreasResult{}
}

var FoundationServiceGetChildAreasResult_Success_DEFAULT []*SArea

func (p *FoundationServiceGetChildAreasResult) GetSuccess() []*SArea {
	return p.Success
}
func (p *FoundationServiceGetChildAreasResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceGetChildAreasResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetChildAreasResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SArea, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem37 := &SArea{}
		if err := _elem37.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
		}
		p.Success = append(p.Success, _elem37)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FoundationServiceGetChildAreasResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetChildAreas_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetChildAreasResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceGetChildAreasResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetChildAreasResult(%+v)", *p)
}

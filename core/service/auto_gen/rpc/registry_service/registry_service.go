// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package registry_service

import (
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"go2o/core/service/auto_gen/rpc/ttype"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = ttype.GoUnusedProtection__

// 注册表
//
// Attributes:
//  - Key: 键
//  - Value: 值
//  - Default: 默认值
//  - Options: 可选值
//  - Flag: 标志
//  - Description: 描述
type SRegistry struct {
	Key         string `thrift:"Key,1" db:"Key" json:"Key"`
	Value       string `thrift:"Value,2" db:"Value" json:"Value"`
	Default     string `thrift:"Default,3" db:"Default" json:"Default"`
	Options     string `thrift:"Options,4" db:"Options" json:"Options"`
	Flag        int32  `thrift:"Flag,5" db:"Flag" json:"Flag"`
	Description string `thrift:"Description,6" db:"Description" json:"Description"`
}

func NewSRegistry() *SRegistry {
	return &SRegistry{}
}

func (p *SRegistry) GetKey() string {
	return p.Key
}

func (p *SRegistry) GetValue() string {
	return p.Value
}

func (p *SRegistry) GetDefault() string {
	return p.Default
}

func (p *SRegistry) GetOptions() string {
	return p.Options
}

func (p *SRegistry) GetFlag() int32 {
	return p.Flag
}

func (p *SRegistry) GetDescription() string {
	return p.Description
}
func (p *SRegistry) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SRegistry) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *SRegistry) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *SRegistry) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Default = v
	}
	return nil
}

func (p *SRegistry) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Options = v
	}
	return nil
}

func (p *SRegistry) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Flag = v
	}
	return nil
}

func (p *SRegistry) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *SRegistry) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SRegistry"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SRegistry) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Key: ", p), err)
	}
	return err
}

func (p *SRegistry) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Value: ", p), err)
	}
	return err
}

func (p *SRegistry) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Default", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Default: ", p), err)
	}
	if err := oprot.WriteString(string(p.Default)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Default (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Default: ", p), err)
	}
	return err
}

func (p *SRegistry) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Options", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Options: ", p), err)
	}
	if err := oprot.WriteString(string(p.Options)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Options (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Options: ", p), err)
	}
	return err
}

func (p *SRegistry) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Flag", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Flag: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Flag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Flag (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Flag: ", p), err)
	}
	return err
}

func (p *SRegistry) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Description", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Description: ", p), err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Description (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Description: ", p), err)
	}
	return err
}

func (p *SRegistry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SRegistry(%+v)", *p)
}

type RegistryService interface {
	// 获取注册表键值
	//
	// Parameters:
	//  - Key
	GetRegistry(ctx context.Context, key string) (r string, err error)
	// 获取键值存储数据字典
	//
	// Parameters:
	//  - Keys
	GetRegistries(ctx context.Context, keys []string) (r map[string]string, err error)
	// 按键前缀获取键数据
	//
	// Parameters:
	//  - Prefix
	FindRegistries(ctx context.Context, prefix string) (r map[string]string, err error)
	// 更新注册表键值
	//
	// Parameters:
	//  - Registries
	UpdateRegistry(ctx context.Context, registries map[string]string) (r *ttype.Result_, err error)
	// 搜索注册表
	//
	// Parameters:
	//  - Key
	SearchRegistry(ctx context.Context, key string) (r []*SRegistry, err error)
	// 创建自定义注册表项,@defaultValue 默认值,如需更改,使用UpdateRegistry方法
	//
	// Parameters:
	//  - Key
	//  - DefaultValue
	//  - Description
	CreateUserRegistry(ctx context.Context, key string, defaultValue string, description string) (r *ttype.Result_, err error)
	// 获取键值存储数据
	//
	// Parameters:
	//  - Keys
	GetRegistryV1(ctx context.Context, keys []string) (r []string, err error)
}

type RegistryServiceClient struct {
	c thrift.TClient
}

func NewRegistryServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RegistryServiceClient {
	return &RegistryServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewRegistryServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RegistryServiceClient {
	return &RegistryServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewRegistryServiceClient(c thrift.TClient) *RegistryServiceClient {
	return &RegistryServiceClient{
		c: c,
	}
}

func (p *RegistryServiceClient) Client_() thrift.TClient {
	return p.c
}

// 获取注册表键值
//
// Parameters:
//  - Key
func (p *RegistryServiceClient) GetRegistry(ctx context.Context, key string) (r string, err error) {
	var _args0 RegistryServiceGetRegistryArgs
	_args0.Key = key
	var _result1 RegistryServiceGetRegistryResult
	if err = p.Client_().Call(ctx, "GetRegistry", &_args0, &_result1); err != nil {
		return
	}
	return _result1.GetSuccess(), nil
}

// 获取键值存储数据字典
//
// Parameters:
//  - Keys
func (p *RegistryServiceClient) GetRegistries(ctx context.Context, keys []string) (r map[string]string, err error) {
	var _args2 RegistryServiceGetRegistriesArgs
	_args2.Keys = keys
	var _result3 RegistryServiceGetRegistriesResult
	if err = p.Client_().Call(ctx, "GetRegistries", &_args2, &_result3); err != nil {
		return
	}
	return _result3.GetSuccess(), nil
}

// 按键前缀获取键数据
//
// Parameters:
//  - Prefix
func (p *RegistryServiceClient) FindRegistries(ctx context.Context, prefix string) (r map[string]string, err error) {
	var _args4 RegistryServiceFindRegistriesArgs
	_args4.Prefix = prefix
	var _result5 RegistryServiceFindRegistriesResult
	if err = p.Client_().Call(ctx, "FindRegistries", &_args4, &_result5); err != nil {
		return
	}
	return _result5.GetSuccess(), nil
}

// 更新注册表键值
//
// Parameters:
//  - Registries
func (p *RegistryServiceClient) UpdateRegistry(ctx context.Context, registries map[string]string) (r *ttype.Result_, err error) {
	var _args6 RegistryServiceUpdateRegistryArgs
	_args6.Registries = registries
	var _result7 RegistryServiceUpdateRegistryResult
	if err = p.Client_().Call(ctx, "UpdateRegistry", &_args6, &_result7); err != nil {
		return
	}
	return _result7.GetSuccess(), nil
}

// 搜索注册表
//
// Parameters:
//  - Key
func (p *RegistryServiceClient) SearchRegistry(ctx context.Context, key string) (r []*SRegistry, err error) {
	var _args8 RegistryServiceSearchRegistryArgs
	_args8.Key = key
	var _result9 RegistryServiceSearchRegistryResult
	if err = p.Client_().Call(ctx, "SearchRegistry", &_args8, &_result9); err != nil {
		return
	}
	return _result9.GetSuccess(), nil
}

// 创建自定义注册表项,@defaultValue 默认值,如需更改,使用UpdateRegistry方法
//
// Parameters:
//  - Key
//  - DefaultValue
//  - Description
func (p *RegistryServiceClient) CreateUserRegistry(ctx context.Context, key string, defaultValue string, description string) (r *ttype.Result_, err error) {
	var _args10 RegistryServiceCreateUserRegistryArgs
	_args10.Key = key
	_args10.DefaultValue = defaultValue
	_args10.Description = description
	var _result11 RegistryServiceCreateUserRegistryResult
	if err = p.Client_().Call(ctx, "CreateUserRegistry", &_args10, &_result11); err != nil {
		return
	}
	return _result11.GetSuccess(), nil
}

// 获取键值存储数据
//
// Parameters:
//  - Keys
func (p *RegistryServiceClient) GetRegistryV1(ctx context.Context, keys []string) (r []string, err error) {
	var _args12 RegistryServiceGetRegistryV1Args
	_args12.Keys = keys
	var _result13 RegistryServiceGetRegistryV1Result
	if err = p.Client_().Call(ctx, "GetRegistryV1", &_args12, &_result13); err != nil {
		return
	}
	return _result13.GetSuccess(), nil
}

type RegistryServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      RegistryService
}

func (p *RegistryServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *RegistryServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *RegistryServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewRegistryServiceProcessor(handler RegistryService) *RegistryServiceProcessor {

	self14 := &RegistryServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self14.processorMap["GetRegistry"] = &registryServiceProcessorGetRegistry{handler: handler}
	self14.processorMap["GetRegistries"] = &registryServiceProcessorGetRegistries{handler: handler}
	self14.processorMap["FindRegistries"] = &registryServiceProcessorFindRegistries{handler: handler}
	self14.processorMap["UpdateRegistry"] = &registryServiceProcessorUpdateRegistry{handler: handler}
	self14.processorMap["SearchRegistry"] = &registryServiceProcessorSearchRegistry{handler: handler}
	self14.processorMap["CreateUserRegistry"] = &registryServiceProcessorCreateUserRegistry{handler: handler}
	self14.processorMap["GetRegistryV1"] = &registryServiceProcessorGetRegistryV1{handler: handler}
	return self14
}

func (p *RegistryServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x15 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x15.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x15

}

type registryServiceProcessorGetRegistry struct {
	handler RegistryService
}

func (p *registryServiceProcessorGetRegistry) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegistryServiceGetRegistryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetRegistry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegistryServiceGetRegistryResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetRegistry(ctx, args.Key); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetRegistry: "+err2.Error())
		oprot.WriteMessageBegin("GetRegistry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetRegistry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type registryServiceProcessorGetRegistries struct {
	handler RegistryService
}

func (p *registryServiceProcessorGetRegistries) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegistryServiceGetRegistriesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetRegistries", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegistryServiceGetRegistriesResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.GetRegistries(ctx, args.Keys); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetRegistries: "+err2.Error())
		oprot.WriteMessageBegin("GetRegistries", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetRegistries", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type registryServiceProcessorFindRegistries struct {
	handler RegistryService
}

func (p *registryServiceProcessorFindRegistries) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegistryServiceFindRegistriesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FindRegistries", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegistryServiceFindRegistriesResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.FindRegistries(ctx, args.Prefix); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FindRegistries: "+err2.Error())
		oprot.WriteMessageBegin("FindRegistries", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("FindRegistries", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type registryServiceProcessorUpdateRegistry struct {
	handler RegistryService
}

func (p *registryServiceProcessorUpdateRegistry) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegistryServiceUpdateRegistryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateRegistry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegistryServiceUpdateRegistryResult{}
	var retval *ttype.Result_
	var err2 error
	if retval, err2 = p.handler.UpdateRegistry(ctx, args.Registries); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateRegistry: "+err2.Error())
		oprot.WriteMessageBegin("UpdateRegistry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateRegistry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type registryServiceProcessorSearchRegistry struct {
	handler RegistryService
}

func (p *registryServiceProcessorSearchRegistry) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegistryServiceSearchRegistryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SearchRegistry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegistryServiceSearchRegistryResult{}
	var retval []*SRegistry
	var err2 error
	if retval, err2 = p.handler.SearchRegistry(ctx, args.Key); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SearchRegistry: "+err2.Error())
		oprot.WriteMessageBegin("SearchRegistry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SearchRegistry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type registryServiceProcessorCreateUserRegistry struct {
	handler RegistryService
}

func (p *registryServiceProcessorCreateUserRegistry) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegistryServiceCreateUserRegistryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateUserRegistry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegistryServiceCreateUserRegistryResult{}
	var retval *ttype.Result_
	var err2 error
	if retval, err2 = p.handler.CreateUserRegistry(ctx, args.Key, args.DefaultValue, args.Description); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateUserRegistry: "+err2.Error())
		oprot.WriteMessageBegin("CreateUserRegistry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateUserRegistry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type registryServiceProcessorGetRegistryV1 struct {
	handler RegistryService
}

func (p *registryServiceProcessorGetRegistryV1) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegistryServiceGetRegistryV1Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetRegistryV1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegistryServiceGetRegistryV1Result{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetRegistryV1(ctx, args.Keys); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetRegistryV1: "+err2.Error())
		oprot.WriteMessageBegin("GetRegistryV1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetRegistryV1", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type RegistryServiceGetRegistryArgs struct {
	Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewRegistryServiceGetRegistryArgs() *RegistryServiceGetRegistryArgs {
	return &RegistryServiceGetRegistryArgs{}
}

func (p *RegistryServiceGetRegistryArgs) GetKey() string {
	return p.Key
}
func (p *RegistryServiceGetRegistryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegistryServiceGetRegistryArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *RegistryServiceGetRegistryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetRegistry_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegistryServiceGetRegistryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *RegistryServiceGetRegistryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegistryServiceGetRegistryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RegistryServiceGetRegistryResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRegistryServiceGetRegistryResult() *RegistryServiceGetRegistryResult {
	return &RegistryServiceGetRegistryResult{}
}

var RegistryServiceGetRegistryResult_Success_DEFAULT string

func (p *RegistryServiceGetRegistryResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return RegistryServiceGetRegistryResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *RegistryServiceGetRegistryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegistryServiceGetRegistryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegistryServiceGetRegistryResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RegistryServiceGetRegistryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetRegistry_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegistryServiceGetRegistryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RegistryServiceGetRegistryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegistryServiceGetRegistryResult(%+v)", *p)
}

// Attributes:
//  - Keys
type RegistryServiceGetRegistriesArgs struct {
	Keys []string `thrift:"keys,1" db:"keys" json:"keys"`
}

func NewRegistryServiceGetRegistriesArgs() *RegistryServiceGetRegistriesArgs {
	return &RegistryServiceGetRegistriesArgs{}
}

func (p *RegistryServiceGetRegistriesArgs) GetKeys() []string {
	return p.Keys
}
func (p *RegistryServiceGetRegistriesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegistryServiceGetRegistriesArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Keys = tSlice
	for i := 0; i < size; i++ {
		var _elem16 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem16 = v
		}
		p.Keys = append(p.Keys, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RegistryServiceGetRegistriesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetRegistries_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegistryServiceGetRegistriesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keys", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keys: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Keys)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Keys {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keys: ", p), err)
	}
	return err
}

func (p *RegistryServiceGetRegistriesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegistryServiceGetRegistriesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RegistryServiceGetRegistriesResult struct {
	Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRegistryServiceGetRegistriesResult() *RegistryServiceGetRegistriesResult {
	return &RegistryServiceGetRegistriesResult{}
}

var RegistryServiceGetRegistriesResult_Success_DEFAULT map[string]string

func (p *RegistryServiceGetRegistriesResult) GetSuccess() map[string]string {
	return p.Success
}
func (p *RegistryServiceGetRegistriesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegistryServiceGetRegistriesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegistryServiceGetRegistriesResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key17 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key17 = v
		}
		var _val18 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val18 = v
		}
		p.Success[_key17] = _val18
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RegistryServiceGetRegistriesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetRegistries_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegistryServiceGetRegistriesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RegistryServiceGetRegistriesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegistryServiceGetRegistriesResult(%+v)", *p)
}

// Attributes:
//  - Prefix
type RegistryServiceFindRegistriesArgs struct {
	Prefix string `thrift:"prefix,1" db:"prefix" json:"prefix"`
}

func NewRegistryServiceFindRegistriesArgs() *RegistryServiceFindRegistriesArgs {
	return &RegistryServiceFindRegistriesArgs{}
}

func (p *RegistryServiceFindRegistriesArgs) GetPrefix() string {
	return p.Prefix
}
func (p *RegistryServiceFindRegistriesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegistryServiceFindRegistriesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Prefix = v
	}
	return nil
}

func (p *RegistryServiceFindRegistriesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FindRegistries_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegistryServiceFindRegistriesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("prefix", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:prefix: ", p), err)
	}
	if err := oprot.WriteString(string(p.Prefix)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.prefix (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:prefix: ", p), err)
	}
	return err
}

func (p *RegistryServiceFindRegistriesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegistryServiceFindRegistriesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RegistryServiceFindRegistriesResult struct {
	Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRegistryServiceFindRegistriesResult() *RegistryServiceFindRegistriesResult {
	return &RegistryServiceFindRegistriesResult{}
}

var RegistryServiceFindRegistriesResult_Success_DEFAULT map[string]string

func (p *RegistryServiceFindRegistriesResult) GetSuccess() map[string]string {
	return p.Success
}
func (p *RegistryServiceFindRegistriesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegistryServiceFindRegistriesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegistryServiceFindRegistriesResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key19 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key19 = v
		}
		var _val20 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val20 = v
		}
		p.Success[_key19] = _val20
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RegistryServiceFindRegistriesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FindRegistries_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegistryServiceFindRegistriesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RegistryServiceFindRegistriesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegistryServiceFindRegistriesResult(%+v)", *p)
}

// Attributes:
//  - Registries
type RegistryServiceUpdateRegistryArgs struct {
	Registries map[string]string `thrift:"registries,1" db:"registries" json:"registries"`
}

func NewRegistryServiceUpdateRegistryArgs() *RegistryServiceUpdateRegistryArgs {
	return &RegistryServiceUpdateRegistryArgs{}
}

func (p *RegistryServiceUpdateRegistryArgs) GetRegistries() map[string]string {
	return p.Registries
}
func (p *RegistryServiceUpdateRegistryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegistryServiceUpdateRegistryArgs) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Registries = tMap
	for i := 0; i < size; i++ {
		var _key21 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key21 = v
		}
		var _val22 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val22 = v
		}
		p.Registries[_key21] = _val22
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RegistryServiceUpdateRegistryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateRegistry_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegistryServiceUpdateRegistryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("registries", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:registries: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Registries)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Registries {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:registries: ", p), err)
	}
	return err
}

func (p *RegistryServiceUpdateRegistryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegistryServiceUpdateRegistryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RegistryServiceUpdateRegistryResult struct {
	Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRegistryServiceUpdateRegistryResult() *RegistryServiceUpdateRegistryResult {
	return &RegistryServiceUpdateRegistryResult{}
}

var RegistryServiceUpdateRegistryResult_Success_DEFAULT *ttype.Result_

func (p *RegistryServiceUpdateRegistryResult) GetSuccess() *ttype.Result_ {
	if !p.IsSetSuccess() {
		return RegistryServiceUpdateRegistryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RegistryServiceUpdateRegistryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegistryServiceUpdateRegistryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegistryServiceUpdateRegistryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ttype.Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RegistryServiceUpdateRegistryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateRegistry_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegistryServiceUpdateRegistryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RegistryServiceUpdateRegistryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegistryServiceUpdateRegistryResult(%+v)", *p)
}

// Attributes:
//  - Key
type RegistryServiceSearchRegistryArgs struct {
	Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewRegistryServiceSearchRegistryArgs() *RegistryServiceSearchRegistryArgs {
	return &RegistryServiceSearchRegistryArgs{}
}

func (p *RegistryServiceSearchRegistryArgs) GetKey() string {
	return p.Key
}
func (p *RegistryServiceSearchRegistryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegistryServiceSearchRegistryArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *RegistryServiceSearchRegistryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SearchRegistry_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegistryServiceSearchRegistryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *RegistryServiceSearchRegistryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegistryServiceSearchRegistryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RegistryServiceSearchRegistryResult struct {
	Success []*SRegistry `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRegistryServiceSearchRegistryResult() *RegistryServiceSearchRegistryResult {
	return &RegistryServiceSearchRegistryResult{}
}

var RegistryServiceSearchRegistryResult_Success_DEFAULT []*SRegistry

func (p *RegistryServiceSearchRegistryResult) GetSuccess() []*SRegistry {
	return p.Success
}
func (p *RegistryServiceSearchRegistryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegistryServiceSearchRegistryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegistryServiceSearchRegistryResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SRegistry, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem23 := &SRegistry{}
		if err := _elem23.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
		}
		p.Success = append(p.Success, _elem23)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RegistryServiceSearchRegistryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SearchRegistry_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegistryServiceSearchRegistryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RegistryServiceSearchRegistryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegistryServiceSearchRegistryResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - DefaultValue
//  - Description
type RegistryServiceCreateUserRegistryArgs struct {
	Key          string `thrift:"key,1" db:"key" json:"key"`
	DefaultValue string `thrift:"defaultValue,2" db:"defaultValue" json:"defaultValue"`
	Description  string `thrift:"description,3" db:"description" json:"description"`
}

func NewRegistryServiceCreateUserRegistryArgs() *RegistryServiceCreateUserRegistryArgs {
	return &RegistryServiceCreateUserRegistryArgs{}
}

func (p *RegistryServiceCreateUserRegistryArgs) GetKey() string {
	return p.Key
}

func (p *RegistryServiceCreateUserRegistryArgs) GetDefaultValue() string {
	return p.DefaultValue
}

func (p *RegistryServiceCreateUserRegistryArgs) GetDescription() string {
	return p.Description
}
func (p *RegistryServiceCreateUserRegistryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegistryServiceCreateUserRegistryArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *RegistryServiceCreateUserRegistryArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DefaultValue = v
	}
	return nil
}

func (p *RegistryServiceCreateUserRegistryArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *RegistryServiceCreateUserRegistryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateUserRegistry_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegistryServiceCreateUserRegistryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *RegistryServiceCreateUserRegistryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("defaultValue", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:defaultValue: ", p), err)
	}
	if err := oprot.WriteString(string(p.DefaultValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.defaultValue (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:defaultValue: ", p), err)
	}
	return err
}

func (p *RegistryServiceCreateUserRegistryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:description: ", p), err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.description (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:description: ", p), err)
	}
	return err
}

func (p *RegistryServiceCreateUserRegistryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegistryServiceCreateUserRegistryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RegistryServiceCreateUserRegistryResult struct {
	Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRegistryServiceCreateUserRegistryResult() *RegistryServiceCreateUserRegistryResult {
	return &RegistryServiceCreateUserRegistryResult{}
}

var RegistryServiceCreateUserRegistryResult_Success_DEFAULT *ttype.Result_

func (p *RegistryServiceCreateUserRegistryResult) GetSuccess() *ttype.Result_ {
	if !p.IsSetSuccess() {
		return RegistryServiceCreateUserRegistryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RegistryServiceCreateUserRegistryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegistryServiceCreateUserRegistryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegistryServiceCreateUserRegistryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ttype.Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RegistryServiceCreateUserRegistryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateUserRegistry_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegistryServiceCreateUserRegistryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RegistryServiceCreateUserRegistryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegistryServiceCreateUserRegistryResult(%+v)", *p)
}

// Attributes:
//  - Keys
type RegistryServiceGetRegistryV1Args struct {
	Keys []string `thrift:"keys,1" db:"keys" json:"keys"`
}

func NewRegistryServiceGetRegistryV1Args() *RegistryServiceGetRegistryV1Args {
	return &RegistryServiceGetRegistryV1Args{}
}

func (p *RegistryServiceGetRegistryV1Args) GetKeys() []string {
	return p.Keys
}
func (p *RegistryServiceGetRegistryV1Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegistryServiceGetRegistryV1Args) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Keys = tSlice
	for i := 0; i < size; i++ {
		var _elem24 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem24 = v
		}
		p.Keys = append(p.Keys, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RegistryServiceGetRegistryV1Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetRegistryV1_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegistryServiceGetRegistryV1Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keys", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keys: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Keys)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Keys {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keys: ", p), err)
	}
	return err
}

func (p *RegistryServiceGetRegistryV1Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegistryServiceGetRegistryV1Args(%+v)", *p)
}

// Attributes:
//  - Success
type RegistryServiceGetRegistryV1Result struct {
	Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRegistryServiceGetRegistryV1Result() *RegistryServiceGetRegistryV1Result {
	return &RegistryServiceGetRegistryV1Result{}
}

var RegistryServiceGetRegistryV1Result_Success_DEFAULT []string

func (p *RegistryServiceGetRegistryV1Result) GetSuccess() []string {
	return p.Success
}
func (p *RegistryServiceGetRegistryV1Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegistryServiceGetRegistryV1Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegistryServiceGetRegistryV1Result) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem25 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem25 = v
		}
		p.Success = append(p.Success, _elem25)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RegistryServiceGetRegistryV1Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetRegistryV1_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegistryServiceGetRegistryV1Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RegistryServiceGetRegistryV1Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegistryServiceGetRegistryV1Result(%+v)", *p)
}

// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package content_service

import (
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"go2o/core/service/auto_gen/rpc/ttype"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = ttype.GoUnusedProtection__

// 文章
//
// Attributes:
//  - ID: 编号
//  - CatId: 栏目编号
//  - Title: 标题
//  - SmallTitle: 小标题
//  - Thumbnail: 文章附图
//  - PublisherId: 重定向URL
//  - Location: 重定向URL
//  - Priority: 优先级,优先级越高，则置顶
//  - AccessKey: 浏览钥匙
//  - Content: 文档内容
//  - Tags: 标签（关键词）
//  - ViewCount: 显示次数
//  - SortNum: 排序序号
//  - CreateTime: 创建时间
//  - UpdateTime: 最后修改时间
type SArticle struct {
	ID          int32  `thrift:"Id,1" db:"Id" json:"Id"`
	CatId       int32  `thrift:"CatId,2" db:"CatId" json:"CatId"`
	Title       string `thrift:"Title,3" db:"Title" json:"Title"`
	SmallTitle  string `thrift:"SmallTitle,4" db:"SmallTitle" json:"SmallTitle"`
	Thumbnail   string `thrift:"Thumbnail,5" db:"Thumbnail" json:"Thumbnail"`
	PublisherId int32  `thrift:"PublisherId,6" db:"PublisherId" json:"PublisherId"`
	Location    string `thrift:"Location,7" db:"Location" json:"Location"`
	Priority    int32  `thrift:"Priority,8" db:"Priority" json:"Priority"`
	AccessKey   string `thrift:"AccessKey,9" db:"AccessKey" json:"AccessKey"`
	Content     string `thrift:"Content,10" db:"Content" json:"Content"`
	Tags        string `thrift:"Tags,11" db:"Tags" json:"Tags"`
	ViewCount   int32  `thrift:"ViewCount,12" db:"ViewCount" json:"ViewCount"`
	SortNum     int32  `thrift:"SortNum,13" db:"SortNum" json:"SortNum"`
	CreateTime  int32  `thrift:"CreateTime,14" db:"CreateTime" json:"CreateTime"`
	UpdateTime  int32  `thrift:"UpdateTime,15" db:"UpdateTime" json:"UpdateTime"`
}

func NewSArticle() *SArticle {
	return &SArticle{}
}

func (p *SArticle) GetID() int32 {
	return p.ID
}

func (p *SArticle) GetCatId() int32 {
	return p.CatId
}

func (p *SArticle) GetTitle() string {
	return p.Title
}

func (p *SArticle) GetSmallTitle() string {
	return p.SmallTitle
}

func (p *SArticle) GetThumbnail() string {
	return p.Thumbnail
}

func (p *SArticle) GetPublisherId() int32 {
	return p.PublisherId
}

func (p *SArticle) GetLocation() string {
	return p.Location
}

func (p *SArticle) GetPriority() int32 {
	return p.Priority
}

func (p *SArticle) GetAccessKey() string {
	return p.AccessKey
}

func (p *SArticle) GetContent() string {
	return p.Content
}

func (p *SArticle) GetTags() string {
	return p.Tags
}

func (p *SArticle) GetViewCount() int32 {
	return p.ViewCount
}

func (p *SArticle) GetSortNum() int32 {
	return p.SortNum
}

func (p *SArticle) GetCreateTime() int32 {
	return p.CreateTime
}

func (p *SArticle) GetUpdateTime() int32 {
	return p.UpdateTime
}
func (p *SArticle) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SArticle) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *SArticle) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CatId = v
	}
	return nil
}

func (p *SArticle) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *SArticle) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SmallTitle = v
	}
	return nil
}

func (p *SArticle) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Thumbnail = v
	}
	return nil
}

func (p *SArticle) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.PublisherId = v
	}
	return nil
}

func (p *SArticle) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Location = v
	}
	return nil
}

func (p *SArticle) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Priority = v
	}
	return nil
}

func (p *SArticle) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.AccessKey = v
	}
	return nil
}

func (p *SArticle) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Content = v
	}
	return nil
}

func (p *SArticle) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Tags = v
	}
	return nil
}

func (p *SArticle) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.ViewCount = v
	}
	return nil
}

func (p *SArticle) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.SortNum = v
	}
	return nil
}

func (p *SArticle) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *SArticle) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *SArticle) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SArticle"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SArticle) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Id: ", p), err)
	}
	return err
}

func (p *SArticle) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CatId", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:CatId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CatId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CatId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:CatId: ", p), err)
	}
	return err
}

func (p *SArticle) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Title", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Title (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Title: ", p), err)
	}
	return err
}

func (p *SArticle) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SmallTitle", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SmallTitle: ", p), err)
	}
	if err := oprot.WriteString(string(p.SmallTitle)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SmallTitle (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SmallTitle: ", p), err)
	}
	return err
}

func (p *SArticle) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Thumbnail", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Thumbnail: ", p), err)
	}
	if err := oprot.WriteString(string(p.Thumbnail)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Thumbnail (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Thumbnail: ", p), err)
	}
	return err
}

func (p *SArticle) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PublisherId", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:PublisherId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PublisherId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PublisherId (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:PublisherId: ", p), err)
	}
	return err
}

func (p *SArticle) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Location", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Location: ", p), err)
	}
	if err := oprot.WriteString(string(p.Location)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Location (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Location: ", p), err)
	}
	return err
}

func (p *SArticle) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Priority", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Priority: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Priority)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Priority (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Priority: ", p), err)
	}
	return err
}

func (p *SArticle) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccessKey", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:AccessKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.AccessKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.AccessKey (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:AccessKey: ", p), err)
	}
	return err
}

func (p *SArticle) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Content", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Content: ", p), err)
	}
	if err := oprot.WriteString(string(p.Content)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Content (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Content: ", p), err)
	}
	return err
}

func (p *SArticle) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Tags", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:Tags: ", p), err)
	}
	if err := oprot.WriteString(string(p.Tags)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Tags (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:Tags: ", p), err)
	}
	return err
}

func (p *SArticle) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ViewCount", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:ViewCount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ViewCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ViewCount (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:ViewCount: ", p), err)
	}
	return err
}

func (p *SArticle) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SortNum", thrift.I32, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:SortNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SortNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SortNum (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:SortNum: ", p), err)
	}
	return err
}

func (p *SArticle) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CreateTime", thrift.I32, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:CreateTime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CreateTime (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:CreateTime: ", p), err)
	}
	return err
}

func (p *SArticle) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I32, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:UpdateTime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:UpdateTime: ", p), err)
	}
	return err
}

func (p *SArticle) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SArticle(%+v)", *p)
}

type ContentService interface { //内容服务

	// 获取分页文章
	//
	// Parameters:
	//  - Cat
	//  - Page
	//  - Size
	QueryPagingArticles(ctx context.Context, cat string, page int32, size int32) (r *ttype.SPagingResult_, err error)
	// 获取置顶的文章
	//
	// Parameters:
	//  - Cat
	QueryTopArticles(ctx context.Context, cat string) (r []*SArticle, err error)
}

//内容服务
type ContentServiceClient struct {
	c thrift.TClient
}

func NewContentServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ContentServiceClient {
	return &ContentServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewContentServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ContentServiceClient {
	return &ContentServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewContentServiceClient(c thrift.TClient) *ContentServiceClient {
	return &ContentServiceClient{
		c: c,
	}
}

func (p *ContentServiceClient) Client_() thrift.TClient {
	return p.c
}

// 获取分页文章
//
// Parameters:
//  - Cat
//  - Page
//  - Size
func (p *ContentServiceClient) QueryPagingArticles(ctx context.Context, cat string, page int32, size int32) (r *ttype.SPagingResult_, err error) {
	var _args0 ContentServiceQueryPagingArticlesArgs
	_args0.Cat = cat
	_args0.Page = page
	_args0.Size = size
	var _result1 ContentServiceQueryPagingArticlesResult
	if err = p.Client_().Call(ctx, "QueryPagingArticles", &_args0, &_result1); err != nil {
		return
	}
	return _result1.GetSuccess(), nil
}

// 获取置顶的文章
//
// Parameters:
//  - Cat
func (p *ContentServiceClient) QueryTopArticles(ctx context.Context, cat string) (r []*SArticle, err error) {
	var _args2 ContentServiceQueryTopArticlesArgs
	_args2.Cat = cat
	var _result3 ContentServiceQueryTopArticlesResult
	if err = p.Client_().Call(ctx, "QueryTopArticles", &_args2, &_result3); err != nil {
		return
	}
	return _result3.GetSuccess(), nil
}

type ContentServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ContentService
}

func (p *ContentServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ContentServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ContentServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewContentServiceProcessor(handler ContentService) *ContentServiceProcessor {

	self4 := &ContentServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self4.processorMap["QueryPagingArticles"] = &contentServiceProcessorQueryPagingArticles{handler: handler}
	self4.processorMap["QueryTopArticles"] = &contentServiceProcessorQueryTopArticles{handler: handler}
	return self4
}

func (p *ContentServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x5.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x5

}

type contentServiceProcessorQueryPagingArticles struct {
	handler ContentService
}

func (p *contentServiceProcessorQueryPagingArticles) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ContentServiceQueryPagingArticlesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryPagingArticles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ContentServiceQueryPagingArticlesResult{}
	var retval *ttype.SPagingResult_
	var err2 error
	if retval, err2 = p.handler.QueryPagingArticles(ctx, args.Cat, args.Page, args.Size); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryPagingArticles: "+err2.Error())
		oprot.WriteMessageBegin("QueryPagingArticles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryPagingArticles", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type contentServiceProcessorQueryTopArticles struct {
	handler ContentService
}

func (p *contentServiceProcessorQueryTopArticles) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ContentServiceQueryTopArticlesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryTopArticles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ContentServiceQueryTopArticlesResult{}
	var retval []*SArticle
	var err2 error
	if retval, err2 = p.handler.QueryTopArticles(ctx, args.Cat); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryTopArticles: "+err2.Error())
		oprot.WriteMessageBegin("QueryTopArticles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryTopArticles", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Cat
//  - Page
//  - Size
type ContentServiceQueryPagingArticlesArgs struct {
	Cat  string `thrift:"cat,1" db:"cat" json:"cat"`
	Page int32  `thrift:"page,2" db:"page" json:"page"`
	Size int32  `thrift:"size,3" db:"size" json:"size"`
}

func NewContentServiceQueryPagingArticlesArgs() *ContentServiceQueryPagingArticlesArgs {
	return &ContentServiceQueryPagingArticlesArgs{}
}

func (p *ContentServiceQueryPagingArticlesArgs) GetCat() string {
	return p.Cat
}

func (p *ContentServiceQueryPagingArticlesArgs) GetPage() int32 {
	return p.Page
}

func (p *ContentServiceQueryPagingArticlesArgs) GetSize() int32 {
	return p.Size
}
func (p *ContentServiceQueryPagingArticlesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContentServiceQueryPagingArticlesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Cat = v
	}
	return nil
}

func (p *ContentServiceQueryPagingArticlesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Page = v
	}
	return nil
}

func (p *ContentServiceQueryPagingArticlesArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *ContentServiceQueryPagingArticlesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryPagingArticles_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContentServiceQueryPagingArticlesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cat", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cat: ", p), err)
	}
	if err := oprot.WriteString(string(p.Cat)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cat (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cat: ", p), err)
	}
	return err
}

func (p *ContentServiceQueryPagingArticlesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Page)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err)
	}
	return err
}

func (p *ContentServiceQueryPagingArticlesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err)
	}
	return err
}

func (p *ContentServiceQueryPagingArticlesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContentServiceQueryPagingArticlesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ContentServiceQueryPagingArticlesResult struct {
	Success *ttype.SPagingResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewContentServiceQueryPagingArticlesResult() *ContentServiceQueryPagingArticlesResult {
	return &ContentServiceQueryPagingArticlesResult{}
}

var ContentServiceQueryPagingArticlesResult_Success_DEFAULT *ttype.SPagingResult_

func (p *ContentServiceQueryPagingArticlesResult) GetSuccess() *ttype.SPagingResult_ {
	if !p.IsSetSuccess() {
		return ContentServiceQueryPagingArticlesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ContentServiceQueryPagingArticlesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContentServiceQueryPagingArticlesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContentServiceQueryPagingArticlesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ttype.SPagingResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ContentServiceQueryPagingArticlesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryPagingArticles_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContentServiceQueryPagingArticlesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ContentServiceQueryPagingArticlesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContentServiceQueryPagingArticlesResult(%+v)", *p)
}

// Attributes:
//  - Cat
type ContentServiceQueryTopArticlesArgs struct {
	Cat string `thrift:"cat,1" db:"cat" json:"cat"`
}

func NewContentServiceQueryTopArticlesArgs() *ContentServiceQueryTopArticlesArgs {
	return &ContentServiceQueryTopArticlesArgs{}
}

func (p *ContentServiceQueryTopArticlesArgs) GetCat() string {
	return p.Cat
}
func (p *ContentServiceQueryTopArticlesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContentServiceQueryTopArticlesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Cat = v
	}
	return nil
}

func (p *ContentServiceQueryTopArticlesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryTopArticles_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContentServiceQueryTopArticlesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cat", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cat: ", p), err)
	}
	if err := oprot.WriteString(string(p.Cat)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cat (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cat: ", p), err)
	}
	return err
}

func (p *ContentServiceQueryTopArticlesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContentServiceQueryTopArticlesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ContentServiceQueryTopArticlesResult struct {
	Success []*SArticle `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewContentServiceQueryTopArticlesResult() *ContentServiceQueryTopArticlesResult {
	return &ContentServiceQueryTopArticlesResult{}
}

var ContentServiceQueryTopArticlesResult_Success_DEFAULT []*SArticle

func (p *ContentServiceQueryTopArticlesResult) GetSuccess() []*SArticle {
	return p.Success
}
func (p *ContentServiceQueryTopArticlesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContentServiceQueryTopArticlesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContentServiceQueryTopArticlesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SArticle, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &SArticle{}
		if err := _elem6.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.Success = append(p.Success, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ContentServiceQueryTopArticlesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryTopArticles_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContentServiceQueryTopArticlesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ContentServiceQueryTopArticlesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContentServiceQueryTopArticlesResult(%+v)", *p)
}

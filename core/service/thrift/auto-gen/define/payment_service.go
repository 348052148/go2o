// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package define

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

//支付标志
type EPaymentFlag int64
const (
  EPaymentFlag_Balance EPaymentFlag = 1
  EPaymentFlag_Wallet EPaymentFlag = 2
  EPaymentFlag_Integral EPaymentFlag = 4
  EPaymentFlag_UserCard EPaymentFlag = 8
  EPaymentFlag_UserCoupon EPaymentFlag = 16
  EPaymentFlag_Cash EPaymentFlag = 32
  EPaymentFlag_BankCard EPaymentFlag = 64
  EPaymentFlag_OutSP EPaymentFlag = 128
  EPaymentFlag_SellerPay EPaymentFlag = 256
  EPaymentFlag_SystemPay EPaymentFlag = 512
)

func (p EPaymentFlag) String() string {
  switch p {
  case EPaymentFlag_Balance: return "Balance"
  case EPaymentFlag_Wallet: return "Wallet"
  case EPaymentFlag_Integral: return "Integral"
  case EPaymentFlag_UserCard: return "UserCard"
  case EPaymentFlag_UserCoupon: return "UserCoupon"
  case EPaymentFlag_Cash: return "Cash"
  case EPaymentFlag_BankCard: return "BankCard"
  case EPaymentFlag_OutSP: return "OutSP"
  case EPaymentFlag_SellerPay: return "SellerPay"
  case EPaymentFlag_SystemPay: return "SystemPay"
  }
  return "<UNSET>"
}

func EPaymentFlagFromString(s string) (EPaymentFlag, error) {
  switch s {
  case "Balance": return EPaymentFlag_Balance, nil 
  case "Wallet": return EPaymentFlag_Wallet, nil 
  case "Integral": return EPaymentFlag_Integral, nil 
  case "UserCard": return EPaymentFlag_UserCard, nil 
  case "UserCoupon": return EPaymentFlag_UserCoupon, nil 
  case "Cash": return EPaymentFlag_Cash, nil 
  case "BankCard": return EPaymentFlag_BankCard, nil 
  case "OutSP": return EPaymentFlag_OutSP, nil 
  case "SellerPay": return EPaymentFlag_SellerPay, nil 
  case "SystemPay": return EPaymentFlag_SystemPay, nil 
  }
  return EPaymentFlag(0), fmt.Errorf("not a valid EPaymentFlag string")
}


func EPaymentFlagPtr(v EPaymentFlag) *EPaymentFlag { return &v }

func (p EPaymentFlag) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EPaymentFlag) UnmarshalText(text []byte) error {
q, err := EPaymentFlagFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EPaymentFlag) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EPaymentFlag(v)
return nil
}

func (p * EPaymentFlag) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EPaymentChannel int64
const (
  EPaymentChannel_Balance EPaymentChannel = 1
  EPaymentChannel_Wallet EPaymentChannel = 2
  EPaymentChannel_Integral EPaymentChannel = 3
  EPaymentChannel_UserCard EPaymentChannel = 4
  EPaymentChannel_UserCoupon EPaymentChannel = 5
  EPaymentChannel_Cash EPaymentChannel = 6
  EPaymentChannel_BankCard EPaymentChannel = 7
  EPaymentChannel_SellerPay EPaymentChannel = 8
  EPaymentChannel_SystemPay EPaymentChannel = 9
)

func (p EPaymentChannel) String() string {
  switch p {
  case EPaymentChannel_Balance: return "Balance"
  case EPaymentChannel_Wallet: return "Wallet"
  case EPaymentChannel_Integral: return "Integral"
  case EPaymentChannel_UserCard: return "UserCard"
  case EPaymentChannel_UserCoupon: return "UserCoupon"
  case EPaymentChannel_Cash: return "Cash"
  case EPaymentChannel_BankCard: return "BankCard"
  case EPaymentChannel_SellerPay: return "SellerPay"
  case EPaymentChannel_SystemPay: return "SystemPay"
  }
  return "<UNSET>"
}

func EPaymentChannelFromString(s string) (EPaymentChannel, error) {
  switch s {
  case "Balance": return EPaymentChannel_Balance, nil 
  case "Wallet": return EPaymentChannel_Wallet, nil 
  case "Integral": return EPaymentChannel_Integral, nil 
  case "UserCard": return EPaymentChannel_UserCard, nil 
  case "UserCoupon": return EPaymentChannel_UserCoupon, nil 
  case "Cash": return EPaymentChannel_Cash, nil 
  case "BankCard": return EPaymentChannel_BankCard, nil 
  case "SellerPay": return EPaymentChannel_SellerPay, nil 
  case "SystemPay": return EPaymentChannel_SystemPay, nil 
  }
  return EPaymentChannel(0), fmt.Errorf("not a valid EPaymentChannel string")
}


func EPaymentChannelPtr(v EPaymentChannel) *EPaymentChannel { return &v }

func (p EPaymentChannel) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EPaymentChannel) UnmarshalText(text []byte) error {
q, err := EPaymentChannelFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EPaymentChannel) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EPaymentChannel(v)
return nil
}

func (p * EPaymentChannel) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// 支付单
// 
// Attributes:
//  - ID: 编号
//  - SellerId: 卖家编号
//  - TradeType: 交易类型
//  - TradeNo: 交易号
//  - MergeTradeNo: 合并支付交单单号
//  - Subject: 支付单详情
//  - SubOrder: 是否为子订单
//  - OrderType: 支付单的类型，如购物或其他
//  - OutOrderNo: 外部订单号
//  - BuyerId: 买家编号
//  - PayUid: 支付用户编号
//  - ItemAmount: 商品金额
//  - DiscountAmount: 优惠金额
//  - AdjustAmount: 调整金额
//  - DeductAmount: 抵扣金额
//  - TotalAmount: 共计金额
//  - ProcedureFee: 手续费
//  - FinalFee: 最终支付金额
//  - PayFlag: 可⽤支付方式
//  - ExtraData: 其他支付信息
//  - TradeChannel: 交易支付渠道
//  - OutTradeSp: 外部交易提供商
//  - OutTradeNo: 外部交易订单号
//  - State: 订单状态
//  - SubmitTime: 提交时间
//  - ExpiresTime: 过期时间
//  - PaidTime: 支付时间
//  - UpdateTime: 更新时间
//  - TradeChannels: 交易途径交易信息
type SPaymentOrder struct {
  ID int32 `thrift:"ID,1" db:"ID" json:"ID"`
  SellerId int32 `thrift:"SellerId,2" db:"SellerId" json:"SellerId"`
  TradeType string `thrift:"TradeType,3" db:"TradeType" json:"TradeType"`
  TradeNo string `thrift:"TradeNo,4" db:"TradeNo" json:"TradeNo"`
  MergeTradeNo string `thrift:"MergeTradeNo,5" db:"MergeTradeNo" json:"MergeTradeNo"`
  Subject string `thrift:"Subject,6" db:"Subject" json:"Subject"`
  SubOrder bool `thrift:"SubOrder,7" db:"SubOrder" json:"SubOrder"`
  OrderType int32 `thrift:"OrderType,8" db:"OrderType" json:"OrderType"`
  OutOrderNo string `thrift:"OutOrderNo,9" db:"OutOrderNo" json:"OutOrderNo"`
  BuyerId int32 `thrift:"BuyerId,10" db:"BuyerId" json:"BuyerId"`
  PayUid int32 `thrift:"PayUid,11" db:"PayUid" json:"PayUid"`
  ItemAmount int32 `thrift:"ItemAmount,12" db:"ItemAmount" json:"ItemAmount"`
  DiscountAmount int32 `thrift:"DiscountAmount,13" db:"DiscountAmount" json:"DiscountAmount"`
  AdjustAmount int32 `thrift:"AdjustAmount,14" db:"AdjustAmount" json:"AdjustAmount"`
  DeductAmount int32 `thrift:"DeductAmount,15" db:"DeductAmount" json:"DeductAmount"`
  TotalAmount int32 `thrift:"TotalAmount,16" db:"TotalAmount" json:"TotalAmount"`
  ProcedureFee int32 `thrift:"ProcedureFee,17" db:"ProcedureFee" json:"ProcedureFee"`
  FinalFee int32 `thrift:"FinalFee,18" db:"FinalFee" json:"FinalFee"`
  PayFlag int32 `thrift:"PayFlag,19" db:"PayFlag" json:"PayFlag"`
  ExtraData string `thrift:"ExtraData,20" db:"ExtraData" json:"ExtraData"`
  TradeChannel int32 `thrift:"TradeChannel,21" db:"TradeChannel" json:"TradeChannel"`
  OutTradeSp string `thrift:"OutTradeSp,22" db:"OutTradeSp" json:"OutTradeSp"`
  OutTradeNo string `thrift:"OutTradeNo,23" db:"OutTradeNo" json:"OutTradeNo"`
  State int32 `thrift:"State,24" db:"State" json:"State"`
  SubmitTime int64 `thrift:"SubmitTime,25" db:"SubmitTime" json:"SubmitTime"`
  ExpiresTime int64 `thrift:"ExpiresTime,26" db:"ExpiresTime" json:"ExpiresTime"`
  PaidTime int64 `thrift:"PaidTime,27" db:"PaidTime" json:"PaidTime"`
  UpdateTime int64 `thrift:"UpdateTime,28" db:"UpdateTime" json:"UpdateTime"`
  TradeChannels []*SPayTradeChan `thrift:"TradeChannels,29" db:"TradeChannels" json:"TradeChannels"`
}

func NewSPaymentOrder() *SPaymentOrder {
  return &SPaymentOrder{}
}


func (p *SPaymentOrder) GetID() int32 {
  return p.ID
}

func (p *SPaymentOrder) GetSellerId() int32 {
  return p.SellerId
}

func (p *SPaymentOrder) GetTradeType() string {
  return p.TradeType
}

func (p *SPaymentOrder) GetTradeNo() string {
  return p.TradeNo
}

func (p *SPaymentOrder) GetMergeTradeNo() string {
  return p.MergeTradeNo
}

func (p *SPaymentOrder) GetSubject() string {
  return p.Subject
}

func (p *SPaymentOrder) GetSubOrder() bool {
  return p.SubOrder
}

func (p *SPaymentOrder) GetOrderType() int32 {
  return p.OrderType
}

func (p *SPaymentOrder) GetOutOrderNo() string {
  return p.OutOrderNo
}

func (p *SPaymentOrder) GetBuyerId() int32 {
  return p.BuyerId
}

func (p *SPaymentOrder) GetPayUid() int32 {
  return p.PayUid
}

func (p *SPaymentOrder) GetItemAmount() int32 {
  return p.ItemAmount
}

func (p *SPaymentOrder) GetDiscountAmount() int32 {
  return p.DiscountAmount
}

func (p *SPaymentOrder) GetAdjustAmount() int32 {
  return p.AdjustAmount
}

func (p *SPaymentOrder) GetDeductAmount() int32 {
  return p.DeductAmount
}

func (p *SPaymentOrder) GetTotalAmount() int32 {
  return p.TotalAmount
}

func (p *SPaymentOrder) GetProcedureFee() int32 {
  return p.ProcedureFee
}

func (p *SPaymentOrder) GetFinalFee() int32 {
  return p.FinalFee
}

func (p *SPaymentOrder) GetPayFlag() int32 {
  return p.PayFlag
}

func (p *SPaymentOrder) GetExtraData() string {
  return p.ExtraData
}

func (p *SPaymentOrder) GetTradeChannel() int32 {
  return p.TradeChannel
}

func (p *SPaymentOrder) GetOutTradeSp() string {
  return p.OutTradeSp
}

func (p *SPaymentOrder) GetOutTradeNo() string {
  return p.OutTradeNo
}

func (p *SPaymentOrder) GetState() int32 {
  return p.State
}

func (p *SPaymentOrder) GetSubmitTime() int64 {
  return p.SubmitTime
}

func (p *SPaymentOrder) GetExpiresTime() int64 {
  return p.ExpiresTime
}

func (p *SPaymentOrder) GetPaidTime() int64 {
  return p.PaidTime
}

func (p *SPaymentOrder) GetUpdateTime() int64 {
  return p.UpdateTime
}

func (p *SPaymentOrder) GetTradeChannels() []*SPayTradeChan {
  return p.TradeChannels
}
func (p *SPaymentOrder) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField27(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField28(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField29(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SPaymentOrder)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SellerId = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TradeType = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TradeNo = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MergeTradeNo = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Subject = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SubOrder = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.OrderType = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.OutOrderNo = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.BuyerId = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.PayUid = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ItemAmount = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.DiscountAmount = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.AdjustAmount = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.DeductAmount = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.TotalAmount = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.ProcedureFee = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.FinalFee = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.PayFlag = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.ExtraData = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.TradeChannel = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.OutTradeSp = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.OutTradeNo = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.State = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.SubmitTime = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField26(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.ExpiresTime = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField27(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.PaidTime = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField28(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.UpdateTime = v
}
  return nil
}

func (p *SPaymentOrder)  ReadField29(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SPayTradeChan, 0, size)
  p.TradeChannels =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &SPayTradeChan{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.TradeChannels = append(p.TradeChannels, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SPaymentOrder) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SPaymentOrder"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
    if err := p.writeField28(oprot); err != nil { return err }
    if err := p.writeField29(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SPaymentOrder) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SellerId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:SellerId: ", p), err) }
  if err := oprot.WriteI32(int32(p.SellerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SellerId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:SellerId: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TradeType", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:TradeType: ", p), err) }
  if err := oprot.WriteString(string(p.TradeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TradeType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:TradeType: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TradeNo", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:TradeNo: ", p), err) }
  if err := oprot.WriteString(string(p.TradeNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TradeNo (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:TradeNo: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MergeTradeNo", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:MergeTradeNo: ", p), err) }
  if err := oprot.WriteString(string(p.MergeTradeNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MergeTradeNo (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:MergeTradeNo: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Subject", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Subject: ", p), err) }
  if err := oprot.WriteString(string(p.Subject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Subject (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Subject: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SubOrder", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:SubOrder: ", p), err) }
  if err := oprot.WriteBool(bool(p.SubOrder)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SubOrder (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:SubOrder: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("OrderType", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:OrderType: ", p), err) }
  if err := oprot.WriteI32(int32(p.OrderType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.OrderType (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:OrderType: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("OutOrderNo", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:OutOrderNo: ", p), err) }
  if err := oprot.WriteString(string(p.OutOrderNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.OutOrderNo (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:OutOrderNo: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BuyerId", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:BuyerId: ", p), err) }
  if err := oprot.WriteI32(int32(p.BuyerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BuyerId (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:BuyerId: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PayUid", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:PayUid: ", p), err) }
  if err := oprot.WriteI32(int32(p.PayUid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PayUid (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:PayUid: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ItemAmount", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:ItemAmount: ", p), err) }
  if err := oprot.WriteI32(int32(p.ItemAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ItemAmount (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:ItemAmount: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("DiscountAmount", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:DiscountAmount: ", p), err) }
  if err := oprot.WriteI32(int32(p.DiscountAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.DiscountAmount (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:DiscountAmount: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("AdjustAmount", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:AdjustAmount: ", p), err) }
  if err := oprot.WriteI32(int32(p.AdjustAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.AdjustAmount (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:AdjustAmount: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("DeductAmount", thrift.I32, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:DeductAmount: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeductAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.DeductAmount (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:DeductAmount: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TotalAmount", thrift.I32, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:TotalAmount: ", p), err) }
  if err := oprot.WriteI32(int32(p.TotalAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TotalAmount (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:TotalAmount: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ProcedureFee", thrift.I32, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:ProcedureFee: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProcedureFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ProcedureFee (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:ProcedureFee: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("FinalFee", thrift.I32, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:FinalFee: ", p), err) }
  if err := oprot.WriteI32(int32(p.FinalFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.FinalFee (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:FinalFee: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PayFlag", thrift.I32, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:PayFlag: ", p), err) }
  if err := oprot.WriteI32(int32(p.PayFlag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PayFlag (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:PayFlag: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ExtraData", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:ExtraData: ", p), err) }
  if err := oprot.WriteString(string(p.ExtraData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ExtraData (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:ExtraData: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TradeChannel", thrift.I32, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:TradeChannel: ", p), err) }
  if err := oprot.WriteI32(int32(p.TradeChannel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TradeChannel (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:TradeChannel: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("OutTradeSp", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:OutTradeSp: ", p), err) }
  if err := oprot.WriteString(string(p.OutTradeSp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.OutTradeSp (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:OutTradeSp: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("OutTradeNo", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:OutTradeNo: ", p), err) }
  if err := oprot.WriteString(string(p.OutTradeNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.OutTradeNo (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:OutTradeNo: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("State", thrift.I32, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:State: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.State (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:State: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SubmitTime", thrift.I64, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:SubmitTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.SubmitTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SubmitTime (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:SubmitTime: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField26(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ExpiresTime", thrift.I64, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:ExpiresTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExpiresTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ExpiresTime (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:ExpiresTime: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField27(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PaidTime", thrift.I64, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:PaidTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.PaidTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PaidTime (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:PaidTime: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField28(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:UpdateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:UpdateTime: ", p), err) }
  return err
}

func (p *SPaymentOrder) writeField29(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TradeChannels", thrift.LIST, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:TradeChannels: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TradeChannels)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TradeChannels {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:TradeChannels: ", p), err) }
  return err
}

func (p *SPaymentOrder) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SPaymentOrder(%+v)", *p)
}

// 支付单预交易数据
// 
// Attributes:
//  - ErrCode: 错误码
//  - ErrMsg: 错误消息
//  - TradeNo: 交易号
//  - PayFlag: 支付标志
//  - TradeState: 交易状态
//  - TradeOrders: 交易订单
//  - TotalAmount: 累计金额
//  - ProcedureFee: 手续费
//  - FinalFee: 最终支付金额
type SPrepareTradeData struct {
  ErrCode int32 `thrift:"ErrCode,1" db:"ErrCode" json:"ErrCode"`
  ErrMsg string `thrift:"ErrMsg,2" db:"ErrMsg" json:"ErrMsg"`
  TradeNo string `thrift:"TradeNo,3" db:"TradeNo" json:"TradeNo"`
  PayFlag int32 `thrift:"PayFlag,4" db:"PayFlag" json:"PayFlag"`
  TradeState int32 `thrift:"TradeState,5" db:"TradeState" json:"TradeState"`
  TradeOrders []*SPaymentOrderData `thrift:"TradeOrders,6" db:"TradeOrders" json:"TradeOrders"`
  TotalAmount int32 `thrift:"TotalAmount,7" db:"TotalAmount" json:"TotalAmount"`
  ProcedureFee int32 `thrift:"ProcedureFee,8" db:"ProcedureFee" json:"ProcedureFee"`
  FinalFee int32 `thrift:"FinalFee,9" db:"FinalFee" json:"FinalFee"`
}

func NewSPrepareTradeData() *SPrepareTradeData {
  return &SPrepareTradeData{}
}


func (p *SPrepareTradeData) GetErrCode() int32 {
  return p.ErrCode
}

func (p *SPrepareTradeData) GetErrMsg() string {
  return p.ErrMsg
}

func (p *SPrepareTradeData) GetTradeNo() string {
  return p.TradeNo
}

func (p *SPrepareTradeData) GetPayFlag() int32 {
  return p.PayFlag
}

func (p *SPrepareTradeData) GetTradeState() int32 {
  return p.TradeState
}

func (p *SPrepareTradeData) GetTradeOrders() []*SPaymentOrderData {
  return p.TradeOrders
}

func (p *SPrepareTradeData) GetTotalAmount() int32 {
  return p.TotalAmount
}

func (p *SPrepareTradeData) GetProcedureFee() int32 {
  return p.ProcedureFee
}

func (p *SPrepareTradeData) GetFinalFee() int32 {
  return p.FinalFee
}
func (p *SPrepareTradeData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SPrepareTradeData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrCode = v
}
  return nil
}

func (p *SPrepareTradeData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrMsg = v
}
  return nil
}

func (p *SPrepareTradeData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TradeNo = v
}
  return nil
}

func (p *SPrepareTradeData)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PayFlag = v
}
  return nil
}

func (p *SPrepareTradeData)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TradeState = v
}
  return nil
}

func (p *SPrepareTradeData)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SPaymentOrderData, 0, size)
  p.TradeOrders =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &SPaymentOrderData{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.TradeOrders = append(p.TradeOrders, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SPrepareTradeData)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TotalAmount = v
}
  return nil
}

func (p *SPrepareTradeData)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ProcedureFee = v
}
  return nil
}

func (p *SPrepareTradeData)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.FinalFee = v
}
  return nil
}

func (p *SPrepareTradeData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SPrepareTradeData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SPrepareTradeData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ErrCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ErrCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ErrCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ErrCode: ", p), err) }
  return err
}

func (p *SPrepareTradeData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ErrMsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ErrMsg: ", p), err) }
  if err := oprot.WriteString(string(p.ErrMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ErrMsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ErrMsg: ", p), err) }
  return err
}

func (p *SPrepareTradeData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TradeNo", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:TradeNo: ", p), err) }
  if err := oprot.WriteString(string(p.TradeNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TradeNo (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:TradeNo: ", p), err) }
  return err
}

func (p *SPrepareTradeData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PayFlag", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:PayFlag: ", p), err) }
  if err := oprot.WriteI32(int32(p.PayFlag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PayFlag (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:PayFlag: ", p), err) }
  return err
}

func (p *SPrepareTradeData) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TradeState", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:TradeState: ", p), err) }
  if err := oprot.WriteI32(int32(p.TradeState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TradeState (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:TradeState: ", p), err) }
  return err
}

func (p *SPrepareTradeData) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TradeOrders", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:TradeOrders: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TradeOrders)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TradeOrders {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:TradeOrders: ", p), err) }
  return err
}

func (p *SPrepareTradeData) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TotalAmount", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:TotalAmount: ", p), err) }
  if err := oprot.WriteI32(int32(p.TotalAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TotalAmount (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:TotalAmount: ", p), err) }
  return err
}

func (p *SPrepareTradeData) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ProcedureFee", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:ProcedureFee: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProcedureFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ProcedureFee (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:ProcedureFee: ", p), err) }
  return err
}

func (p *SPrepareTradeData) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("FinalFee", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:FinalFee: ", p), err) }
  if err := oprot.WriteI32(int32(p.FinalFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.FinalFee (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:FinalFee: ", p), err) }
  return err
}

func (p *SPrepareTradeData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SPrepareTradeData(%+v)", *p)
}

// 支付单数据
// 
// Attributes:
//  - OrderNo: 交易订单号
//  - Subject: 标题
//  - TradeType: 交易类型
//  - State: 状态
//  - ProcedureFee: 手续费
//  - FinalFee: 最终支付金额
type SPaymentOrderData struct {
  OrderNo string `thrift:"OrderNo,1" db:"OrderNo" json:"OrderNo"`
  Subject string `thrift:"Subject,2" db:"Subject" json:"Subject"`
  TradeType string `thrift:"TradeType,3" db:"TradeType" json:"TradeType"`
  State int32 `thrift:"State,4" db:"State" json:"State"`
  ProcedureFee int32 `thrift:"ProcedureFee,5" db:"ProcedureFee" json:"ProcedureFee"`
  FinalFee int32 `thrift:"FinalFee,6" db:"FinalFee" json:"FinalFee"`
}

func NewSPaymentOrderData() *SPaymentOrderData {
  return &SPaymentOrderData{}
}


func (p *SPaymentOrderData) GetOrderNo() string {
  return p.OrderNo
}

func (p *SPaymentOrderData) GetSubject() string {
  return p.Subject
}

func (p *SPaymentOrderData) GetTradeType() string {
  return p.TradeType
}

func (p *SPaymentOrderData) GetState() int32 {
  return p.State
}

func (p *SPaymentOrderData) GetProcedureFee() int32 {
  return p.ProcedureFee
}

func (p *SPaymentOrderData) GetFinalFee() int32 {
  return p.FinalFee
}
func (p *SPaymentOrderData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SPaymentOrderData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OrderNo = v
}
  return nil
}

func (p *SPaymentOrderData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Subject = v
}
  return nil
}

func (p *SPaymentOrderData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TradeType = v
}
  return nil
}

func (p *SPaymentOrderData)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.State = v
}
  return nil
}

func (p *SPaymentOrderData)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ProcedureFee = v
}
  return nil
}

func (p *SPaymentOrderData)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.FinalFee = v
}
  return nil
}

func (p *SPaymentOrderData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SPaymentOrderData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SPaymentOrderData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("OrderNo", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:OrderNo: ", p), err) }
  if err := oprot.WriteString(string(p.OrderNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.OrderNo (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:OrderNo: ", p), err) }
  return err
}

func (p *SPaymentOrderData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Subject", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Subject: ", p), err) }
  if err := oprot.WriteString(string(p.Subject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Subject (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Subject: ", p), err) }
  return err
}

func (p *SPaymentOrderData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TradeType", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:TradeType: ", p), err) }
  if err := oprot.WriteString(string(p.TradeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TradeType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:TradeType: ", p), err) }
  return err
}

func (p *SPaymentOrderData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("State", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:State: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.State (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:State: ", p), err) }
  return err
}

func (p *SPaymentOrderData) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ProcedureFee", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ProcedureFee: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProcedureFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ProcedureFee (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ProcedureFee: ", p), err) }
  return err
}

func (p *SPaymentOrderData) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("FinalFee", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:FinalFee: ", p), err) }
  if err := oprot.WriteI32(int32(p.FinalFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.FinalFee (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:FinalFee: ", p), err) }
  return err
}

func (p *SPaymentOrderData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SPaymentOrderData(%+v)", *p)
}

// 支付单项
// 
// Attributes:
//  - ID: 编号
//  - TradeNo: 交易单号
//  - PayChan: 支付途径
//  - InternalChan: 是否为内置支付途径
//  - PayAmount: 支付金额
//  - ChanData: 通道数据
type SPayTradeChan struct {
  ID int32 `thrift:"ID,1" db:"ID" json:"ID"`
  TradeNo int32 `thrift:"TradeNo,2" db:"TradeNo" json:"TradeNo"`
  PayChan int32 `thrift:"PayChan,3" db:"PayChan" json:"PayChan"`
  InternalChan int32 `thrift:"InternalChan,4" db:"InternalChan" json:"InternalChan"`
  PayAmount int32 `thrift:"PayAmount,5" db:"PayAmount" json:"PayAmount"`
  ChanData string `thrift:"ChanData,6" db:"ChanData" json:"ChanData"`
}

func NewSPayTradeChan() *SPayTradeChan {
  return &SPayTradeChan{}
}


func (p *SPayTradeChan) GetID() int32 {
  return p.ID
}

func (p *SPayTradeChan) GetTradeNo() int32 {
  return p.TradeNo
}

func (p *SPayTradeChan) GetPayChan() int32 {
  return p.PayChan
}

func (p *SPayTradeChan) GetInternalChan() int32 {
  return p.InternalChan
}

func (p *SPayTradeChan) GetPayAmount() int32 {
  return p.PayAmount
}

func (p *SPayTradeChan) GetChanData() string {
  return p.ChanData
}
func (p *SPayTradeChan) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SPayTradeChan)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *SPayTradeChan)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TradeNo = v
}
  return nil
}

func (p *SPayTradeChan)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PayChan = v
}
  return nil
}

func (p *SPayTradeChan)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.InternalChan = v
}
  return nil
}

func (p *SPayTradeChan)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PayAmount = v
}
  return nil
}

func (p *SPayTradeChan)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ChanData = v
}
  return nil
}

func (p *SPayTradeChan) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SPayTradeChan"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SPayTradeChan) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err) }
  return err
}

func (p *SPayTradeChan) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TradeNo", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:TradeNo: ", p), err) }
  if err := oprot.WriteI32(int32(p.TradeNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TradeNo (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:TradeNo: ", p), err) }
  return err
}

func (p *SPayTradeChan) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PayChan", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:PayChan: ", p), err) }
  if err := oprot.WriteI32(int32(p.PayChan)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PayChan (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:PayChan: ", p), err) }
  return err
}

func (p *SPayTradeChan) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("InternalChan", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:InternalChan: ", p), err) }
  if err := oprot.WriteI32(int32(p.InternalChan)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.InternalChan (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:InternalChan: ", p), err) }
  return err
}

func (p *SPayTradeChan) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PayAmount", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:PayAmount: ", p), err) }
  if err := oprot.WriteI32(int32(p.PayAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PayAmount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:PayAmount: ", p), err) }
  return err
}

func (p *SPayTradeChan) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ChanData", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ChanData: ", p), err) }
  if err := oprot.WriteString(string(p.ChanData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ChanData (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ChanData: ", p), err) }
  return err
}

func (p *SPayTradeChan) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SPayTradeChan(%+v)", *p)
}

type PaymentService interface {
  // Parameters:
  //  - O
  SubmitPaymentOrder(ctx context.Context, o *SPaymentOrder) (r *Result_, err error)
  // Parameters:
  //  - OrderNo
  GetPaymentOrder(ctx context.Context, orderNo string) (r *SPaymentOrder, err error)
  // Parameters:
  //  - TradeNo
  GetPaymentOrderId(ctx context.Context, tradeNo string) (r int32, err error)
  // Parameters:
  //  - ID
  GetPaymentOrderById(ctx context.Context, id int32) (r *SPaymentOrder, err error)
  // Parameters:
  //  - PaymentNo
  //  - Amount
  AdjustOrder(ctx context.Context, paymentNo string, amount float64) (r *Result_, err error)
  // Parameters:
  //  - OrderId
  //  - Remark
  DiscountByBalance(ctx context.Context, orderId int32, remark string) (r *Result_, err error)
  // Parameters:
  //  - OrderId
  //  - Integral
  //  - IgnoreOut
  DiscountByIntegral(ctx context.Context, orderId int32, integral int64, ignoreOut bool) (r *Result_, err error)
  // Parameters:
  //  - TradeNo
  //  - MergePay
  //  - Remark
  PaymentByWallet(ctx context.Context, tradeNo string, mergePay bool, remark string) (r *Result_, err error)
  // Parameters:
  //  - OrderId
  //  - Remark
  HybridPayment(ctx context.Context, orderId int32, remark string) (r *Result_, err error)
  // Parameters:
  //  - TradeNo
  //  - SpName
  //  - OuterNo
  FinishPayment(ctx context.Context, tradeNo string, spName string, outerNo string) (r *Result_, err error)
  // Parameters:
  //  - Action
  //  - UserId
  //  - Data
  GatewayV1(ctx context.Context, action string, userId int64, data map[string]string) (r *Result_, err error)
  // Parameters:
  //  - TradeNo
  //  - MergePay
  GetPaymentOrderInfo(ctx context.Context, tradeNo string, mergePay bool) (r *SPrepareTradeData, err error)
}

type PaymentServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewPaymentService instead
func NewPaymentServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PaymentServiceClient {
  return &PaymentServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewPaymentService instead
func NewPaymentServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PaymentServiceClient {
  return &PaymentServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewPaymentServiceClient(c thrift.TClient) *PaymentServiceClient {
  return &PaymentServiceClient{
    c: c,
  }
}

// Parameters:
//  - O
func (p *PaymentServiceClient) SubmitPaymentOrder(ctx context.Context, o *SPaymentOrder) (r *Result_, err error) {
  var _args2 PaymentServiceSubmitPaymentOrderArgs
  _args2.O = o
  var _result3 PaymentServiceSubmitPaymentOrderResult
  if err = p.c.Call(ctx, "SubmitPaymentOrder", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - OrderNo
func (p *PaymentServiceClient) GetPaymentOrder(ctx context.Context, orderNo string) (r *SPaymentOrder, err error) {
  var _args4 PaymentServiceGetPaymentOrderArgs
  _args4.OrderNo = orderNo
  var _result5 PaymentServiceGetPaymentOrderResult
  if err = p.c.Call(ctx, "GetPaymentOrder", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - TradeNo
func (p *PaymentServiceClient) GetPaymentOrderId(ctx context.Context, tradeNo string) (r int32, err error) {
  var _args6 PaymentServiceGetPaymentOrderIdArgs
  _args6.TradeNo = tradeNo
  var _result7 PaymentServiceGetPaymentOrderIdResult
  if err = p.c.Call(ctx, "GetPaymentOrderId", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *PaymentServiceClient) GetPaymentOrderById(ctx context.Context, id int32) (r *SPaymentOrder, err error) {
  var _args8 PaymentServiceGetPaymentOrderByIdArgs
  _args8.ID = id
  var _result9 PaymentServiceGetPaymentOrderByIdResult
  if err = p.c.Call(ctx, "GetPaymentOrderById", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - PaymentNo
//  - Amount
func (p *PaymentServiceClient) AdjustOrder(ctx context.Context, paymentNo string, amount float64) (r *Result_, err error) {
  var _args10 PaymentServiceAdjustOrderArgs
  _args10.PaymentNo = paymentNo
  _args10.Amount = amount
  var _result11 PaymentServiceAdjustOrderResult
  if err = p.c.Call(ctx, "AdjustOrder", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - OrderId
//  - Remark
func (p *PaymentServiceClient) DiscountByBalance(ctx context.Context, orderId int32, remark string) (r *Result_, err error) {
  var _args12 PaymentServiceDiscountByBalanceArgs
  _args12.OrderId = orderId
  _args12.Remark = remark
  var _result13 PaymentServiceDiscountByBalanceResult
  if err = p.c.Call(ctx, "DiscountByBalance", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - OrderId
//  - Integral
//  - IgnoreOut
func (p *PaymentServiceClient) DiscountByIntegral(ctx context.Context, orderId int32, integral int64, ignoreOut bool) (r *Result_, err error) {
  var _args14 PaymentServiceDiscountByIntegralArgs
  _args14.OrderId = orderId
  _args14.Integral = integral
  _args14.IgnoreOut = ignoreOut
  var _result15 PaymentServiceDiscountByIntegralResult
  if err = p.c.Call(ctx, "DiscountByIntegral", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

// Parameters:
//  - TradeNo
//  - MergePay
//  - Remark
func (p *PaymentServiceClient) PaymentByWallet(ctx context.Context, tradeNo string, mergePay bool, remark string) (r *Result_, err error) {
  var _args16 PaymentServicePaymentByWalletArgs
  _args16.TradeNo = tradeNo
  _args16.MergePay = mergePay
  _args16.Remark = remark
  var _result17 PaymentServicePaymentByWalletResult
  if err = p.c.Call(ctx, "PaymentByWallet", &_args16, &_result17); err != nil {
    return
  }
  return _result17.GetSuccess(), nil
}

// Parameters:
//  - OrderId
//  - Remark
func (p *PaymentServiceClient) HybridPayment(ctx context.Context, orderId int32, remark string) (r *Result_, err error) {
  var _args18 PaymentServiceHybridPaymentArgs
  _args18.OrderId = orderId
  _args18.Remark = remark
  var _result19 PaymentServiceHybridPaymentResult
  if err = p.c.Call(ctx, "HybridPayment", &_args18, &_result19); err != nil {
    return
  }
  return _result19.GetSuccess(), nil
}

// Parameters:
//  - TradeNo
//  - SpName
//  - OuterNo
func (p *PaymentServiceClient) FinishPayment(ctx context.Context, tradeNo string, spName string, outerNo string) (r *Result_, err error) {
  var _args20 PaymentServiceFinishPaymentArgs
  _args20.TradeNo = tradeNo
  _args20.SpName = spName
  _args20.OuterNo = outerNo
  var _result21 PaymentServiceFinishPaymentResult
  if err = p.c.Call(ctx, "FinishPayment", &_args20, &_result21); err != nil {
    return
  }
  return _result21.GetSuccess(), nil
}

// Parameters:
//  - Action
//  - UserId
//  - Data
func (p *PaymentServiceClient) GatewayV1(ctx context.Context, action string, userId int64, data map[string]string) (r *Result_, err error) {
  var _args22 PaymentServiceGatewayV1Args
  _args22.Action = action
  _args22.UserId = userId
  _args22.Data = data
  var _result23 PaymentServiceGatewayV1Result
  if err = p.c.Call(ctx, "GatewayV1", &_args22, &_result23); err != nil {
    return
  }
  return _result23.GetSuccess(), nil
}

// Parameters:
//  - TradeNo
//  - MergePay
func (p *PaymentServiceClient) GetPaymentOrderInfo(ctx context.Context, tradeNo string, mergePay bool) (r *SPrepareTradeData, err error) {
  var _args24 PaymentServiceGetPaymentOrderInfoArgs
  _args24.TradeNo = tradeNo
  _args24.MergePay = mergePay
  var _result25 PaymentServiceGetPaymentOrderInfoResult
  if err = p.c.Call(ctx, "GetPaymentOrderInfo", &_args24, &_result25); err != nil {
    return
  }
  return _result25.GetSuccess(), nil
}

type PaymentServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler PaymentService
}

func (p *PaymentServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *PaymentServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *PaymentServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewPaymentServiceProcessor(handler PaymentService) *PaymentServiceProcessor {

  self26 := &PaymentServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self26.processorMap["SubmitPaymentOrder"] = &paymentServiceProcessorSubmitPaymentOrder{handler:handler}
  self26.processorMap["GetPaymentOrder"] = &paymentServiceProcessorGetPaymentOrder{handler:handler}
  self26.processorMap["GetPaymentOrderId"] = &paymentServiceProcessorGetPaymentOrderId{handler:handler}
  self26.processorMap["GetPaymentOrderById"] = &paymentServiceProcessorGetPaymentOrderById{handler:handler}
  self26.processorMap["AdjustOrder"] = &paymentServiceProcessorAdjustOrder{handler:handler}
  self26.processorMap["DiscountByBalance"] = &paymentServiceProcessorDiscountByBalance{handler:handler}
  self26.processorMap["DiscountByIntegral"] = &paymentServiceProcessorDiscountByIntegral{handler:handler}
  self26.processorMap["PaymentByWallet"] = &paymentServiceProcessorPaymentByWallet{handler:handler}
  self26.processorMap["HybridPayment"] = &paymentServiceProcessorHybridPayment{handler:handler}
  self26.processorMap["FinishPayment"] = &paymentServiceProcessorFinishPayment{handler:handler}
  self26.processorMap["GatewayV1"] = &paymentServiceProcessorGatewayV1{handler:handler}
  self26.processorMap["GetPaymentOrderInfo"] = &paymentServiceProcessorGetPaymentOrderInfo{handler:handler}
return self26
}

func (p *PaymentServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x27 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x27.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x27

}

type paymentServiceProcessorSubmitPaymentOrder struct {
  handler PaymentService
}

func (p *paymentServiceProcessorSubmitPaymentOrder) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PaymentServiceSubmitPaymentOrderArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SubmitPaymentOrder", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PaymentServiceSubmitPaymentOrderResult{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.SubmitPaymentOrder(ctx, args.O); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SubmitPaymentOrder: " + err2.Error())
    oprot.WriteMessageBegin("SubmitPaymentOrder", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SubmitPaymentOrder", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type paymentServiceProcessorGetPaymentOrder struct {
  handler PaymentService
}

func (p *paymentServiceProcessorGetPaymentOrder) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PaymentServiceGetPaymentOrderArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetPaymentOrder", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PaymentServiceGetPaymentOrderResult{}
var retval *SPaymentOrder
  var err2 error
  if retval, err2 = p.handler.GetPaymentOrder(ctx, args.OrderNo); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPaymentOrder: " + err2.Error())
    oprot.WriteMessageBegin("GetPaymentOrder", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetPaymentOrder", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type paymentServiceProcessorGetPaymentOrderId struct {
  handler PaymentService
}

func (p *paymentServiceProcessorGetPaymentOrderId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PaymentServiceGetPaymentOrderIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetPaymentOrderId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PaymentServiceGetPaymentOrderIdResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.GetPaymentOrderId(ctx, args.TradeNo); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPaymentOrderId: " + err2.Error())
    oprot.WriteMessageBegin("GetPaymentOrderId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetPaymentOrderId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type paymentServiceProcessorGetPaymentOrderById struct {
  handler PaymentService
}

func (p *paymentServiceProcessorGetPaymentOrderById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PaymentServiceGetPaymentOrderByIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetPaymentOrderById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PaymentServiceGetPaymentOrderByIdResult{}
var retval *SPaymentOrder
  var err2 error
  if retval, err2 = p.handler.GetPaymentOrderById(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPaymentOrderById: " + err2.Error())
    oprot.WriteMessageBegin("GetPaymentOrderById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetPaymentOrderById", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type paymentServiceProcessorAdjustOrder struct {
  handler PaymentService
}

func (p *paymentServiceProcessorAdjustOrder) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PaymentServiceAdjustOrderArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AdjustOrder", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PaymentServiceAdjustOrderResult{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.AdjustOrder(ctx, args.PaymentNo, args.Amount); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AdjustOrder: " + err2.Error())
    oprot.WriteMessageBegin("AdjustOrder", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("AdjustOrder", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type paymentServiceProcessorDiscountByBalance struct {
  handler PaymentService
}

func (p *paymentServiceProcessorDiscountByBalance) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PaymentServiceDiscountByBalanceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("DiscountByBalance", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PaymentServiceDiscountByBalanceResult{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.DiscountByBalance(ctx, args.OrderId, args.Remark); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DiscountByBalance: " + err2.Error())
    oprot.WriteMessageBegin("DiscountByBalance", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("DiscountByBalance", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type paymentServiceProcessorDiscountByIntegral struct {
  handler PaymentService
}

func (p *paymentServiceProcessorDiscountByIntegral) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PaymentServiceDiscountByIntegralArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("DiscountByIntegral", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PaymentServiceDiscountByIntegralResult{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.DiscountByIntegral(ctx, args.OrderId, args.Integral, args.IgnoreOut); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DiscountByIntegral: " + err2.Error())
    oprot.WriteMessageBegin("DiscountByIntegral", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("DiscountByIntegral", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type paymentServiceProcessorPaymentByWallet struct {
  handler PaymentService
}

func (p *paymentServiceProcessorPaymentByWallet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PaymentServicePaymentByWalletArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("PaymentByWallet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PaymentServicePaymentByWalletResult{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.PaymentByWallet(ctx, args.TradeNo, args.MergePay, args.Remark); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PaymentByWallet: " + err2.Error())
    oprot.WriteMessageBegin("PaymentByWallet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("PaymentByWallet", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type paymentServiceProcessorHybridPayment struct {
  handler PaymentService
}

func (p *paymentServiceProcessorHybridPayment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PaymentServiceHybridPaymentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("HybridPayment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PaymentServiceHybridPaymentResult{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.HybridPayment(ctx, args.OrderId, args.Remark); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing HybridPayment: " + err2.Error())
    oprot.WriteMessageBegin("HybridPayment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("HybridPayment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type paymentServiceProcessorFinishPayment struct {
  handler PaymentService
}

func (p *paymentServiceProcessorFinishPayment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PaymentServiceFinishPaymentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("FinishPayment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PaymentServiceFinishPaymentResult{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.FinishPayment(ctx, args.TradeNo, args.SpName, args.OuterNo); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FinishPayment: " + err2.Error())
    oprot.WriteMessageBegin("FinishPayment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("FinishPayment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type paymentServiceProcessorGatewayV1 struct {
  handler PaymentService
}

func (p *paymentServiceProcessorGatewayV1) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PaymentServiceGatewayV1Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GatewayV1", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PaymentServiceGatewayV1Result{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.GatewayV1(ctx, args.Action, args.UserId, args.Data); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GatewayV1: " + err2.Error())
    oprot.WriteMessageBegin("GatewayV1", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GatewayV1", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type paymentServiceProcessorGetPaymentOrderInfo struct {
  handler PaymentService
}

func (p *paymentServiceProcessorGetPaymentOrderInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PaymentServiceGetPaymentOrderInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetPaymentOrderInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PaymentServiceGetPaymentOrderInfoResult{}
var retval *SPrepareTradeData
  var err2 error
  if retval, err2 = p.handler.GetPaymentOrderInfo(ctx, args.TradeNo, args.MergePay); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPaymentOrderInfo: " + err2.Error())
    oprot.WriteMessageBegin("GetPaymentOrderInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetPaymentOrderInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - O
type PaymentServiceSubmitPaymentOrderArgs struct {
  O *SPaymentOrder `thrift:"o,1" db:"o" json:"o"`
}

func NewPaymentServiceSubmitPaymentOrderArgs() *PaymentServiceSubmitPaymentOrderArgs {
  return &PaymentServiceSubmitPaymentOrderArgs{}
}

var PaymentServiceSubmitPaymentOrderArgs_O_DEFAULT *SPaymentOrder
func (p *PaymentServiceSubmitPaymentOrderArgs) GetO() *SPaymentOrder {
  if !p.IsSetO() {
    return PaymentServiceSubmitPaymentOrderArgs_O_DEFAULT
  }
return p.O
}
func (p *PaymentServiceSubmitPaymentOrderArgs) IsSetO() bool {
  return p.O != nil
}

func (p *PaymentServiceSubmitPaymentOrderArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceSubmitPaymentOrderArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.O = &SPaymentOrder{}
  if err := p.O.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O), err)
  }
  return nil
}

func (p *PaymentServiceSubmitPaymentOrderArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SubmitPaymentOrder_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceSubmitPaymentOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("o", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o: ", p), err) }
  if err := p.O.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o: ", p), err) }
  return err
}

func (p *PaymentServiceSubmitPaymentOrderArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceSubmitPaymentOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceSubmitPaymentOrderResult struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceSubmitPaymentOrderResult() *PaymentServiceSubmitPaymentOrderResult {
  return &PaymentServiceSubmitPaymentOrderResult{}
}

var PaymentServiceSubmitPaymentOrderResult_Success_DEFAULT *Result_
func (p *PaymentServiceSubmitPaymentOrderResult) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return PaymentServiceSubmitPaymentOrderResult_Success_DEFAULT
  }
return p.Success
}
func (p *PaymentServiceSubmitPaymentOrderResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PaymentServiceSubmitPaymentOrderResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceSubmitPaymentOrderResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PaymentServiceSubmitPaymentOrderResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SubmitPaymentOrder_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceSubmitPaymentOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PaymentServiceSubmitPaymentOrderResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceSubmitPaymentOrderResult(%+v)", *p)
}

// Attributes:
//  - OrderNo
type PaymentServiceGetPaymentOrderArgs struct {
  OrderNo string `thrift:"orderNo,1" db:"orderNo" json:"orderNo"`
}

func NewPaymentServiceGetPaymentOrderArgs() *PaymentServiceGetPaymentOrderArgs {
  return &PaymentServiceGetPaymentOrderArgs{}
}


func (p *PaymentServiceGetPaymentOrderArgs) GetOrderNo() string {
  return p.OrderNo
}
func (p *PaymentServiceGetPaymentOrderArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceGetPaymentOrderArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OrderNo = v
}
  return nil
}

func (p *PaymentServiceGetPaymentOrderArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPaymentOrder_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceGetPaymentOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orderNo", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderNo: ", p), err) }
  if err := oprot.WriteString(string(p.OrderNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderNo (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderNo: ", p), err) }
  return err
}

func (p *PaymentServiceGetPaymentOrderArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceGetPaymentOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceGetPaymentOrderResult struct {
  Success *SPaymentOrder `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceGetPaymentOrderResult() *PaymentServiceGetPaymentOrderResult {
  return &PaymentServiceGetPaymentOrderResult{}
}

var PaymentServiceGetPaymentOrderResult_Success_DEFAULT *SPaymentOrder
func (p *PaymentServiceGetPaymentOrderResult) GetSuccess() *SPaymentOrder {
  if !p.IsSetSuccess() {
    return PaymentServiceGetPaymentOrderResult_Success_DEFAULT
  }
return p.Success
}
func (p *PaymentServiceGetPaymentOrderResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PaymentServiceGetPaymentOrderResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceGetPaymentOrderResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SPaymentOrder{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PaymentServiceGetPaymentOrderResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPaymentOrder_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceGetPaymentOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PaymentServiceGetPaymentOrderResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceGetPaymentOrderResult(%+v)", *p)
}

// Attributes:
//  - TradeNo
type PaymentServiceGetPaymentOrderIdArgs struct {
  TradeNo string `thrift:"tradeNo,1" db:"tradeNo" json:"tradeNo"`
}

func NewPaymentServiceGetPaymentOrderIdArgs() *PaymentServiceGetPaymentOrderIdArgs {
  return &PaymentServiceGetPaymentOrderIdArgs{}
}


func (p *PaymentServiceGetPaymentOrderIdArgs) GetTradeNo() string {
  return p.TradeNo
}
func (p *PaymentServiceGetPaymentOrderIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceGetPaymentOrderIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TradeNo = v
}
  return nil
}

func (p *PaymentServiceGetPaymentOrderIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPaymentOrderId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceGetPaymentOrderIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradeNo", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tradeNo: ", p), err) }
  if err := oprot.WriteString(string(p.TradeNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradeNo (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tradeNo: ", p), err) }
  return err
}

func (p *PaymentServiceGetPaymentOrderIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceGetPaymentOrderIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceGetPaymentOrderIdResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceGetPaymentOrderIdResult() *PaymentServiceGetPaymentOrderIdResult {
  return &PaymentServiceGetPaymentOrderIdResult{}
}

var PaymentServiceGetPaymentOrderIdResult_Success_DEFAULT int32
func (p *PaymentServiceGetPaymentOrderIdResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return PaymentServiceGetPaymentOrderIdResult_Success_DEFAULT
  }
return *p.Success
}
func (p *PaymentServiceGetPaymentOrderIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PaymentServiceGetPaymentOrderIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceGetPaymentOrderIdResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *PaymentServiceGetPaymentOrderIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPaymentOrderId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceGetPaymentOrderIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PaymentServiceGetPaymentOrderIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceGetPaymentOrderIdResult(%+v)", *p)
}

// Attributes:
//  - ID
type PaymentServiceGetPaymentOrderByIdArgs struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
}

func NewPaymentServiceGetPaymentOrderByIdArgs() *PaymentServiceGetPaymentOrderByIdArgs {
  return &PaymentServiceGetPaymentOrderByIdArgs{}
}


func (p *PaymentServiceGetPaymentOrderByIdArgs) GetID() int32 {
  return p.ID
}
func (p *PaymentServiceGetPaymentOrderByIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceGetPaymentOrderByIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *PaymentServiceGetPaymentOrderByIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPaymentOrderById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceGetPaymentOrderByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *PaymentServiceGetPaymentOrderByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceGetPaymentOrderByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceGetPaymentOrderByIdResult struct {
  Success *SPaymentOrder `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceGetPaymentOrderByIdResult() *PaymentServiceGetPaymentOrderByIdResult {
  return &PaymentServiceGetPaymentOrderByIdResult{}
}

var PaymentServiceGetPaymentOrderByIdResult_Success_DEFAULT *SPaymentOrder
func (p *PaymentServiceGetPaymentOrderByIdResult) GetSuccess() *SPaymentOrder {
  if !p.IsSetSuccess() {
    return PaymentServiceGetPaymentOrderByIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *PaymentServiceGetPaymentOrderByIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PaymentServiceGetPaymentOrderByIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceGetPaymentOrderByIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SPaymentOrder{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PaymentServiceGetPaymentOrderByIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPaymentOrderById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceGetPaymentOrderByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PaymentServiceGetPaymentOrderByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceGetPaymentOrderByIdResult(%+v)", *p)
}

// Attributes:
//  - PaymentNo
//  - Amount
type PaymentServiceAdjustOrderArgs struct {
  PaymentNo string `thrift:"paymentNo,1" db:"paymentNo" json:"paymentNo"`
  Amount float64 `thrift:"amount,2" db:"amount" json:"amount"`
}

func NewPaymentServiceAdjustOrderArgs() *PaymentServiceAdjustOrderArgs {
  return &PaymentServiceAdjustOrderArgs{}
}


func (p *PaymentServiceAdjustOrderArgs) GetPaymentNo() string {
  return p.PaymentNo
}

func (p *PaymentServiceAdjustOrderArgs) GetAmount() float64 {
  return p.Amount
}
func (p *PaymentServiceAdjustOrderArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceAdjustOrderArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PaymentNo = v
}
  return nil
}

func (p *PaymentServiceAdjustOrderArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *PaymentServiceAdjustOrderArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AdjustOrder_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceAdjustOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("paymentNo", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:paymentNo: ", p), err) }
  if err := oprot.WriteString(string(p.PaymentNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.paymentNo (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:paymentNo: ", p), err) }
  return err
}

func (p *PaymentServiceAdjustOrderArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amount: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amount: ", p), err) }
  return err
}

func (p *PaymentServiceAdjustOrderArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceAdjustOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceAdjustOrderResult struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceAdjustOrderResult() *PaymentServiceAdjustOrderResult {
  return &PaymentServiceAdjustOrderResult{}
}

var PaymentServiceAdjustOrderResult_Success_DEFAULT *Result_
func (p *PaymentServiceAdjustOrderResult) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return PaymentServiceAdjustOrderResult_Success_DEFAULT
  }
return p.Success
}
func (p *PaymentServiceAdjustOrderResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PaymentServiceAdjustOrderResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceAdjustOrderResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PaymentServiceAdjustOrderResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AdjustOrder_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceAdjustOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PaymentServiceAdjustOrderResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceAdjustOrderResult(%+v)", *p)
}

// Attributes:
//  - OrderId
//  - Remark
type PaymentServiceDiscountByBalanceArgs struct {
  OrderId int32 `thrift:"orderId,1" db:"orderId" json:"orderId"`
  Remark string `thrift:"remark,2" db:"remark" json:"remark"`
}

func NewPaymentServiceDiscountByBalanceArgs() *PaymentServiceDiscountByBalanceArgs {
  return &PaymentServiceDiscountByBalanceArgs{}
}


func (p *PaymentServiceDiscountByBalanceArgs) GetOrderId() int32 {
  return p.OrderId
}

func (p *PaymentServiceDiscountByBalanceArgs) GetRemark() string {
  return p.Remark
}
func (p *PaymentServiceDiscountByBalanceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceDiscountByBalanceArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OrderId = v
}
  return nil
}

func (p *PaymentServiceDiscountByBalanceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Remark = v
}
  return nil
}

func (p *PaymentServiceDiscountByBalanceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DiscountByBalance_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceDiscountByBalanceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orderId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderId: ", p), err) }
  if err := oprot.WriteI32(int32(p.OrderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderId: ", p), err) }
  return err
}

func (p *PaymentServiceDiscountByBalanceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remark", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:remark: ", p), err) }
  if err := oprot.WriteString(string(p.Remark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remark (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:remark: ", p), err) }
  return err
}

func (p *PaymentServiceDiscountByBalanceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceDiscountByBalanceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceDiscountByBalanceResult struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceDiscountByBalanceResult() *PaymentServiceDiscountByBalanceResult {
  return &PaymentServiceDiscountByBalanceResult{}
}

var PaymentServiceDiscountByBalanceResult_Success_DEFAULT *Result_
func (p *PaymentServiceDiscountByBalanceResult) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return PaymentServiceDiscountByBalanceResult_Success_DEFAULT
  }
return p.Success
}
func (p *PaymentServiceDiscountByBalanceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PaymentServiceDiscountByBalanceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceDiscountByBalanceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PaymentServiceDiscountByBalanceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DiscountByBalance_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceDiscountByBalanceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PaymentServiceDiscountByBalanceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceDiscountByBalanceResult(%+v)", *p)
}

// Attributes:
//  - OrderId
//  - Integral
//  - IgnoreOut
type PaymentServiceDiscountByIntegralArgs struct {
  OrderId int32 `thrift:"orderId,1" db:"orderId" json:"orderId"`
  Integral int64 `thrift:"integral,2" db:"integral" json:"integral"`
  IgnoreOut bool `thrift:"ignoreOut,3" db:"ignoreOut" json:"ignoreOut"`
}

func NewPaymentServiceDiscountByIntegralArgs() *PaymentServiceDiscountByIntegralArgs {
  return &PaymentServiceDiscountByIntegralArgs{}
}


func (p *PaymentServiceDiscountByIntegralArgs) GetOrderId() int32 {
  return p.OrderId
}

func (p *PaymentServiceDiscountByIntegralArgs) GetIntegral() int64 {
  return p.Integral
}

func (p *PaymentServiceDiscountByIntegralArgs) GetIgnoreOut() bool {
  return p.IgnoreOut
}
func (p *PaymentServiceDiscountByIntegralArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceDiscountByIntegralArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OrderId = v
}
  return nil
}

func (p *PaymentServiceDiscountByIntegralArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Integral = v
}
  return nil
}

func (p *PaymentServiceDiscountByIntegralArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IgnoreOut = v
}
  return nil
}

func (p *PaymentServiceDiscountByIntegralArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DiscountByIntegral_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceDiscountByIntegralArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orderId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderId: ", p), err) }
  if err := oprot.WriteI32(int32(p.OrderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderId: ", p), err) }
  return err
}

func (p *PaymentServiceDiscountByIntegralArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("integral", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:integral: ", p), err) }
  if err := oprot.WriteI64(int64(p.Integral)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.integral (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:integral: ", p), err) }
  return err
}

func (p *PaymentServiceDiscountByIntegralArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ignoreOut", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ignoreOut: ", p), err) }
  if err := oprot.WriteBool(bool(p.IgnoreOut)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ignoreOut (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ignoreOut: ", p), err) }
  return err
}

func (p *PaymentServiceDiscountByIntegralArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceDiscountByIntegralArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceDiscountByIntegralResult struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceDiscountByIntegralResult() *PaymentServiceDiscountByIntegralResult {
  return &PaymentServiceDiscountByIntegralResult{}
}

var PaymentServiceDiscountByIntegralResult_Success_DEFAULT *Result_
func (p *PaymentServiceDiscountByIntegralResult) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return PaymentServiceDiscountByIntegralResult_Success_DEFAULT
  }
return p.Success
}
func (p *PaymentServiceDiscountByIntegralResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PaymentServiceDiscountByIntegralResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceDiscountByIntegralResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PaymentServiceDiscountByIntegralResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DiscountByIntegral_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceDiscountByIntegralResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PaymentServiceDiscountByIntegralResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceDiscountByIntegralResult(%+v)", *p)
}

// Attributes:
//  - TradeNo
//  - MergePay
//  - Remark
type PaymentServicePaymentByWalletArgs struct {
  TradeNo string `thrift:"tradeNo,1" db:"tradeNo" json:"tradeNo"`
  MergePay bool `thrift:"mergePay,2" db:"mergePay" json:"mergePay"`
  Remark string `thrift:"remark,3" db:"remark" json:"remark"`
}

func NewPaymentServicePaymentByWalletArgs() *PaymentServicePaymentByWalletArgs {
  return &PaymentServicePaymentByWalletArgs{}
}


func (p *PaymentServicePaymentByWalletArgs) GetTradeNo() string {
  return p.TradeNo
}

func (p *PaymentServicePaymentByWalletArgs) GetMergePay() bool {
  return p.MergePay
}

func (p *PaymentServicePaymentByWalletArgs) GetRemark() string {
  return p.Remark
}
func (p *PaymentServicePaymentByWalletArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServicePaymentByWalletArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TradeNo = v
}
  return nil
}

func (p *PaymentServicePaymentByWalletArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MergePay = v
}
  return nil
}

func (p *PaymentServicePaymentByWalletArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Remark = v
}
  return nil
}

func (p *PaymentServicePaymentByWalletArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PaymentByWallet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServicePaymentByWalletArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradeNo", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tradeNo: ", p), err) }
  if err := oprot.WriteString(string(p.TradeNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradeNo (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tradeNo: ", p), err) }
  return err
}

func (p *PaymentServicePaymentByWalletArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mergePay", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mergePay: ", p), err) }
  if err := oprot.WriteBool(bool(p.MergePay)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mergePay (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mergePay: ", p), err) }
  return err
}

func (p *PaymentServicePaymentByWalletArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remark", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:remark: ", p), err) }
  if err := oprot.WriteString(string(p.Remark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remark (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:remark: ", p), err) }
  return err
}

func (p *PaymentServicePaymentByWalletArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServicePaymentByWalletArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServicePaymentByWalletResult struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServicePaymentByWalletResult() *PaymentServicePaymentByWalletResult {
  return &PaymentServicePaymentByWalletResult{}
}

var PaymentServicePaymentByWalletResult_Success_DEFAULT *Result_
func (p *PaymentServicePaymentByWalletResult) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return PaymentServicePaymentByWalletResult_Success_DEFAULT
  }
return p.Success
}
func (p *PaymentServicePaymentByWalletResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PaymentServicePaymentByWalletResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServicePaymentByWalletResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PaymentServicePaymentByWalletResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PaymentByWallet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServicePaymentByWalletResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PaymentServicePaymentByWalletResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServicePaymentByWalletResult(%+v)", *p)
}

// Attributes:
//  - OrderId
//  - Remark
type PaymentServiceHybridPaymentArgs struct {
  OrderId int32 `thrift:"orderId,1" db:"orderId" json:"orderId"`
  Remark string `thrift:"remark,2" db:"remark" json:"remark"`
}

func NewPaymentServiceHybridPaymentArgs() *PaymentServiceHybridPaymentArgs {
  return &PaymentServiceHybridPaymentArgs{}
}


func (p *PaymentServiceHybridPaymentArgs) GetOrderId() int32 {
  return p.OrderId
}

func (p *PaymentServiceHybridPaymentArgs) GetRemark() string {
  return p.Remark
}
func (p *PaymentServiceHybridPaymentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceHybridPaymentArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OrderId = v
}
  return nil
}

func (p *PaymentServiceHybridPaymentArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Remark = v
}
  return nil
}

func (p *PaymentServiceHybridPaymentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HybridPayment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceHybridPaymentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orderId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderId: ", p), err) }
  if err := oprot.WriteI32(int32(p.OrderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderId: ", p), err) }
  return err
}

func (p *PaymentServiceHybridPaymentArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remark", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:remark: ", p), err) }
  if err := oprot.WriteString(string(p.Remark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remark (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:remark: ", p), err) }
  return err
}

func (p *PaymentServiceHybridPaymentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceHybridPaymentArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceHybridPaymentResult struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceHybridPaymentResult() *PaymentServiceHybridPaymentResult {
  return &PaymentServiceHybridPaymentResult{}
}

var PaymentServiceHybridPaymentResult_Success_DEFAULT *Result_
func (p *PaymentServiceHybridPaymentResult) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return PaymentServiceHybridPaymentResult_Success_DEFAULT
  }
return p.Success
}
func (p *PaymentServiceHybridPaymentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PaymentServiceHybridPaymentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceHybridPaymentResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PaymentServiceHybridPaymentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HybridPayment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceHybridPaymentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PaymentServiceHybridPaymentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceHybridPaymentResult(%+v)", *p)
}

// Attributes:
//  - TradeNo
//  - SpName
//  - OuterNo
type PaymentServiceFinishPaymentArgs struct {
  TradeNo string `thrift:"tradeNo,1" db:"tradeNo" json:"tradeNo"`
  SpName string `thrift:"spName,2" db:"spName" json:"spName"`
  OuterNo string `thrift:"outerNo,3" db:"outerNo" json:"outerNo"`
}

func NewPaymentServiceFinishPaymentArgs() *PaymentServiceFinishPaymentArgs {
  return &PaymentServiceFinishPaymentArgs{}
}


func (p *PaymentServiceFinishPaymentArgs) GetTradeNo() string {
  return p.TradeNo
}

func (p *PaymentServiceFinishPaymentArgs) GetSpName() string {
  return p.SpName
}

func (p *PaymentServiceFinishPaymentArgs) GetOuterNo() string {
  return p.OuterNo
}
func (p *PaymentServiceFinishPaymentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceFinishPaymentArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TradeNo = v
}
  return nil
}

func (p *PaymentServiceFinishPaymentArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SpName = v
}
  return nil
}

func (p *PaymentServiceFinishPaymentArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OuterNo = v
}
  return nil
}

func (p *PaymentServiceFinishPaymentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FinishPayment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceFinishPaymentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradeNo", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tradeNo: ", p), err) }
  if err := oprot.WriteString(string(p.TradeNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradeNo (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tradeNo: ", p), err) }
  return err
}

func (p *PaymentServiceFinishPaymentArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("spName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:spName: ", p), err) }
  if err := oprot.WriteString(string(p.SpName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:spName: ", p), err) }
  return err
}

func (p *PaymentServiceFinishPaymentArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outerNo", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:outerNo: ", p), err) }
  if err := oprot.WriteString(string(p.OuterNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.outerNo (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:outerNo: ", p), err) }
  return err
}

func (p *PaymentServiceFinishPaymentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceFinishPaymentArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceFinishPaymentResult struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceFinishPaymentResult() *PaymentServiceFinishPaymentResult {
  return &PaymentServiceFinishPaymentResult{}
}

var PaymentServiceFinishPaymentResult_Success_DEFAULT *Result_
func (p *PaymentServiceFinishPaymentResult) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return PaymentServiceFinishPaymentResult_Success_DEFAULT
  }
return p.Success
}
func (p *PaymentServiceFinishPaymentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PaymentServiceFinishPaymentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceFinishPaymentResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PaymentServiceFinishPaymentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FinishPayment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceFinishPaymentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PaymentServiceFinishPaymentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceFinishPaymentResult(%+v)", *p)
}

// Attributes:
//  - Action
//  - UserId
//  - Data
type PaymentServiceGatewayV1Args struct {
  Action string `thrift:"action,1" db:"action" json:"action"`
  UserId int64 `thrift:"userId,2" db:"userId" json:"userId"`
  Data map[string]string `thrift:"data,3" db:"data" json:"data"`
}

func NewPaymentServiceGatewayV1Args() *PaymentServiceGatewayV1Args {
  return &PaymentServiceGatewayV1Args{}
}


func (p *PaymentServiceGatewayV1Args) GetAction() string {
  return p.Action
}

func (p *PaymentServiceGatewayV1Args) GetUserId() int64 {
  return p.UserId
}

func (p *PaymentServiceGatewayV1Args) GetData() map[string]string {
  return p.Data
}
func (p *PaymentServiceGatewayV1Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceGatewayV1Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Action = v
}
  return nil
}

func (p *PaymentServiceGatewayV1Args)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *PaymentServiceGatewayV1Args)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Data =  tMap
  for i := 0; i < size; i ++ {
var _key28 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key28 = v
}
var _val29 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val29 = v
}
    p.Data[_key28] = _val29
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PaymentServiceGatewayV1Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GatewayV1_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceGatewayV1Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("action", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:action: ", p), err) }
  if err := oprot.WriteString(string(p.Action)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.action (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:action: ", p), err) }
  return err
}

func (p *PaymentServiceGatewayV1Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *PaymentServiceGatewayV1Args) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Data {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  return err
}

func (p *PaymentServiceGatewayV1Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceGatewayV1Args(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceGatewayV1Result struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceGatewayV1Result() *PaymentServiceGatewayV1Result {
  return &PaymentServiceGatewayV1Result{}
}

var PaymentServiceGatewayV1Result_Success_DEFAULT *Result_
func (p *PaymentServiceGatewayV1Result) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return PaymentServiceGatewayV1Result_Success_DEFAULT
  }
return p.Success
}
func (p *PaymentServiceGatewayV1Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PaymentServiceGatewayV1Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceGatewayV1Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PaymentServiceGatewayV1Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GatewayV1_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceGatewayV1Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PaymentServiceGatewayV1Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceGatewayV1Result(%+v)", *p)
}

// Attributes:
//  - TradeNo
//  - MergePay
type PaymentServiceGetPaymentOrderInfoArgs struct {
  TradeNo string `thrift:"tradeNo,1" db:"tradeNo" json:"tradeNo"`
  MergePay bool `thrift:"mergePay,2" db:"mergePay" json:"mergePay"`
}

func NewPaymentServiceGetPaymentOrderInfoArgs() *PaymentServiceGetPaymentOrderInfoArgs {
  return &PaymentServiceGetPaymentOrderInfoArgs{}
}


func (p *PaymentServiceGetPaymentOrderInfoArgs) GetTradeNo() string {
  return p.TradeNo
}

func (p *PaymentServiceGetPaymentOrderInfoArgs) GetMergePay() bool {
  return p.MergePay
}
func (p *PaymentServiceGetPaymentOrderInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceGetPaymentOrderInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TradeNo = v
}
  return nil
}

func (p *PaymentServiceGetPaymentOrderInfoArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MergePay = v
}
  return nil
}

func (p *PaymentServiceGetPaymentOrderInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPaymentOrderInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceGetPaymentOrderInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradeNo", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tradeNo: ", p), err) }
  if err := oprot.WriteString(string(p.TradeNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradeNo (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tradeNo: ", p), err) }
  return err
}

func (p *PaymentServiceGetPaymentOrderInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mergePay", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mergePay: ", p), err) }
  if err := oprot.WriteBool(bool(p.MergePay)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mergePay (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mergePay: ", p), err) }
  return err
}

func (p *PaymentServiceGetPaymentOrderInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceGetPaymentOrderInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceGetPaymentOrderInfoResult struct {
  Success *SPrepareTradeData `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceGetPaymentOrderInfoResult() *PaymentServiceGetPaymentOrderInfoResult {
  return &PaymentServiceGetPaymentOrderInfoResult{}
}

var PaymentServiceGetPaymentOrderInfoResult_Success_DEFAULT *SPrepareTradeData
func (p *PaymentServiceGetPaymentOrderInfoResult) GetSuccess() *SPrepareTradeData {
  if !p.IsSetSuccess() {
    return PaymentServiceGetPaymentOrderInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *PaymentServiceGetPaymentOrderInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PaymentServiceGetPaymentOrderInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentServiceGetPaymentOrderInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SPrepareTradeData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PaymentServiceGetPaymentOrderInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPaymentOrderInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentServiceGetPaymentOrderInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PaymentServiceGetPaymentOrderInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentServiceGetPaymentOrderInfoResult(%+v)", *p)
}



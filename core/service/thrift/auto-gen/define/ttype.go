// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package define

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

//设置依据
type SettingBasis int64
const (
  SettingBasis_None SettingBasis = 1
  SettingBasis_Global SettingBasis = 2
  SettingBasis_Custom SettingBasis = 3
)

func (p SettingBasis) String() string {
  switch p {
  case SettingBasis_None: return "None"
  case SettingBasis_Global: return "Global"
  case SettingBasis_Custom: return "Custom"
  }
  return "<UNSET>"
}

func SettingBasisFromString(s string) (SettingBasis, error) {
  switch s {
  case "None": return SettingBasis_None, nil 
  case "Global": return SettingBasis_Global, nil 
  case "Custom": return SettingBasis_Custom, nil 
  }
  return SettingBasis(0), fmt.Errorf("not a valid SettingBasis string")
}


func SettingBasisPtr(v SettingBasis) *SettingBasis { return &v }

func (p SettingBasis) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SettingBasis) UnmarshalText(text []byte) error {
q, err := SettingBasisFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SettingBasis) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SettingBasis(v)
return nil
}

func (p * SettingBasis) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//价格计算方式
type PriceBasis int64
const (
  PriceBasis_Original PriceBasis = 1
  PriceBasis_Discount PriceBasis = 2
  PriceBasis_Custom PriceBasis = 3
)

func (p PriceBasis) String() string {
  switch p {
  case PriceBasis_Original: return "Original"
  case PriceBasis_Discount: return "Discount"
  case PriceBasis_Custom: return "Custom"
  }
  return "<UNSET>"
}

func PriceBasisFromString(s string) (PriceBasis, error) {
  switch s {
  case "Original": return PriceBasis_Original, nil 
  case "Discount": return PriceBasis_Discount, nil 
  case "Custom": return PriceBasis_Custom, nil 
  }
  return PriceBasis(0), fmt.Errorf("not a valid PriceBasis string")
}


func PriceBasisPtr(v PriceBasis) *PriceBasis { return &v }

func (p PriceBasis) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PriceBasis) UnmarshalText(text []byte) error {
q, err := PriceBasisFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PriceBasis) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PriceBasis(v)
return nil
}

func (p * PriceBasis) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//金额/提成依据
type AmountBasis int64
const (
  AmountBasis_NotSet AmountBasis = 1
  AmountBasis_Amount AmountBasis = 2
  AmountBasis_Percent AmountBasis = 3
)

func (p AmountBasis) String() string {
  switch p {
  case AmountBasis_NotSet: return "NotSet"
  case AmountBasis_Amount: return "Amount"
  case AmountBasis_Percent: return "Percent"
  }
  return "<UNSET>"
}

func AmountBasisFromString(s string) (AmountBasis, error) {
  switch s {
  case "NotSet": return AmountBasis_NotSet, nil 
  case "Amount": return AmountBasis_Amount, nil 
  case "Percent": return AmountBasis_Percent, nil 
  }
  return AmountBasis(0), fmt.Errorf("not a valid AmountBasis string")
}


func AmountBasisPtr(v AmountBasis) *AmountBasis { return &v }

func (p AmountBasis) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AmountBasis) UnmarshalText(text []byte) error {
q, err := AmountBasisFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AmountBasis) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AmountBasis(v)
return nil
}

func (p * AmountBasis) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - ErrCode
//  - ErrMsg
//  - Data1
//  - Data: 数据字典
type Result_ struct {
  ErrCode int32 `thrift:"ErrCode,1" db:"ErrCode" json:"ErrCode"`
  ErrMsg string `thrift:"ErrMsg,2" db:"ErrMsg" json:"ErrMsg"`
  Data1 string `thrift:"Data1,3" db:"Data1" json:"Data1"`
  Data map[string]string `thrift:"Data,4" db:"Data" json:"Data"`
}

func NewResult_() *Result_ {
  return &Result_{}
}


func (p *Result_) GetErrCode() int32 {
  return p.ErrCode
}

func (p *Result_) GetErrMsg() string {
  return p.ErrMsg
}

func (p *Result_) GetData1() string {
  return p.Data1
}

func (p *Result_) GetData() map[string]string {
  return p.Data
}
func (p *Result_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Result_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrCode = v
}
  return nil
}

func (p *Result_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrMsg = v
}
  return nil
}

func (p *Result_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data1 = v
}
  return nil
}

func (p *Result_)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Data =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.Data[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Result_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Result_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ErrCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ErrCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ErrCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ErrCode: ", p), err) }
  return err
}

func (p *Result_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ErrMsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ErrMsg: ", p), err) }
  if err := oprot.WriteString(string(p.ErrMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ErrMsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ErrMsg: ", p), err) }
  return err
}

func (p *Result_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Data1", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Data1: ", p), err) }
  if err := oprot.WriteString(string(p.Data1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Data1 (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Data1: ", p), err) }
  return err
}

func (p *Result_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Data", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Data: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Data {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Data: ", p), err) }
  return err
}

func (p *Result_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Result_(%+v)", *p)
}

// Attributes:
//  - ID
//  - Result_
//  - Code
//  - ErrMsg
type Result64 struct {
  ID int64 `thrift:"ID,1" db:"ID" json:"ID"`
  Result_ bool `thrift:"Result,2" db:"Result" json:"Result"`
  Code string `thrift:"Code,3" db:"Code" json:"Code"`
  ErrMsg string `thrift:"ErrMsg,4" db:"ErrMsg" json:"ErrMsg"`
}

func NewResult64() *Result64 {
  return &Result64{}
}


func (p *Result64) GetID() int64 {
  return p.ID
}

func (p *Result64) GetResult_() bool {
  return p.Result_
}

func (p *Result64) GetCode() string {
  return p.Code
}

func (p *Result64) GetErrMsg() string {
  return p.ErrMsg
}
func (p *Result64) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Result64)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Result64)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *Result64)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *Result64)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ErrMsg = v
}
  return nil
}

func (p *Result64) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Result64"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Result64) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err) }
  return err
}

func (p *Result64) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Result", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Result: ", p), err) }
  if err := oprot.WriteBool(bool(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Result (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Result: ", p), err) }
  return err
}

func (p *Result64) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Code", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Code (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Code: ", p), err) }
  return err
}

func (p *Result64) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ErrMsg", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ErrMsg: ", p), err) }
  if err := oprot.WriteString(string(p.ErrMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ErrMsg (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ErrMsg: ", p), err) }
  return err
}

func (p *Result64) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Result64(%+v)", *p)
}

// Attributes:
//  - Data
//  - Result_
//  - Code
//  - ErrMsg
type DResult_ struct {
  Data float64 `thrift:"Data,1" db:"Data" json:"Data"`
  Result_ bool `thrift:"Result,2" db:"Result" json:"Result"`
  Code string `thrift:"Code,3" db:"Code" json:"Code"`
  ErrMsg string `thrift:"ErrMsg,4" db:"ErrMsg" json:"ErrMsg"`
}

func NewDResult_() *DResult_ {
  return &DResult_{}
}


func (p *DResult_) GetData() float64 {
  return p.Data
}

func (p *DResult_) GetResult_() bool {
  return p.Result_
}

func (p *DResult_) GetCode() string {
  return p.Code
}

func (p *DResult_) GetErrMsg() string {
  return p.ErrMsg
}
func (p *DResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *DResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *DResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *DResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ErrMsg = v
}
  return nil
}

func (p *DResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Data", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Data: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Data (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Data: ", p), err) }
  return err
}

func (p *DResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Result", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Result: ", p), err) }
  if err := oprot.WriteBool(bool(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Result (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Result: ", p), err) }
  return err
}

func (p *DResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Code", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Code (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Code: ", p), err) }
  return err
}

func (p *DResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ErrMsg", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ErrMsg: ", p), err) }
  if err := oprot.WriteString(string(p.ErrMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ErrMsg (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ErrMsg: ", p), err) }
  return err
}

func (p *DResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DResult_(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type Pair struct {
  Key string `thrift:"Key,1" db:"Key" json:"Key"`
  Value string `thrift:"Value,2" db:"Value" json:"Value"`
}

func NewPair() *Pair {
  return &Pair{}
}


func (p *Pair) GetKey() string {
  return p.Key
}

func (p *Pair) GetValue() string {
  return p.Value
}
func (p *Pair) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pair)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *Pair)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *Pair) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Pair"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pair) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Key: ", p), err) }
  return err
}

func (p *Pair) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Value: ", p), err) }
  return err
}

func (p *Pair) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pair(%+v)", *p)
}

// Attributes:
//  - ID
//  - ParentId
//  - ProModel
//  - Priority
//  - Name
//  - VirtualCat
//  - CatUrl
//  - Icon
//  - IconXY
//  - SortNum
//  - FloorShow
//  - Enabled
//  - Level
//  - CreateTime
//  - Children
type Category struct {
  ID int32 `thrift:"ID,1" db:"ID" json:"ID"`
  ParentId int32 `thrift:"ParentId,2" db:"ParentId" json:"ParentId"`
  ProModel int32 `thrift:"ProModel,3" db:"ProModel" json:"ProModel"`
  Priority int32 `thrift:"Priority,4" db:"Priority" json:"Priority"`
  Name string `thrift:"Name,5" db:"Name" json:"Name"`
  VirtualCat int32 `thrift:"VirtualCat,6" db:"VirtualCat" json:"VirtualCat"`
  CatUrl string `thrift:"CatUrl,7" db:"CatUrl" json:"CatUrl"`
  Icon string `thrift:"Icon,8" db:"Icon" json:"Icon"`
  IconXY string `thrift:"IconXY,9" db:"IconXY" json:"IconXY"`
  SortNum int32 `thrift:"SortNum,10" db:"SortNum" json:"SortNum"`
  FloorShow int32 `thrift:"FloorShow,11" db:"FloorShow" json:"FloorShow"`
  Enabled int32 `thrift:"Enabled,12" db:"Enabled" json:"Enabled"`
  Level int32 `thrift:"Level,13" db:"Level" json:"Level"`
  CreateTime int64 `thrift:"CreateTime,14" db:"CreateTime" json:"CreateTime"`
  Children []*Category `thrift:"Children,15" db:"Children" json:"Children"`
}

func NewCategory() *Category {
  return &Category{}
}


func (p *Category) GetID() int32 {
  return p.ID
}

func (p *Category) GetParentId() int32 {
  return p.ParentId
}

func (p *Category) GetProModel() int32 {
  return p.ProModel
}

func (p *Category) GetPriority() int32 {
  return p.Priority
}

func (p *Category) GetName() string {
  return p.Name
}

func (p *Category) GetVirtualCat() int32 {
  return p.VirtualCat
}

func (p *Category) GetCatUrl() string {
  return p.CatUrl
}

func (p *Category) GetIcon() string {
  return p.Icon
}

func (p *Category) GetIconXY() string {
  return p.IconXY
}

func (p *Category) GetSortNum() int32 {
  return p.SortNum
}

func (p *Category) GetFloorShow() int32 {
  return p.FloorShow
}

func (p *Category) GetEnabled() int32 {
  return p.Enabled
}

func (p *Category) GetLevel() int32 {
  return p.Level
}

func (p *Category) GetCreateTime() int64 {
  return p.CreateTime
}

func (p *Category) GetChildren() []*Category {
  return p.Children
}
func (p *Category) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Category)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Category)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ParentId = v
}
  return nil
}

func (p *Category)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ProModel = v
}
  return nil
}

func (p *Category)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Priority = v
}
  return nil
}

func (p *Category)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Category)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.VirtualCat = v
}
  return nil
}

func (p *Category)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CatUrl = v
}
  return nil
}

func (p *Category)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Icon = v
}
  return nil
}

func (p *Category)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.IconXY = v
}
  return nil
}

func (p *Category)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.SortNum = v
}
  return nil
}

func (p *Category)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.FloorShow = v
}
  return nil
}

func (p *Category)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Enabled = v
}
  return nil
}

func (p *Category)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Level = v
}
  return nil
}

func (p *Category)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *Category)  ReadField15(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Category, 0, size)
  p.Children =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &Category{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Children = append(p.Children, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Category) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Category"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Category) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err) }
  return err
}

func (p *Category) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ParentId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ParentId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ParentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ParentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ParentId: ", p), err) }
  return err
}

func (p *Category) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ProModel", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ProModel: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProModel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ProModel (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ProModel: ", p), err) }
  return err
}

func (p *Category) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Priority", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Priority: ", p), err) }
  if err := oprot.WriteI32(int32(p.Priority)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Priority (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Priority: ", p), err) }
  return err
}

func (p *Category) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Name: ", p), err) }
  return err
}

func (p *Category) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("VirtualCat", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:VirtualCat: ", p), err) }
  if err := oprot.WriteI32(int32(p.VirtualCat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.VirtualCat (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:VirtualCat: ", p), err) }
  return err
}

func (p *Category) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CatUrl", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:CatUrl: ", p), err) }
  if err := oprot.WriteString(string(p.CatUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CatUrl (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:CatUrl: ", p), err) }
  return err
}

func (p *Category) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Icon", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Icon: ", p), err) }
  if err := oprot.WriteString(string(p.Icon)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Icon (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Icon: ", p), err) }
  return err
}

func (p *Category) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("IconXY", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:IconXY: ", p), err) }
  if err := oprot.WriteString(string(p.IconXY)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.IconXY (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:IconXY: ", p), err) }
  return err
}

func (p *Category) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SortNum", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:SortNum: ", p), err) }
  if err := oprot.WriteI32(int32(p.SortNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SortNum (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:SortNum: ", p), err) }
  return err
}

func (p *Category) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("FloorShow", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:FloorShow: ", p), err) }
  if err := oprot.WriteI32(int32(p.FloorShow)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.FloorShow (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:FloorShow: ", p), err) }
  return err
}

func (p *Category) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Enabled", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:Enabled: ", p), err) }
  if err := oprot.WriteI32(int32(p.Enabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Enabled (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:Enabled: ", p), err) }
  return err
}

func (p *Category) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Level", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:Level: ", p), err) }
  if err := oprot.WriteI32(int32(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Level (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:Level: ", p), err) }
  return err
}

func (p *Category) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:CreateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CreateTime (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:CreateTime: ", p), err) }
  return err
}

func (p *Category) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Children", thrift.LIST, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:Children: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Children)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Children {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:Children: ", p), err) }
  return err
}

func (p *Category) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Category(%+v)", *p)
}

// Attributes:
//  - SkuId
//  - ItemId
//  - ProductId
//  - Title
//  - Image
//  - SpecData
//  - SpecWord
//  - Code
//  - RetailPrice
//  - Price
//  - Cost
//  - Weight
//  - Bulk
//  - Stock
//  - SaleNum
type Sku struct {
  SkuId int64 `thrift:"SkuId,1" db:"SkuId" json:"SkuId"`
  ItemId int64 `thrift:"ItemId,2" db:"ItemId" json:"ItemId"`
  ProductId int64 `thrift:"ProductId,3" db:"ProductId" json:"ProductId"`
  Title string `thrift:"Title,4" db:"Title" json:"Title"`
  Image string `thrift:"Image,5" db:"Image" json:"Image"`
  SpecData string `thrift:"SpecData,6" db:"SpecData" json:"SpecData"`
  SpecWord string `thrift:"SpecWord,7" db:"SpecWord" json:"SpecWord"`
  Code string `thrift:"Code,8" db:"Code" json:"Code"`
  RetailPrice float64 `thrift:"RetailPrice,9" db:"RetailPrice" json:"RetailPrice"`
  Price float64 `thrift:"Price,10" db:"Price" json:"Price"`
  Cost float64 `thrift:"Cost,11" db:"Cost" json:"Cost"`
  Weight int32 `thrift:"Weight,12" db:"Weight" json:"Weight"`
  Bulk int32 `thrift:"Bulk,13" db:"Bulk" json:"Bulk"`
  Stock int32 `thrift:"Stock,14" db:"Stock" json:"Stock"`
  SaleNum int32 `thrift:"SaleNum,15" db:"SaleNum" json:"SaleNum"`
}

func NewSku() *Sku {
  return &Sku{}
}


func (p *Sku) GetSkuId() int64 {
  return p.SkuId
}

func (p *Sku) GetItemId() int64 {
  return p.ItemId
}

func (p *Sku) GetProductId() int64 {
  return p.ProductId
}

func (p *Sku) GetTitle() string {
  return p.Title
}

func (p *Sku) GetImage() string {
  return p.Image
}

func (p *Sku) GetSpecData() string {
  return p.SpecData
}

func (p *Sku) GetSpecWord() string {
  return p.SpecWord
}

func (p *Sku) GetCode() string {
  return p.Code
}

func (p *Sku) GetRetailPrice() float64 {
  return p.RetailPrice
}

func (p *Sku) GetPrice() float64 {
  return p.Price
}

func (p *Sku) GetCost() float64 {
  return p.Cost
}

func (p *Sku) GetWeight() int32 {
  return p.Weight
}

func (p *Sku) GetBulk() int32 {
  return p.Bulk
}

func (p *Sku) GetStock() int32 {
  return p.Stock
}

func (p *Sku) GetSaleNum() int32 {
  return p.SaleNum
}
func (p *Sku) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Sku)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SkuId = v
}
  return nil
}

func (p *Sku)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ItemId = v
}
  return nil
}

func (p *Sku)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ProductId = v
}
  return nil
}

func (p *Sku)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *Sku)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Image = v
}
  return nil
}

func (p *Sku)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.SpecData = v
}
  return nil
}

func (p *Sku)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SpecWord = v
}
  return nil
}

func (p *Sku)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *Sku)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.RetailPrice = v
}
  return nil
}

func (p *Sku)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Price = v
}
  return nil
}

func (p *Sku)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Cost = v
}
  return nil
}

func (p *Sku)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Weight = v
}
  return nil
}

func (p *Sku)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Bulk = v
}
  return nil
}

func (p *Sku)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Stock = v
}
  return nil
}

func (p *Sku)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.SaleNum = v
}
  return nil
}

func (p *Sku) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Sku"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Sku) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SkuId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:SkuId: ", p), err) }
  if err := oprot.WriteI64(int64(p.SkuId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SkuId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:SkuId: ", p), err) }
  return err
}

func (p *Sku) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ItemId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ItemId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ItemId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ItemId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ItemId: ", p), err) }
  return err
}

func (p *Sku) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ProductId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ProductId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ProductId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ProductId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ProductId: ", p), err) }
  return err
}

func (p *Sku) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Title", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Title (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Title: ", p), err) }
  return err
}

func (p *Sku) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Image", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Image: ", p), err) }
  if err := oprot.WriteString(string(p.Image)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Image (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Image: ", p), err) }
  return err
}

func (p *Sku) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SpecData", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:SpecData: ", p), err) }
  if err := oprot.WriteString(string(p.SpecData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SpecData (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:SpecData: ", p), err) }
  return err
}

func (p *Sku) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SpecWord", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:SpecWord: ", p), err) }
  if err := oprot.WriteString(string(p.SpecWord)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SpecWord (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:SpecWord: ", p), err) }
  return err
}

func (p *Sku) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Code", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Code (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Code: ", p), err) }
  return err
}

func (p *Sku) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("RetailPrice", thrift.DOUBLE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:RetailPrice: ", p), err) }
  if err := oprot.WriteDouble(float64(p.RetailPrice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.RetailPrice (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:RetailPrice: ", p), err) }
  return err
}

func (p *Sku) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Price", thrift.DOUBLE, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Price: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Price)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Price (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Price: ", p), err) }
  return err
}

func (p *Sku) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Cost", thrift.DOUBLE, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:Cost: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Cost)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Cost (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:Cost: ", p), err) }
  return err
}

func (p *Sku) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Weight", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:Weight: ", p), err) }
  if err := oprot.WriteI32(int32(p.Weight)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Weight (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:Weight: ", p), err) }
  return err
}

func (p *Sku) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Bulk", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:Bulk: ", p), err) }
  if err := oprot.WriteI32(int32(p.Bulk)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Bulk (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:Bulk: ", p), err) }
  return err
}

func (p *Sku) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Stock", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:Stock: ", p), err) }
  if err := oprot.WriteI32(int32(p.Stock)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Stock (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:Stock: ", p), err) }
  return err
}

func (p *Sku) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SaleNum", thrift.I32, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:SaleNum: ", p), err) }
  if err := oprot.WriteI32(int32(p.SaleNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SaleNum (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:SaleNum: ", p), err) }
  return err
}

func (p *Sku) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Sku(%+v)", *p)
}

// Attributes:
//  - ItemId
//  - ProductId
//  - PromFlag
//  - CatId
//  - VendorId
//  - BrandId
//  - ShopId
//  - ShopCatId
//  - ExpressTid
//  - Title
//  - ShortTitle
//  - Code
//  - Image
//  - IsPresent
//  - PriceRange
//  - StockNum
//  - SaleNum
//  - SkuNum
//  - SkuId
//  - Cost
//  - Price
//  - RetailPrice
//  - Weight
//  - Bulk
//  - ShelveState
//  - ReviewState
//  - ReviewRemark
//  - SortNum
//  - CreateTime
//  - UpdateTime
//  - PromPrice
//  - SkuArray
//  - Data
type OldItem struct {
  ItemId int64 `thrift:"ItemId,1" db:"ItemId" json:"ItemId"`
  ProductId int64 `thrift:"ProductId,2" db:"ProductId" json:"ProductId"`
  PromFlag int32 `thrift:"PromFlag,3" db:"PromFlag" json:"PromFlag"`
  CatId int32 `thrift:"CatId,4" db:"CatId" json:"CatId"`
  VendorId int32 `thrift:"VendorId,5" db:"VendorId" json:"VendorId"`
  BrandId int32 `thrift:"BrandId,6" db:"BrandId" json:"BrandId"`
  ShopId int32 `thrift:"ShopId,7" db:"ShopId" json:"ShopId"`
  ShopCatId int32 `thrift:"ShopCatId,8" db:"ShopCatId" json:"ShopCatId"`
  ExpressTid int32 `thrift:"ExpressTid,9" db:"ExpressTid" json:"ExpressTid"`
  Title string `thrift:"Title,10" db:"Title" json:"Title"`
  ShortTitle string `thrift:"ShortTitle,11" db:"ShortTitle" json:"ShortTitle"`
  Code string `thrift:"Code,12" db:"Code" json:"Code"`
  Image string `thrift:"Image,13" db:"Image" json:"Image"`
  IsPresent int32 `thrift:"IsPresent,14" db:"IsPresent" json:"IsPresent"`
  PriceRange string `thrift:"PriceRange,15" db:"PriceRange" json:"PriceRange"`
  StockNum int32 `thrift:"StockNum,16" db:"StockNum" json:"StockNum"`
  SaleNum int32 `thrift:"SaleNum,17" db:"SaleNum" json:"SaleNum"`
  SkuNum int32 `thrift:"SkuNum,18" db:"SkuNum" json:"SkuNum"`
  SkuId int64 `thrift:"SkuId,19" db:"SkuId" json:"SkuId"`
  Cost float64 `thrift:"Cost,20" db:"Cost" json:"Cost"`
  Price float64 `thrift:"Price,21" db:"Price" json:"Price"`
  RetailPrice float64 `thrift:"RetailPrice,22" db:"RetailPrice" json:"RetailPrice"`
  Weight int32 `thrift:"Weight,23" db:"Weight" json:"Weight"`
  Bulk int32 `thrift:"Bulk,24" db:"Bulk" json:"Bulk"`
  ShelveState int32 `thrift:"ShelveState,25" db:"ShelveState" json:"ShelveState"`
  ReviewState int32 `thrift:"ReviewState,26" db:"ReviewState" json:"ReviewState"`
  ReviewRemark string `thrift:"ReviewRemark,27" db:"ReviewRemark" json:"ReviewRemark"`
  SortNum int32 `thrift:"SortNum,28" db:"SortNum" json:"SortNum"`
  CreateTime int64 `thrift:"CreateTime,29" db:"CreateTime" json:"CreateTime"`
  UpdateTime int64 `thrift:"UpdateTime,30" db:"UpdateTime" json:"UpdateTime"`
  PromPrice float64 `thrift:"PromPrice,31" db:"PromPrice" json:"PromPrice"`
  SkuArray []*Sku `thrift:"SkuArray,32" db:"SkuArray" json:"SkuArray"`
  Data map[string]string `thrift:"Data,33" db:"Data" json:"Data"`
}

func NewOldItem() *OldItem {
  return &OldItem{}
}


func (p *OldItem) GetItemId() int64 {
  return p.ItemId
}

func (p *OldItem) GetProductId() int64 {
  return p.ProductId
}

func (p *OldItem) GetPromFlag() int32 {
  return p.PromFlag
}

func (p *OldItem) GetCatId() int32 {
  return p.CatId
}

func (p *OldItem) GetVendorId() int32 {
  return p.VendorId
}

func (p *OldItem) GetBrandId() int32 {
  return p.BrandId
}

func (p *OldItem) GetShopId() int32 {
  return p.ShopId
}

func (p *OldItem) GetShopCatId() int32 {
  return p.ShopCatId
}

func (p *OldItem) GetExpressTid() int32 {
  return p.ExpressTid
}

func (p *OldItem) GetTitle() string {
  return p.Title
}

func (p *OldItem) GetShortTitle() string {
  return p.ShortTitle
}

func (p *OldItem) GetCode() string {
  return p.Code
}

func (p *OldItem) GetImage() string {
  return p.Image
}

func (p *OldItem) GetIsPresent() int32 {
  return p.IsPresent
}

func (p *OldItem) GetPriceRange() string {
  return p.PriceRange
}

func (p *OldItem) GetStockNum() int32 {
  return p.StockNum
}

func (p *OldItem) GetSaleNum() int32 {
  return p.SaleNum
}

func (p *OldItem) GetSkuNum() int32 {
  return p.SkuNum
}

func (p *OldItem) GetSkuId() int64 {
  return p.SkuId
}

func (p *OldItem) GetCost() float64 {
  return p.Cost
}

func (p *OldItem) GetPrice() float64 {
  return p.Price
}

func (p *OldItem) GetRetailPrice() float64 {
  return p.RetailPrice
}

func (p *OldItem) GetWeight() int32 {
  return p.Weight
}

func (p *OldItem) GetBulk() int32 {
  return p.Bulk
}

func (p *OldItem) GetShelveState() int32 {
  return p.ShelveState
}

func (p *OldItem) GetReviewState() int32 {
  return p.ReviewState
}

func (p *OldItem) GetReviewRemark() string {
  return p.ReviewRemark
}

func (p *OldItem) GetSortNum() int32 {
  return p.SortNum
}

func (p *OldItem) GetCreateTime() int64 {
  return p.CreateTime
}

func (p *OldItem) GetUpdateTime() int64 {
  return p.UpdateTime
}

func (p *OldItem) GetPromPrice() float64 {
  return p.PromPrice
}

func (p *OldItem) GetSkuArray() []*Sku {
  return p.SkuArray
}

func (p *OldItem) GetData() map[string]string {
  return p.Data
}
func (p *OldItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField27(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField28(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField29(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField30(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField31(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField32(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField33(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OldItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ItemId = v
}
  return nil
}

func (p *OldItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProductId = v
}
  return nil
}

func (p *OldItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PromFlag = v
}
  return nil
}

func (p *OldItem)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CatId = v
}
  return nil
}

func (p *OldItem)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.VendorId = v
}
  return nil
}

func (p *OldItem)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.BrandId = v
}
  return nil
}

func (p *OldItem)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ShopId = v
}
  return nil
}

func (p *OldItem)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ShopCatId = v
}
  return nil
}

func (p *OldItem)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ExpressTid = v
}
  return nil
}

func (p *OldItem)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *OldItem)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ShortTitle = v
}
  return nil
}

func (p *OldItem)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *OldItem)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Image = v
}
  return nil
}

func (p *OldItem)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.IsPresent = v
}
  return nil
}

func (p *OldItem)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.PriceRange = v
}
  return nil
}

func (p *OldItem)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.StockNum = v
}
  return nil
}

func (p *OldItem)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.SaleNum = v
}
  return nil
}

func (p *OldItem)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.SkuNum = v
}
  return nil
}

func (p *OldItem)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.SkuId = v
}
  return nil
}

func (p *OldItem)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Cost = v
}
  return nil
}

func (p *OldItem)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.Price = v
}
  return nil
}

func (p *OldItem)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.RetailPrice = v
}
  return nil
}

func (p *OldItem)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.Weight = v
}
  return nil
}

func (p *OldItem)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.Bulk = v
}
  return nil
}

func (p *OldItem)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.ShelveState = v
}
  return nil
}

func (p *OldItem)  ReadField26(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.ReviewState = v
}
  return nil
}

func (p *OldItem)  ReadField27(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.ReviewRemark = v
}
  return nil
}

func (p *OldItem)  ReadField28(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.SortNum = v
}
  return nil
}

func (p *OldItem)  ReadField29(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *OldItem)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.UpdateTime = v
}
  return nil
}

func (p *OldItem)  ReadField31(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.PromPrice = v
}
  return nil
}

func (p *OldItem)  ReadField32(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Sku, 0, size)
  p.SkuArray =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &Sku{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.SkuArray = append(p.SkuArray, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OldItem)  ReadField33(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Data =  tMap
  for i := 0; i < size; i ++ {
var _key4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key4 = v
}
var _val5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val5 = v
}
    p.Data[_key4] = _val5
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *OldItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OldItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
    if err := p.writeField28(oprot); err != nil { return err }
    if err := p.writeField29(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
    if err := p.writeField32(oprot); err != nil { return err }
    if err := p.writeField33(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OldItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ItemId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ItemId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ItemId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ItemId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ItemId: ", p), err) }
  return err
}

func (p *OldItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ProductId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ProductId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ProductId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ProductId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ProductId: ", p), err) }
  return err
}

func (p *OldItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PromFlag", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:PromFlag: ", p), err) }
  if err := oprot.WriteI32(int32(p.PromFlag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PromFlag (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:PromFlag: ", p), err) }
  return err
}

func (p *OldItem) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CatId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:CatId: ", p), err) }
  if err := oprot.WriteI32(int32(p.CatId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CatId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:CatId: ", p), err) }
  return err
}

func (p *OldItem) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("VendorId", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:VendorId: ", p), err) }
  if err := oprot.WriteI32(int32(p.VendorId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.VendorId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:VendorId: ", p), err) }
  return err
}

func (p *OldItem) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BrandId", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:BrandId: ", p), err) }
  if err := oprot.WriteI32(int32(p.BrandId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BrandId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:BrandId: ", p), err) }
  return err
}

func (p *OldItem) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ShopId", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ShopId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ShopId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ShopId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ShopId: ", p), err) }
  return err
}

func (p *OldItem) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ShopCatId", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:ShopCatId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ShopCatId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ShopCatId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:ShopCatId: ", p), err) }
  return err
}

func (p *OldItem) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ExpressTid", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ExpressTid: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExpressTid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ExpressTid (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ExpressTid: ", p), err) }
  return err
}

func (p *OldItem) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Title", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Title (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Title: ", p), err) }
  return err
}

func (p *OldItem) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ShortTitle", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:ShortTitle: ", p), err) }
  if err := oprot.WriteString(string(p.ShortTitle)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ShortTitle (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:ShortTitle: ", p), err) }
  return err
}

func (p *OldItem) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Code", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:Code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Code (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:Code: ", p), err) }
  return err
}

func (p *OldItem) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Image", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:Image: ", p), err) }
  if err := oprot.WriteString(string(p.Image)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Image (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:Image: ", p), err) }
  return err
}

func (p *OldItem) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("IsPresent", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:IsPresent: ", p), err) }
  if err := oprot.WriteI32(int32(p.IsPresent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.IsPresent (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:IsPresent: ", p), err) }
  return err
}

func (p *OldItem) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PriceRange", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:PriceRange: ", p), err) }
  if err := oprot.WriteString(string(p.PriceRange)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PriceRange (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:PriceRange: ", p), err) }
  return err
}

func (p *OldItem) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("StockNum", thrift.I32, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:StockNum: ", p), err) }
  if err := oprot.WriteI32(int32(p.StockNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.StockNum (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:StockNum: ", p), err) }
  return err
}

func (p *OldItem) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SaleNum", thrift.I32, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:SaleNum: ", p), err) }
  if err := oprot.WriteI32(int32(p.SaleNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SaleNum (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:SaleNum: ", p), err) }
  return err
}

func (p *OldItem) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SkuNum", thrift.I32, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:SkuNum: ", p), err) }
  if err := oprot.WriteI32(int32(p.SkuNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SkuNum (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:SkuNum: ", p), err) }
  return err
}

func (p *OldItem) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SkuId", thrift.I64, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:SkuId: ", p), err) }
  if err := oprot.WriteI64(int64(p.SkuId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SkuId (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:SkuId: ", p), err) }
  return err
}

func (p *OldItem) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Cost", thrift.DOUBLE, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:Cost: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Cost)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Cost (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:Cost: ", p), err) }
  return err
}

func (p *OldItem) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Price", thrift.DOUBLE, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:Price: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Price)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Price (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:Price: ", p), err) }
  return err
}

func (p *OldItem) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("RetailPrice", thrift.DOUBLE, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:RetailPrice: ", p), err) }
  if err := oprot.WriteDouble(float64(p.RetailPrice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.RetailPrice (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:RetailPrice: ", p), err) }
  return err
}

func (p *OldItem) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Weight", thrift.I32, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:Weight: ", p), err) }
  if err := oprot.WriteI32(int32(p.Weight)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Weight (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:Weight: ", p), err) }
  return err
}

func (p *OldItem) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Bulk", thrift.I32, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:Bulk: ", p), err) }
  if err := oprot.WriteI32(int32(p.Bulk)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Bulk (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:Bulk: ", p), err) }
  return err
}

func (p *OldItem) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ShelveState", thrift.I32, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:ShelveState: ", p), err) }
  if err := oprot.WriteI32(int32(p.ShelveState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ShelveState (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:ShelveState: ", p), err) }
  return err
}

func (p *OldItem) writeField26(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ReviewState", thrift.I32, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:ReviewState: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReviewState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ReviewState (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:ReviewState: ", p), err) }
  return err
}

func (p *OldItem) writeField27(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ReviewRemark", thrift.STRING, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:ReviewRemark: ", p), err) }
  if err := oprot.WriteString(string(p.ReviewRemark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ReviewRemark (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:ReviewRemark: ", p), err) }
  return err
}

func (p *OldItem) writeField28(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SortNum", thrift.I32, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:SortNum: ", p), err) }
  if err := oprot.WriteI32(int32(p.SortNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SortNum (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:SortNum: ", p), err) }
  return err
}

func (p *OldItem) writeField29(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:CreateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CreateTime (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:CreateTime: ", p), err) }
  return err
}

func (p *OldItem) writeField30(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:UpdateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:UpdateTime: ", p), err) }
  return err
}

func (p *OldItem) writeField31(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PromPrice", thrift.DOUBLE, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:PromPrice: ", p), err) }
  if err := oprot.WriteDouble(float64(p.PromPrice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PromPrice (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:PromPrice: ", p), err) }
  return err
}

func (p *OldItem) writeField32(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SkuArray", thrift.LIST, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:SkuArray: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SkuArray)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SkuArray {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:SkuArray: ", p), err) }
  return err
}

func (p *OldItem) writeField33(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Data", thrift.MAP, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:Data: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Data {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:Data: ", p), err) }
  return err
}

func (p *OldItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OldItem(%+v)", *p)
}

// Attributes:
//  - ItemId
//  - ProductId
//  - CatId
//  - VendorId
//  - BrandId
//  - Title
//  - Code
//  - Image
//  - Price
//  - PriceRange
//  - StockNum
//  - ShelveState
//  - ReviewState
//  - UpdateTime
//  - SkuArray
//  - Data
type UnifiedItem struct {
  ItemId int64 `thrift:"ItemId,1" db:"ItemId" json:"ItemId"`
  ProductId int32 `thrift:"ProductId,2" db:"ProductId" json:"ProductId"`
  CatId int32 `thrift:"CatId,3" db:"CatId" json:"CatId"`
  VendorId int32 `thrift:"VendorId,4" db:"VendorId" json:"VendorId"`
  BrandId int32 `thrift:"BrandId,5" db:"BrandId" json:"BrandId"`
  Title string `thrift:"Title,6" db:"Title" json:"Title"`
  Code string `thrift:"Code,7" db:"Code" json:"Code"`
  Image string `thrift:"Image,8" db:"Image" json:"Image"`
  Price float64 `thrift:"Price,9" db:"Price" json:"Price"`
  PriceRange string `thrift:"PriceRange,10" db:"PriceRange" json:"PriceRange"`
  StockNum int32 `thrift:"StockNum,11" db:"StockNum" json:"StockNum"`
  ShelveState int32 `thrift:"ShelveState,12" db:"ShelveState" json:"ShelveState"`
  ReviewState int32 `thrift:"ReviewState,13" db:"ReviewState" json:"ReviewState"`
  UpdateTime int64 `thrift:"UpdateTime,14" db:"UpdateTime" json:"UpdateTime"`
  SkuArray []*Sku `thrift:"SkuArray,15" db:"SkuArray" json:"SkuArray"`
  Data map[string]string `thrift:"Data,16" db:"Data" json:"Data"`
}

func NewUnifiedItem() *UnifiedItem {
  return &UnifiedItem{}
}


func (p *UnifiedItem) GetItemId() int64 {
  return p.ItemId
}

func (p *UnifiedItem) GetProductId() int32 {
  return p.ProductId
}

func (p *UnifiedItem) GetCatId() int32 {
  return p.CatId
}

func (p *UnifiedItem) GetVendorId() int32 {
  return p.VendorId
}

func (p *UnifiedItem) GetBrandId() int32 {
  return p.BrandId
}

func (p *UnifiedItem) GetTitle() string {
  return p.Title
}

func (p *UnifiedItem) GetCode() string {
  return p.Code
}

func (p *UnifiedItem) GetImage() string {
  return p.Image
}

func (p *UnifiedItem) GetPrice() float64 {
  return p.Price
}

func (p *UnifiedItem) GetPriceRange() string {
  return p.PriceRange
}

func (p *UnifiedItem) GetStockNum() int32 {
  return p.StockNum
}

func (p *UnifiedItem) GetShelveState() int32 {
  return p.ShelveState
}

func (p *UnifiedItem) GetReviewState() int32 {
  return p.ReviewState
}

func (p *UnifiedItem) GetUpdateTime() int64 {
  return p.UpdateTime
}

func (p *UnifiedItem) GetSkuArray() []*Sku {
  return p.SkuArray
}

func (p *UnifiedItem) GetData() map[string]string {
  return p.Data
}
func (p *UnifiedItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnifiedItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ItemId = v
}
  return nil
}

func (p *UnifiedItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProductId = v
}
  return nil
}

func (p *UnifiedItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CatId = v
}
  return nil
}

func (p *UnifiedItem)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VendorId = v
}
  return nil
}

func (p *UnifiedItem)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BrandId = v
}
  return nil
}

func (p *UnifiedItem)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *UnifiedItem)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *UnifiedItem)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Image = v
}
  return nil
}

func (p *UnifiedItem)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Price = v
}
  return nil
}

func (p *UnifiedItem)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.PriceRange = v
}
  return nil
}

func (p *UnifiedItem)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.StockNum = v
}
  return nil
}

func (p *UnifiedItem)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ShelveState = v
}
  return nil
}

func (p *UnifiedItem)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.ReviewState = v
}
  return nil
}

func (p *UnifiedItem)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.UpdateTime = v
}
  return nil
}

func (p *UnifiedItem)  ReadField15(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Sku, 0, size)
  p.SkuArray =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &Sku{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.SkuArray = append(p.SkuArray, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UnifiedItem)  ReadField16(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Data =  tMap
  for i := 0; i < size; i ++ {
var _key7 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key7 = v
}
var _val8 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val8 = v
}
    p.Data[_key7] = _val8
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UnifiedItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UnifiedItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnifiedItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ItemId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ItemId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ItemId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ItemId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ItemId: ", p), err) }
  return err
}

func (p *UnifiedItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ProductId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ProductId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProductId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ProductId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ProductId: ", p), err) }
  return err
}

func (p *UnifiedItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CatId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:CatId: ", p), err) }
  if err := oprot.WriteI32(int32(p.CatId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CatId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:CatId: ", p), err) }
  return err
}

func (p *UnifiedItem) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("VendorId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:VendorId: ", p), err) }
  if err := oprot.WriteI32(int32(p.VendorId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.VendorId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:VendorId: ", p), err) }
  return err
}

func (p *UnifiedItem) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BrandId", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:BrandId: ", p), err) }
  if err := oprot.WriteI32(int32(p.BrandId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BrandId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:BrandId: ", p), err) }
  return err
}

func (p *UnifiedItem) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Title", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Title (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Title: ", p), err) }
  return err
}

func (p *UnifiedItem) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Code", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Code (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Code: ", p), err) }
  return err
}

func (p *UnifiedItem) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Image", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Image: ", p), err) }
  if err := oprot.WriteString(string(p.Image)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Image (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Image: ", p), err) }
  return err
}

func (p *UnifiedItem) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Price", thrift.DOUBLE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:Price: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Price)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Price (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:Price: ", p), err) }
  return err
}

func (p *UnifiedItem) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PriceRange", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:PriceRange: ", p), err) }
  if err := oprot.WriteString(string(p.PriceRange)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PriceRange (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:PriceRange: ", p), err) }
  return err
}

func (p *UnifiedItem) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("StockNum", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:StockNum: ", p), err) }
  if err := oprot.WriteI32(int32(p.StockNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.StockNum (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:StockNum: ", p), err) }
  return err
}

func (p *UnifiedItem) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ShelveState", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:ShelveState: ", p), err) }
  if err := oprot.WriteI32(int32(p.ShelveState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ShelveState (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:ShelveState: ", p), err) }
  return err
}

func (p *UnifiedItem) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ReviewState", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:ReviewState: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReviewState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ReviewState (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:ReviewState: ", p), err) }
  return err
}

func (p *UnifiedItem) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:UpdateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:UpdateTime: ", p), err) }
  return err
}

func (p *UnifiedItem) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SkuArray", thrift.LIST, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:SkuArray: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SkuArray)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SkuArray {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:SkuArray: ", p), err) }
  return err
}

func (p *UnifiedItem) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Data", thrift.MAP, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:Data: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Data {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:Data: ", p), err) }
  return err
}

func (p *UnifiedItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnifiedItem(%+v)", *p)
}

// Attributes:
//  - CartId
//  - Code
//  - Shops
type ShoppingCart struct {
  CartId int32 `thrift:"CartId,1" db:"CartId" json:"CartId"`
  Code string `thrift:"Code,2" db:"Code" json:"Code"`
  Shops []*ShoppingCartGroup `thrift:"Shops,3" db:"Shops" json:"Shops"`
}

func NewShoppingCart() *ShoppingCart {
  return &ShoppingCart{}
}


func (p *ShoppingCart) GetCartId() int32 {
  return p.CartId
}

func (p *ShoppingCart) GetCode() string {
  return p.Code
}

func (p *ShoppingCart) GetShops() []*ShoppingCartGroup {
  return p.Shops
}
func (p *ShoppingCart) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ShoppingCart)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CartId = v
}
  return nil
}

func (p *ShoppingCart)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *ShoppingCart)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ShoppingCartGroup, 0, size)
  p.Shops =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &ShoppingCartGroup{}
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.Shops = append(p.Shops, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ShoppingCart) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ShoppingCart"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShoppingCart) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CartId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:CartId: ", p), err) }
  if err := oprot.WriteI32(int32(p.CartId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CartId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:CartId: ", p), err) }
  return err
}

func (p *ShoppingCart) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Code", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Code (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Code: ", p), err) }
  return err
}

func (p *ShoppingCart) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Shops", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Shops: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Shops)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Shops {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Shops: ", p), err) }
  return err
}

func (p *ShoppingCart) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShoppingCart(%+v)", *p)
}

// Attributes:
//  - ShopId
//  - VendorId
//  - ShopName
//  - Checked
//  - Items
type ShoppingCartGroup struct {
  ShopId int32 `thrift:"ShopId,1" db:"ShopId" json:"ShopId"`
  VendorId int32 `thrift:"VendorId,2" db:"VendorId" json:"VendorId"`
  ShopName string `thrift:"ShopName,3" db:"ShopName" json:"ShopName"`
  Checked bool `thrift:"Checked,4" db:"Checked" json:"Checked"`
  Items []*ShoppingCartItem `thrift:"Items,5" db:"Items" json:"Items"`
}

func NewShoppingCartGroup() *ShoppingCartGroup {
  return &ShoppingCartGroup{}
}


func (p *ShoppingCartGroup) GetShopId() int32 {
  return p.ShopId
}

func (p *ShoppingCartGroup) GetVendorId() int32 {
  return p.VendorId
}

func (p *ShoppingCartGroup) GetShopName() string {
  return p.ShopName
}

func (p *ShoppingCartGroup) GetChecked() bool {
  return p.Checked
}

func (p *ShoppingCartGroup) GetItems() []*ShoppingCartItem {
  return p.Items
}
func (p *ShoppingCartGroup) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ShoppingCartGroup)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ShopId = v
}
  return nil
}

func (p *ShoppingCartGroup)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VendorId = v
}
  return nil
}

func (p *ShoppingCartGroup)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ShopName = v
}
  return nil
}

func (p *ShoppingCartGroup)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Checked = v
}
  return nil
}

func (p *ShoppingCartGroup)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ShoppingCartItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &ShoppingCartItem{}
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.Items = append(p.Items, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ShoppingCartGroup) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ShoppingCartGroup"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShoppingCartGroup) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ShopId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ShopId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ShopId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ShopId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ShopId: ", p), err) }
  return err
}

func (p *ShoppingCartGroup) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("VendorId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:VendorId: ", p), err) }
  if err := oprot.WriteI32(int32(p.VendorId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.VendorId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:VendorId: ", p), err) }
  return err
}

func (p *ShoppingCartGroup) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ShopName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ShopName: ", p), err) }
  if err := oprot.WriteString(string(p.ShopName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ShopName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ShopName: ", p), err) }
  return err
}

func (p *ShoppingCartGroup) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Checked", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Checked: ", p), err) }
  if err := oprot.WriteBool(bool(p.Checked)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Checked (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Checked: ", p), err) }
  return err
}

func (p *ShoppingCartGroup) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Items", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Items: ", p), err) }
  return err
}

func (p *ShoppingCartGroup) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShoppingCartGroup(%+v)", *p)
}

// Attributes:
//  - ItemId
//  - SkuId
//  - Title
//  - Image
//  - SpecWord
//  - Code
//  - RetailPrice
//  - Price
//  - Quantity
//  - Checked
//  - StockText
//  - ShopId
type ShoppingCartItem struct {
  ItemId int64 `thrift:"ItemId,1" db:"ItemId" json:"ItemId"`
  SkuId int64 `thrift:"SkuId,2" db:"SkuId" json:"SkuId"`
  Title string `thrift:"Title,3" db:"Title" json:"Title"`
  Image string `thrift:"Image,4" db:"Image" json:"Image"`
  SpecWord string `thrift:"SpecWord,5" db:"SpecWord" json:"SpecWord"`
  Code string `thrift:"Code,6" db:"Code" json:"Code"`
  RetailPrice float64 `thrift:"RetailPrice,7" db:"RetailPrice" json:"RetailPrice"`
  Price float64 `thrift:"Price,8" db:"Price" json:"Price"`
  Quantity int32 `thrift:"Quantity,9" db:"Quantity" json:"Quantity"`
  Checked bool `thrift:"Checked,10" db:"Checked" json:"Checked"`
  StockText string `thrift:"StockText,11" db:"StockText" json:"StockText"`
  ShopId int32 `thrift:"ShopId,12" db:"ShopId" json:"ShopId"`
}

func NewShoppingCartItem() *ShoppingCartItem {
  return &ShoppingCartItem{}
}


func (p *ShoppingCartItem) GetItemId() int64 {
  return p.ItemId
}

func (p *ShoppingCartItem) GetSkuId() int64 {
  return p.SkuId
}

func (p *ShoppingCartItem) GetTitle() string {
  return p.Title
}

func (p *ShoppingCartItem) GetImage() string {
  return p.Image
}

func (p *ShoppingCartItem) GetSpecWord() string {
  return p.SpecWord
}

func (p *ShoppingCartItem) GetCode() string {
  return p.Code
}

func (p *ShoppingCartItem) GetRetailPrice() float64 {
  return p.RetailPrice
}

func (p *ShoppingCartItem) GetPrice() float64 {
  return p.Price
}

func (p *ShoppingCartItem) GetQuantity() int32 {
  return p.Quantity
}

func (p *ShoppingCartItem) GetChecked() bool {
  return p.Checked
}

func (p *ShoppingCartItem) GetStockText() string {
  return p.StockText
}

func (p *ShoppingCartItem) GetShopId() int32 {
  return p.ShopId
}
func (p *ShoppingCartItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ShoppingCartItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ItemId = v
}
  return nil
}

func (p *ShoppingCartItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SkuId = v
}
  return nil
}

func (p *ShoppingCartItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *ShoppingCartItem)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Image = v
}
  return nil
}

func (p *ShoppingCartItem)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SpecWord = v
}
  return nil
}

func (p *ShoppingCartItem)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *ShoppingCartItem)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.RetailPrice = v
}
  return nil
}

func (p *ShoppingCartItem)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Price = v
}
  return nil
}

func (p *ShoppingCartItem)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Quantity = v
}
  return nil
}

func (p *ShoppingCartItem)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Checked = v
}
  return nil
}

func (p *ShoppingCartItem)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.StockText = v
}
  return nil
}

func (p *ShoppingCartItem)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ShopId = v
}
  return nil
}

func (p *ShoppingCartItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ShoppingCartItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShoppingCartItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ItemId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ItemId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ItemId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ItemId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ItemId: ", p), err) }
  return err
}

func (p *ShoppingCartItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SkuId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:SkuId: ", p), err) }
  if err := oprot.WriteI64(int64(p.SkuId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SkuId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:SkuId: ", p), err) }
  return err
}

func (p *ShoppingCartItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Title", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Title (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Title: ", p), err) }
  return err
}

func (p *ShoppingCartItem) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Image", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Image: ", p), err) }
  if err := oprot.WriteString(string(p.Image)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Image (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Image: ", p), err) }
  return err
}

func (p *ShoppingCartItem) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SpecWord", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:SpecWord: ", p), err) }
  if err := oprot.WriteString(string(p.SpecWord)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SpecWord (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:SpecWord: ", p), err) }
  return err
}

func (p *ShoppingCartItem) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Code", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Code (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Code: ", p), err) }
  return err
}

func (p *ShoppingCartItem) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("RetailPrice", thrift.DOUBLE, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:RetailPrice: ", p), err) }
  if err := oprot.WriteDouble(float64(p.RetailPrice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.RetailPrice (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:RetailPrice: ", p), err) }
  return err
}

func (p *ShoppingCartItem) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Price", thrift.DOUBLE, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Price: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Price)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Price (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Price: ", p), err) }
  return err
}

func (p *ShoppingCartItem) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Quantity", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:Quantity: ", p), err) }
  if err := oprot.WriteI32(int32(p.Quantity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Quantity (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:Quantity: ", p), err) }
  return err
}

func (p *ShoppingCartItem) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Checked", thrift.BOOL, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Checked: ", p), err) }
  if err := oprot.WriteBool(bool(p.Checked)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Checked (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Checked: ", p), err) }
  return err
}

func (p *ShoppingCartItem) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("StockText", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:StockText: ", p), err) }
  if err := oprot.WriteString(string(p.StockText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.StockText (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:StockText: ", p), err) }
  return err
}

func (p *ShoppingCartItem) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ShopId", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:ShopId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ShopId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ShopId (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:ShopId: ", p), err) }
  return err
}

func (p *ShoppingCartItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShoppingCartItem(%+v)", *p)
}

// 分页参数
// 
// Attributes:
//  - Opt: 参数
//  - OrderField: 排序字段
//  - OrderDesc: 是否倒序排列
//  - Begin: 开始记录数
//  - Over: 结束记录数
type PagingParams struct {
  Opt map[string]string `thrift:"Opt,1" db:"Opt" json:"Opt"`
  OrderField string `thrift:"OrderField,2" db:"OrderField" json:"OrderField"`
  OrderDesc bool `thrift:"OrderDesc,3" db:"OrderDesc" json:"OrderDesc"`
  Begin int32 `thrift:"Begin,4" db:"Begin" json:"Begin"`
  Over int32 `thrift:"Over,5" db:"Over" json:"Over"`
}

func NewPagingParams() *PagingParams {
  return &PagingParams{}
}


func (p *PagingParams) GetOpt() map[string]string {
  return p.Opt
}

func (p *PagingParams) GetOrderField() string {
  return p.OrderField
}

func (p *PagingParams) GetOrderDesc() bool {
  return p.OrderDesc
}

func (p *PagingParams) GetBegin() int32 {
  return p.Begin
}

func (p *PagingParams) GetOver() int32 {
  return p.Over
}
func (p *PagingParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PagingParams)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Opt =  tMap
  for i := 0; i < size; i ++ {
var _key11 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key11 = v
}
var _val12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val12 = v
}
    p.Opt[_key11] = _val12
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PagingParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OrderField = v
}
  return nil
}

func (p *PagingParams)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OrderDesc = v
}
  return nil
}

func (p *PagingParams)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Begin = v
}
  return nil
}

func (p *PagingParams)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Over = v
}
  return nil
}

func (p *PagingParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PagingParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PagingParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Opt", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Opt: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Opt)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Opt {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Opt: ", p), err) }
  return err
}

func (p *PagingParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("OrderField", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:OrderField: ", p), err) }
  if err := oprot.WriteString(string(p.OrderField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.OrderField (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:OrderField: ", p), err) }
  return err
}

func (p *PagingParams) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("OrderDesc", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:OrderDesc: ", p), err) }
  if err := oprot.WriteBool(bool(p.OrderDesc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.OrderDesc (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:OrderDesc: ", p), err) }
  return err
}

func (p *PagingParams) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Begin", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Begin: ", p), err) }
  if err := oprot.WriteI32(int32(p.Begin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Begin (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Begin: ", p), err) }
  return err
}

func (p *PagingParams) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Over", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Over: ", p), err) }
  if err := oprot.WriteI32(int32(p.Over)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Over (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Over: ", p), err) }
  return err
}

func (p *PagingParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PagingParams(%+v)", *p)
}

// 分页结果
// 
// Attributes:
//  - ErrCode: 代码
//  - ErrMsg: 消息
//  - Count: 总数
//  - Data: 数据
type PagingResult_ struct {
  ErrCode int32 `thrift:"ErrCode,1" db:"ErrCode" json:"ErrCode"`
  ErrMsg string `thrift:"ErrMsg,2" db:"ErrMsg" json:"ErrMsg"`
  Count int32 `thrift:"Count,3" db:"Count" json:"Count"`
  Data string `thrift:"Data,4" db:"Data" json:"Data"`
}

func NewPagingResult_() *PagingResult_ {
  return &PagingResult_{}
}


func (p *PagingResult_) GetErrCode() int32 {
  return p.ErrCode
}

func (p *PagingResult_) GetErrMsg() string {
  return p.ErrMsg
}

func (p *PagingResult_) GetCount() int32 {
  return p.Count
}

func (p *PagingResult_) GetData() string {
  return p.Data
}
func (p *PagingResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PagingResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrCode = v
}
  return nil
}

func (p *PagingResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrMsg = v
}
  return nil
}

func (p *PagingResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *PagingResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *PagingResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PagingResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PagingResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ErrCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ErrCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ErrCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ErrCode: ", p), err) }
  return err
}

func (p *PagingResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ErrMsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ErrMsg: ", p), err) }
  if err := oprot.WriteString(string(p.ErrMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ErrMsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ErrMsg: ", p), err) }
  return err
}

func (p *PagingResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Count: ", p), err) }
  return err
}

func (p *PagingResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Data", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Data: ", p), err) }
  if err := oprot.WriteString(string(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Data (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Data: ", p), err) }
  return err
}

func (p *PagingResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PagingResult_(%+v)", *p)
}


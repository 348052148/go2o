// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "define"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  Result RegisterMemberV1(Member member, Profile profile, i32 mchId, string cardId, string inviteCode)")
  fmt.Fprintln(os.Stderr, "  Result64 CheckLogin(string user, string pwd, bool update)")
  fmt.Fprintln(os.Stderr, "  Result CheckTradePwd(i64 id, string tradePwd)")
  fmt.Fprintln(os.Stderr, "   LevelList()")
  fmt.Fprintln(os.Stderr, "  TrustedInfo GetTrustInfo(i64 id)")
  fmt.Fprintln(os.Stderr, "  Level GetLevel(i32 id)")
  fmt.Fprintln(os.Stderr, "  Level GetLevelBySign(string sign)")
  fmt.Fprintln(os.Stderr, "  Member GetMember(i64 id)")
  fmt.Fprintln(os.Stderr, "  Member GetMemberByUser(string user)")
  fmt.Fprintln(os.Stderr, "  Profile GetProfile(i64 id)")
  fmt.Fprintln(os.Stderr, "  ComplexMember Complex(i64 memberId)")
  fmt.Fprintln(os.Stderr, "  Result CheckProfileComplete(i64 memberId)")
  fmt.Fprintln(os.Stderr, "  Result UpdateLevel(i64 memberId, i32 level, bool review, i64 paymentOrderId)")
  fmt.Fprintln(os.Stderr, "  Result ChangePhone(i64 memberId, string phone)")
  fmt.Fprintln(os.Stderr, "  Result ChangeUsr(i64 memberId, string usr)")
  fmt.Fprintln(os.Stderr, "  Result Premium(i64 memberId, i32 v, i64 expires)")
  fmt.Fprintln(os.Stderr, "  string GetToken(i64 memberId, bool reset)")
  fmt.Fprintln(os.Stderr, "  bool CheckToken(i64 memberId, string token)")
  fmt.Fprintln(os.Stderr, "  void RemoveToken(i64 memberId)")
  fmt.Fprintln(os.Stderr, "   GetAddressList(i64 memberId)")
  fmt.Fprintln(os.Stderr, "  Address GetAddress(i64 memberId, i64 addrId)")
  fmt.Fprintln(os.Stderr, "  Account GetAccount(i64 memberId)")
  fmt.Fprintln(os.Stderr, "   InviterArray(i64 memberId, i32 depth)")
  fmt.Fprintln(os.Stderr, "  i32 GetInviterQuantity(i64 memberId,  data)")
  fmt.Fprintln(os.Stderr, "   GetInviterArray(i64 memberId,  data)")
  fmt.Fprintln(os.Stderr, "  Result ChargeAccount(i64 memberId, i32 account, i32 kind, string title, string outerNo, double amount, i64 relateUser)")
  fmt.Fprintln(os.Stderr, "  Result DiscountAccount(i64 memberId, i32 account, string title, string outerNo, double amount, i64 relateUser, bool mustLargeZero)")
  fmt.Fprintln(os.Stderr, "  Result AdjustAccount(i64 memberId, i32 account, string title, double amount, i64 relateUser)")
  fmt.Fprintln(os.Stderr, "  Result B4EAuth(i64 memberId, string action,  data)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := define.NewMemberServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "RegisterMemberV1":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RegisterMemberV1 requires 5 args")
      flag.Usage()
    }
    arg70 := flag.Arg(1)
    mbTrans71 := thrift.NewTMemoryBufferLen(len(arg70))
    defer mbTrans71.Close()
    _, err72 := mbTrans71.WriteString(arg70)
    if err72 != nil {
      Usage()
      return
    }
    factory73 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt74 := factory73.GetProtocol(mbTrans71)
    argvalue0 := define.NewMember()
    err75 := argvalue0.Read(jsProt74)
    if err75 != nil {
      Usage()
      return
    }
    value0 := define.Member(argvalue0)
    arg76 := flag.Arg(2)
    mbTrans77 := thrift.NewTMemoryBufferLen(len(arg76))
    defer mbTrans77.Close()
    _, err78 := mbTrans77.WriteString(arg76)
    if err78 != nil {
      Usage()
      return
    }
    factory79 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt80 := factory79.GetProtocol(mbTrans77)
    argvalue1 := define.NewProfile()
    err81 := argvalue1.Read(jsProt80)
    if err81 != nil {
      Usage()
      return
    }
    value1 := define.Profile(argvalue1)
    tmp2, err82 := (strconv.Atoi(flag.Arg(3)))
    if err82 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.RegisterMemberV1(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "CheckLogin":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CheckLogin requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.CheckLogin(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "CheckTradePwd":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CheckTradePwd requires 2 args")
      flag.Usage()
    }
    argvalue0, err88 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err88 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.CheckTradePwd(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "LevelList":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "LevelList requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.LevelList(context.Background()))
    fmt.Print("\n")
    break
  case "GetTrustInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTrustInfo requires 1 args")
      flag.Usage()
    }
    argvalue0, err90 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err90 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTrustInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "GetLevel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLevel requires 1 args")
      flag.Usage()
    }
    tmp0, err91 := (strconv.Atoi(flag.Arg(1)))
    if err91 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetLevel(context.Background(), value0))
    fmt.Print("\n")
    break
  case "GetLevelBySign":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLevelBySign requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetLevelBySign(context.Background(), value0))
    fmt.Print("\n")
    break
  case "GetMember":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMember requires 1 args")
      flag.Usage()
    }
    argvalue0, err93 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err93 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetMember(context.Background(), value0))
    fmt.Print("\n")
    break
  case "GetMemberByUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMemberByUser requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMemberByUser(context.Background(), value0))
    fmt.Print("\n")
    break
  case "GetProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProfile requires 1 args")
      flag.Usage()
    }
    argvalue0, err95 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err95 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "Complex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Complex requires 1 args")
      flag.Usage()
    }
    argvalue0, err96 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err96 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Complex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "CheckProfileComplete":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CheckProfileComplete requires 1 args")
      flag.Usage()
    }
    argvalue0, err97 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err97 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CheckProfileComplete(context.Background(), value0))
    fmt.Print("\n")
    break
  case "UpdateLevel":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateLevel requires 4 args")
      flag.Usage()
    }
    argvalue0, err98 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err98 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err99 := (strconv.Atoi(flag.Arg(2)))
    if err99 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3, err101 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err101 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.UpdateLevel(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "ChangePhone":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ChangePhone requires 2 args")
      flag.Usage()
    }
    argvalue0, err102 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err102 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ChangePhone(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "ChangeUsr":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ChangeUsr requires 2 args")
      flag.Usage()
    }
    argvalue0, err104 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err104 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ChangeUsr(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "Premium":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Premium requires 3 args")
      flag.Usage()
    }
    argvalue0, err106 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err106 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err107 := (strconv.Atoi(flag.Arg(2)))
    if err107 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2, err108 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err108 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Premium(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetToken":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetToken requires 2 args")
      flag.Usage()
    }
    argvalue0, err109 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err109 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.GetToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "CheckToken":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CheckToken requires 2 args")
      flag.Usage()
    }
    argvalue0, err111 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err111 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.CheckToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "RemoveToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveToken requires 1 args")
      flag.Usage()
    }
    argvalue0, err113 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err113 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "GetAddressList":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAddressList requires 1 args")
      flag.Usage()
    }
    argvalue0, err114 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err114 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAddressList(context.Background(), value0))
    fmt.Print("\n")
    break
  case "GetAddress":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAddress requires 2 args")
      flag.Usage()
    }
    argvalue0, err115 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err115 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err116 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err116 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetAddress(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "GetAccount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAccount requires 1 args")
      flag.Usage()
    }
    argvalue0, err117 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err117 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAccount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "InviterArray":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "InviterArray requires 2 args")
      flag.Usage()
    }
    argvalue0, err118 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err118 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err119 := (strconv.Atoi(flag.Arg(2)))
    if err119 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.InviterArray(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "GetInviterQuantity":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetInviterQuantity requires 2 args")
      flag.Usage()
    }
    argvalue0, err120 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err120 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg121 := flag.Arg(2)
    mbTrans122 := thrift.NewTMemoryBufferLen(len(arg121))
    defer mbTrans122.Close()
    _, err123 := mbTrans122.WriteString(arg121)
    if err123 != nil { 
      Usage()
      return
    }
    factory124 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt125 := factory124.GetProtocol(mbTrans122)
    containerStruct1 := define.NewMemberServiceGetInviterQuantityArgs()
    err126 := containerStruct1.ReadField2(jsProt125)
    if err126 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Data
    value1 := argvalue1
    fmt.Print(client.GetInviterQuantity(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "GetInviterArray":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetInviterArray requires 2 args")
      flag.Usage()
    }
    argvalue0, err127 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err127 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg128 := flag.Arg(2)
    mbTrans129 := thrift.NewTMemoryBufferLen(len(arg128))
    defer mbTrans129.Close()
    _, err130 := mbTrans129.WriteString(arg128)
    if err130 != nil { 
      Usage()
      return
    }
    factory131 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt132 := factory131.GetProtocol(mbTrans129)
    containerStruct1 := define.NewMemberServiceGetInviterArrayArgs()
    err133 := containerStruct1.ReadField2(jsProt132)
    if err133 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Data
    value1 := argvalue1
    fmt.Print(client.GetInviterArray(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "ChargeAccount":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "ChargeAccount requires 7 args")
      flag.Usage()
    }
    argvalue0, err134 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err134 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err135 := (strconv.Atoi(flag.Arg(2)))
    if err135 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err136 := (strconv.Atoi(flag.Arg(3)))
    if err136 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5, err139 := (strconv.ParseFloat(flag.Arg(6), 64))
    if err139 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    argvalue6, err140 := (strconv.ParseInt(flag.Arg(7), 10, 64))
    if err140 != nil {
      Usage()
      return
    }
    value6 := argvalue6
    fmt.Print(client.ChargeAccount(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "DiscountAccount":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "DiscountAccount requires 7 args")
      flag.Usage()
    }
    argvalue0, err141 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err141 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err142 := (strconv.Atoi(flag.Arg(2)))
    if err142 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4, err145 := (strconv.ParseFloat(flag.Arg(5), 64))
    if err145 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5, err146 := (strconv.ParseInt(flag.Arg(6), 10, 64))
    if err146 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    argvalue6 := flag.Arg(7) == "true"
    value6 := argvalue6
    fmt.Print(client.DiscountAccount(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "AdjustAccount":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "AdjustAccount requires 5 args")
      flag.Usage()
    }
    argvalue0, err148 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err148 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err149 := (strconv.Atoi(flag.Arg(2)))
    if err149 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3, err151 := (strconv.ParseFloat(flag.Arg(4), 64))
    if err151 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4, err152 := (strconv.ParseInt(flag.Arg(5), 10, 64))
    if err152 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.AdjustAccount(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "B4EAuth":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "B4EAuth requires 3 args")
      flag.Usage()
    }
    argvalue0, err153 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err153 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg155 := flag.Arg(3)
    mbTrans156 := thrift.NewTMemoryBufferLen(len(arg155))
    defer mbTrans156.Close()
    _, err157 := mbTrans156.WriteString(arg155)
    if err157 != nil { 
      Usage()
      return
    }
    factory158 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt159 := factory158.GetProtocol(mbTrans156)
    containerStruct2 := define.NewMemberServiceB4EAuthArgs()
    err160 := containerStruct2.ReadField3(jsProt159)
    if err160 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Data
    value2 := argvalue2
    fmt.Print(client.B4EAuth(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}

// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package define

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Suspend
//  - SuspendMessage
//  - MchGoodsCategory
//  - MchPageCategory
type PlatformConf struct {
  Suspend bool `thrift:"Suspend,1" db:"Suspend" json:"Suspend"`
  SuspendMessage string `thrift:"SuspendMessage,2" db:"SuspendMessage" json:"SuspendMessage"`
  MchGoodsCategory bool `thrift:"MchGoodsCategory,3" db:"MchGoodsCategory" json:"MchGoodsCategory"`
  MchPageCategory bool `thrift:"MchPageCategory,4" db:"MchPageCategory" json:"MchPageCategory"`
}

func NewPlatformConf() *PlatformConf {
  return &PlatformConf{}
}


func (p *PlatformConf) GetSuspend() bool {
  return p.Suspend
}

func (p *PlatformConf) GetSuspendMessage() string {
  return p.SuspendMessage
}

func (p *PlatformConf) GetMchGoodsCategory() bool {
  return p.MchGoodsCategory
}

func (p *PlatformConf) GetMchPageCategory() bool {
  return p.MchPageCategory
}
func (p *PlatformConf) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PlatformConf)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Suspend = v
}
  return nil
}

func (p *PlatformConf)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SuspendMessage = v
}
  return nil
}

func (p *PlatformConf)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MchGoodsCategory = v
}
  return nil
}

func (p *PlatformConf)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MchPageCategory = v
}
  return nil
}

func (p *PlatformConf) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PlatformConf"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlatformConf) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Suspend", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Suspend: ", p), err) }
  if err := oprot.WriteBool(bool(p.Suspend)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Suspend (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Suspend: ", p), err) }
  return err
}

func (p *PlatformConf) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SuspendMessage", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:SuspendMessage: ", p), err) }
  if err := oprot.WriteString(string(p.SuspendMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SuspendMessage (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:SuspendMessage: ", p), err) }
  return err
}

func (p *PlatformConf) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MchGoodsCategory", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:MchGoodsCategory: ", p), err) }
  if err := oprot.WriteBool(bool(p.MchGoodsCategory)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MchGoodsCategory (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:MchGoodsCategory: ", p), err) }
  return err
}

func (p *PlatformConf) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MchPageCategory", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:MchPageCategory: ", p), err) }
  if err := oprot.WriteBool(bool(p.MchPageCategory)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MchPageCategory (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:MchPageCategory: ", p), err) }
  return err
}

func (p *PlatformConf) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlatformConf(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - ApiUrl
//  - Token
type SsoApp struct {
  ID int32 `thrift:"ID,1" db:"ID" json:"ID"`
  Name string `thrift:"Name,2" db:"Name" json:"Name"`
  ApiUrl string `thrift:"ApiUrl,3" db:"ApiUrl" json:"ApiUrl"`
  Token string `thrift:"Token,4" db:"Token" json:"Token"`
}

func NewSsoApp() *SsoApp {
  return &SsoApp{}
}


func (p *SsoApp) GetID() int32 {
  return p.ID
}

func (p *SsoApp) GetName() string {
  return p.Name
}

func (p *SsoApp) GetApiUrl() string {
  return p.ApiUrl
}

func (p *SsoApp) GetToken() string {
  return p.Token
}
func (p *SsoApp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SsoApp)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *SsoApp)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *SsoApp)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ApiUrl = v
}
  return nil
}

func (p *SsoApp)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *SsoApp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SsoApp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SsoApp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err) }
  return err
}

func (p *SsoApp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Name: ", p), err) }
  return err
}

func (p *SsoApp) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ApiUrl", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ApiUrl: ", p), err) }
  if err := oprot.WriteString(string(p.ApiUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ApiUrl (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ApiUrl: ", p), err) }
  return err
}

func (p *SsoApp) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Token", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Token (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Token: ", p), err) }
  return err
}

func (p *SsoApp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SsoApp(%+v)", *p)
}

// 行政区域
// 
// Attributes:
//  - Code
//  - Parent
//  - Name
type SArea struct {
  Code int32 `thrift:"Code,1" db:"Code" json:"Code"`
  Parent int32 `thrift:"Parent,2" db:"Parent" json:"Parent"`
  Name string `thrift:"Name,3" db:"Name" json:"Name"`
}

func NewSArea() *SArea {
  return &SArea{}
}


func (p *SArea) GetCode() int32 {
  return p.Code
}

func (p *SArea) GetParent() int32 {
  return p.Parent
}

func (p *SArea) GetName() string {
  return p.Name
}
func (p *SArea) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SArea)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *SArea)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Parent = v
}
  return nil
}

func (p *SArea)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *SArea) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SArea"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SArea) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Code: ", p), err) }
  return err
}

func (p *SArea) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Parent", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Parent: ", p), err) }
  if err := oprot.WriteI32(int32(p.Parent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Parent (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Parent: ", p), err) }
  return err
}

func (p *SArea) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Name: ", p), err) }
  return err
}

func (p *SArea) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SArea(%+v)", *p)
}

type FoundationService interface {
  // Parameters:
  //  - URL
  ResourceUrl(ctx context.Context, url string) (r string, err error)
  GetPlatformConf(ctx context.Context) (r *PlatformConf, err error)
  // Parameters:
  //  - Key
  GetValue(ctx context.Context, key string) (r string, err error)
  // Parameters:
  //  - Key
  //  - Value
  SetValue(ctx context.Context, key string, value string) (r *Result_, err error)
  // Parameters:
  //  - Key
  DeleteValue(ctx context.Context, key string) (r *Result_, err error)
  // Parameters:
  //  - Keys
  GetRegistryV1(ctx context.Context, keys []string) (r []string, err error)
  // Parameters:
  //  - Keys
  GetRegistryMapV1(ctx context.Context, keys []string) (r map[string]string, err error)
  // Parameters:
  //  - Prefix
  GetValuesByPrefix(ctx context.Context, prefix string) (r map[string]string, err error)
  // Parameters:
  //  - App
  RegisterApp(ctx context.Context, app *SsoApp) (r string, err error)
  // Parameters:
  //  - Name
  GetApp(ctx context.Context, name string) (r *SsoApp, err error)
  GetAllSsoApp(ctx context.Context) (r []string, err error)
  // Parameters:
  //  - User
  //  - Pwd
  SuperValidate(ctx context.Context, user string, pwd string) (r bool, err error)
  // Parameters:
  //  - User
  //  - Pwd
  FlushSuperPwd(ctx context.Context, user string, pwd string) (err error)
  // Parameters:
  //  - ReturnUrl
  GetSyncLoginUrl(ctx context.Context, returnUrl string) (r string, err error)
  // Parameters:
  //  - Codes
  GetAreaNames(ctx context.Context, codes []int32) (r []string, err error)
  // Parameters:
  //  - Code
  GetChildAreas(ctx context.Context, code int32) (r []*SArea, err error)
}

type FoundationServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewFoundationService instead
func NewFoundationServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FoundationServiceClient {
  return &FoundationServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewFoundationService instead
func NewFoundationServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FoundationServiceClient {
  return &FoundationServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewFoundationServiceClient(c thrift.TClient) *FoundationServiceClient {
  return &FoundationServiceClient{
    c: c,
  }
}

// Parameters:
//  - URL
func (p *FoundationServiceClient) ResourceUrl(ctx context.Context, url string) (r string, err error) {
  var _args0 FoundationServiceResourceUrlArgs
  _args0.URL = url
  var _result1 FoundationServiceResourceUrlResult
  if err = p.c.Call(ctx, "ResourceUrl", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

func (p *FoundationServiceClient) GetPlatformConf(ctx context.Context) (r *PlatformConf, err error) {
  var _args2 FoundationServiceGetPlatformConfArgs
  var _result3 FoundationServiceGetPlatformConfResult
  if err = p.c.Call(ctx, "GetPlatformConf", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - Key
func (p *FoundationServiceClient) GetValue(ctx context.Context, key string) (r string, err error) {
  var _args4 FoundationServiceGetValueArgs
  _args4.Key = key
  var _result5 FoundationServiceGetValueResult
  if err = p.c.Call(ctx, "GetValue", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - Value
func (p *FoundationServiceClient) SetValue(ctx context.Context, key string, value string) (r *Result_, err error) {
  var _args6 FoundationServiceSetValueArgs
  _args6.Key = key
  _args6.Value = value
  var _result7 FoundationServiceSetValueResult
  if err = p.c.Call(ctx, "SetValue", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - Key
func (p *FoundationServiceClient) DeleteValue(ctx context.Context, key string) (r *Result_, err error) {
  var _args8 FoundationServiceDeleteValueArgs
  _args8.Key = key
  var _result9 FoundationServiceDeleteValueResult
  if err = p.c.Call(ctx, "DeleteValue", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Keys
func (p *FoundationServiceClient) GetRegistryV1(ctx context.Context, keys []string) (r []string, err error) {
  var _args10 FoundationServiceGetRegistryV1Args
  _args10.Keys = keys
  var _result11 FoundationServiceGetRegistryV1Result
  if err = p.c.Call(ctx, "GetRegistryV1", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - Keys
func (p *FoundationServiceClient) GetRegistryMapV1(ctx context.Context, keys []string) (r map[string]string, err error) {
  var _args12 FoundationServiceGetRegistryMapV1Args
  _args12.Keys = keys
  var _result13 FoundationServiceGetRegistryMapV1Result
  if err = p.c.Call(ctx, "GetRegistryMapV1", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - Prefix
func (p *FoundationServiceClient) GetValuesByPrefix(ctx context.Context, prefix string) (r map[string]string, err error) {
  var _args14 FoundationServiceGetValuesByPrefixArgs
  _args14.Prefix = prefix
  var _result15 FoundationServiceGetValuesByPrefixResult
  if err = p.c.Call(ctx, "GetValuesByPrefix", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

// Parameters:
//  - App
func (p *FoundationServiceClient) RegisterApp(ctx context.Context, app *SsoApp) (r string, err error) {
  var _args16 FoundationServiceRegisterAppArgs
  _args16.App = app
  var _result17 FoundationServiceRegisterAppResult
  if err = p.c.Call(ctx, "RegisterApp", &_args16, &_result17); err != nil {
    return
  }
  return _result17.GetSuccess(), nil
}

// Parameters:
//  - Name
func (p *FoundationServiceClient) GetApp(ctx context.Context, name string) (r *SsoApp, err error) {
  var _args18 FoundationServiceGetAppArgs
  _args18.Name = name
  var _result19 FoundationServiceGetAppResult
  if err = p.c.Call(ctx, "GetApp", &_args18, &_result19); err != nil {
    return
  }
  return _result19.GetSuccess(), nil
}

func (p *FoundationServiceClient) GetAllSsoApp(ctx context.Context) (r []string, err error) {
  var _args20 FoundationServiceGetAllSsoAppArgs
  var _result21 FoundationServiceGetAllSsoAppResult
  if err = p.c.Call(ctx, "GetAllSsoApp", &_args20, &_result21); err != nil {
    return
  }
  return _result21.GetSuccess(), nil
}

// Parameters:
//  - User
//  - Pwd
func (p *FoundationServiceClient) SuperValidate(ctx context.Context, user string, pwd string) (r bool, err error) {
  var _args22 FoundationServiceSuperValidateArgs
  _args22.User = user
  _args22.Pwd = pwd
  var _result23 FoundationServiceSuperValidateResult
  if err = p.c.Call(ctx, "SuperValidate", &_args22, &_result23); err != nil {
    return
  }
  return _result23.GetSuccess(), nil
}

// Parameters:
//  - User
//  - Pwd
func (p *FoundationServiceClient) FlushSuperPwd(ctx context.Context, user string, pwd string) (err error) {
  var _args24 FoundationServiceFlushSuperPwdArgs
  _args24.User = user
  _args24.Pwd = pwd
  var _result25 FoundationServiceFlushSuperPwdResult
  if err = p.c.Call(ctx, "FlushSuperPwd", &_args24, &_result25); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - ReturnUrl
func (p *FoundationServiceClient) GetSyncLoginUrl(ctx context.Context, returnUrl string) (r string, err error) {
  var _args26 FoundationServiceGetSyncLoginUrlArgs
  _args26.ReturnUrl = returnUrl
  var _result27 FoundationServiceGetSyncLoginUrlResult
  if err = p.c.Call(ctx, "GetSyncLoginUrl", &_args26, &_result27); err != nil {
    return
  }
  return _result27.GetSuccess(), nil
}

// Parameters:
//  - Codes
func (p *FoundationServiceClient) GetAreaNames(ctx context.Context, codes []int32) (r []string, err error) {
  var _args28 FoundationServiceGetAreaNamesArgs
  _args28.Codes = codes
  var _result29 FoundationServiceGetAreaNamesResult
  if err = p.c.Call(ctx, "GetAreaNames", &_args28, &_result29); err != nil {
    return
  }
  return _result29.GetSuccess(), nil
}

// Parameters:
//  - Code
func (p *FoundationServiceClient) GetChildAreas(ctx context.Context, code int32) (r []*SArea, err error) {
  var _args30 FoundationServiceGetChildAreasArgs
  _args30.Code = code
  var _result31 FoundationServiceGetChildAreasResult
  if err = p.c.Call(ctx, "GetChildAreas", &_args30, &_result31); err != nil {
    return
  }
  return _result31.GetSuccess(), nil
}

type FoundationServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler FoundationService
}

func (p *FoundationServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *FoundationServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *FoundationServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewFoundationServiceProcessor(handler FoundationService) *FoundationServiceProcessor {

  self32 := &FoundationServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self32.processorMap["ResourceUrl"] = &foundationServiceProcessorResourceUrl{handler:handler}
  self32.processorMap["GetPlatformConf"] = &foundationServiceProcessorGetPlatformConf{handler:handler}
  self32.processorMap["GetValue"] = &foundationServiceProcessorGetValue{handler:handler}
  self32.processorMap["SetValue"] = &foundationServiceProcessorSetValue{handler:handler}
  self32.processorMap["DeleteValue"] = &foundationServiceProcessorDeleteValue{handler:handler}
  self32.processorMap["GetRegistryV1"] = &foundationServiceProcessorGetRegistryV1{handler:handler}
  self32.processorMap["GetRegistryMapV1"] = &foundationServiceProcessorGetRegistryMapV1{handler:handler}
  self32.processorMap["GetValuesByPrefix"] = &foundationServiceProcessorGetValuesByPrefix{handler:handler}
  self32.processorMap["RegisterApp"] = &foundationServiceProcessorRegisterApp{handler:handler}
  self32.processorMap["GetApp"] = &foundationServiceProcessorGetApp{handler:handler}
  self32.processorMap["GetAllSsoApp"] = &foundationServiceProcessorGetAllSsoApp{handler:handler}
  self32.processorMap["SuperValidate"] = &foundationServiceProcessorSuperValidate{handler:handler}
  self32.processorMap["FlushSuperPwd"] = &foundationServiceProcessorFlushSuperPwd{handler:handler}
  self32.processorMap["GetSyncLoginUrl"] = &foundationServiceProcessorGetSyncLoginUrl{handler:handler}
  self32.processorMap["GetAreaNames"] = &foundationServiceProcessorGetAreaNames{handler:handler}
  self32.processorMap["GetChildAreas"] = &foundationServiceProcessorGetChildAreas{handler:handler}
return self32
}

func (p *FoundationServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x33 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x33.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x33

}

type foundationServiceProcessorResourceUrl struct {
  handler FoundationService
}

func (p *foundationServiceProcessorResourceUrl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FoundationServiceResourceUrlArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ResourceUrl", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FoundationServiceResourceUrlResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.ResourceUrl(ctx, args.URL); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ResourceUrl: " + err2.Error())
    oprot.WriteMessageBegin("ResourceUrl", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ResourceUrl", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type foundationServiceProcessorGetPlatformConf struct {
  handler FoundationService
}

func (p *foundationServiceProcessorGetPlatformConf) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FoundationServiceGetPlatformConfArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetPlatformConf", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FoundationServiceGetPlatformConfResult{}
var retval *PlatformConf
  var err2 error
  if retval, err2 = p.handler.GetPlatformConf(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPlatformConf: " + err2.Error())
    oprot.WriteMessageBegin("GetPlatformConf", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetPlatformConf", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type foundationServiceProcessorGetValue struct {
  handler FoundationService
}

func (p *foundationServiceProcessorGetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FoundationServiceGetValueArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FoundationServiceGetValueResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetValue(ctx, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValue: " + err2.Error())
    oprot.WriteMessageBegin("GetValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetValue", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type foundationServiceProcessorSetValue struct {
  handler FoundationService
}

func (p *foundationServiceProcessorSetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FoundationServiceSetValueArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SetValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FoundationServiceSetValueResult{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.SetValue(ctx, args.Key, args.Value); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetValue: " + err2.Error())
    oprot.WriteMessageBegin("SetValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SetValue", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type foundationServiceProcessorDeleteValue struct {
  handler FoundationService
}

func (p *foundationServiceProcessorDeleteValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FoundationServiceDeleteValueArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("DeleteValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FoundationServiceDeleteValueResult{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.DeleteValue(ctx, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteValue: " + err2.Error())
    oprot.WriteMessageBegin("DeleteValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("DeleteValue", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type foundationServiceProcessorGetRegistryV1 struct {
  handler FoundationService
}

func (p *foundationServiceProcessorGetRegistryV1) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FoundationServiceGetRegistryV1Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetRegistryV1", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FoundationServiceGetRegistryV1Result{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetRegistryV1(ctx, args.Keys); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetRegistryV1: " + err2.Error())
    oprot.WriteMessageBegin("GetRegistryV1", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetRegistryV1", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type foundationServiceProcessorGetRegistryMapV1 struct {
  handler FoundationService
}

func (p *foundationServiceProcessorGetRegistryMapV1) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FoundationServiceGetRegistryMapV1Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetRegistryMapV1", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FoundationServiceGetRegistryMapV1Result{}
var retval map[string]string
  var err2 error
  if retval, err2 = p.handler.GetRegistryMapV1(ctx, args.Keys); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetRegistryMapV1: " + err2.Error())
    oprot.WriteMessageBegin("GetRegistryMapV1", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetRegistryMapV1", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type foundationServiceProcessorGetValuesByPrefix struct {
  handler FoundationService
}

func (p *foundationServiceProcessorGetValuesByPrefix) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FoundationServiceGetValuesByPrefixArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetValuesByPrefix", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FoundationServiceGetValuesByPrefixResult{}
var retval map[string]string
  var err2 error
  if retval, err2 = p.handler.GetValuesByPrefix(ctx, args.Prefix); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetValuesByPrefix: " + err2.Error())
    oprot.WriteMessageBegin("GetValuesByPrefix", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetValuesByPrefix", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type foundationServiceProcessorRegisterApp struct {
  handler FoundationService
}

func (p *foundationServiceProcessorRegisterApp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FoundationServiceRegisterAppArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RegisterApp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FoundationServiceRegisterAppResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.RegisterApp(ctx, args.App); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RegisterApp: " + err2.Error())
    oprot.WriteMessageBegin("RegisterApp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("RegisterApp", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type foundationServiceProcessorGetApp struct {
  handler FoundationService
}

func (p *foundationServiceProcessorGetApp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FoundationServiceGetAppArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetApp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FoundationServiceGetAppResult{}
var retval *SsoApp
  var err2 error
  if retval, err2 = p.handler.GetApp(ctx, args.Name); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetApp: " + err2.Error())
    oprot.WriteMessageBegin("GetApp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetApp", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type foundationServiceProcessorGetAllSsoApp struct {
  handler FoundationService
}

func (p *foundationServiceProcessorGetAllSsoApp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FoundationServiceGetAllSsoAppArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetAllSsoApp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FoundationServiceGetAllSsoAppResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetAllSsoApp(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAllSsoApp: " + err2.Error())
    oprot.WriteMessageBegin("GetAllSsoApp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetAllSsoApp", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type foundationServiceProcessorSuperValidate struct {
  handler FoundationService
}

func (p *foundationServiceProcessorSuperValidate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FoundationServiceSuperValidateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SuperValidate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FoundationServiceSuperValidateResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.SuperValidate(ctx, args.User, args.Pwd); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SuperValidate: " + err2.Error())
    oprot.WriteMessageBegin("SuperValidate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("SuperValidate", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type foundationServiceProcessorFlushSuperPwd struct {
  handler FoundationService
}

func (p *foundationServiceProcessorFlushSuperPwd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FoundationServiceFlushSuperPwdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("FlushSuperPwd", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FoundationServiceFlushSuperPwdResult{}
  var err2 error
  if err2 = p.handler.FlushSuperPwd(ctx, args.User, args.Pwd); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FlushSuperPwd: " + err2.Error())
    oprot.WriteMessageBegin("FlushSuperPwd", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("FlushSuperPwd", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type foundationServiceProcessorGetSyncLoginUrl struct {
  handler FoundationService
}

func (p *foundationServiceProcessorGetSyncLoginUrl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FoundationServiceGetSyncLoginUrlArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetSyncLoginUrl", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FoundationServiceGetSyncLoginUrlResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetSyncLoginUrl(ctx, args.ReturnUrl); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSyncLoginUrl: " + err2.Error())
    oprot.WriteMessageBegin("GetSyncLoginUrl", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetSyncLoginUrl", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type foundationServiceProcessorGetAreaNames struct {
  handler FoundationService
}

func (p *foundationServiceProcessorGetAreaNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FoundationServiceGetAreaNamesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetAreaNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FoundationServiceGetAreaNamesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetAreaNames(ctx, args.Codes); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAreaNames: " + err2.Error())
    oprot.WriteMessageBegin("GetAreaNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetAreaNames", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type foundationServiceProcessorGetChildAreas struct {
  handler FoundationService
}

func (p *foundationServiceProcessorGetChildAreas) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FoundationServiceGetChildAreasArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetChildAreas", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FoundationServiceGetChildAreasResult{}
var retval []*SArea
  var err2 error
  if retval, err2 = p.handler.GetChildAreas(ctx, args.Code); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetChildAreas: " + err2.Error())
    oprot.WriteMessageBegin("GetChildAreas", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetChildAreas", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - URL
type FoundationServiceResourceUrlArgs struct {
  URL string `thrift:"url,1" db:"url" json:"url"`
}

func NewFoundationServiceResourceUrlArgs() *FoundationServiceResourceUrlArgs {
  return &FoundationServiceResourceUrlArgs{}
}


func (p *FoundationServiceResourceUrlArgs) GetURL() string {
  return p.URL
}
func (p *FoundationServiceResourceUrlArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceResourceUrlArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *FoundationServiceResourceUrlArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResourceUrl_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceResourceUrlArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err) }
  return err
}

func (p *FoundationServiceResourceUrlArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceResourceUrlArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceResourceUrlResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceResourceUrlResult() *FoundationServiceResourceUrlResult {
  return &FoundationServiceResourceUrlResult{}
}

var FoundationServiceResourceUrlResult_Success_DEFAULT string
func (p *FoundationServiceResourceUrlResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return FoundationServiceResourceUrlResult_Success_DEFAULT
  }
return *p.Success
}
func (p *FoundationServiceResourceUrlResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FoundationServiceResourceUrlResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceResourceUrlResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *FoundationServiceResourceUrlResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResourceUrl_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceResourceUrlResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FoundationServiceResourceUrlResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceResourceUrlResult(%+v)", *p)
}

type FoundationServiceGetPlatformConfArgs struct {
}

func NewFoundationServiceGetPlatformConfArgs() *FoundationServiceGetPlatformConfArgs {
  return &FoundationServiceGetPlatformConfArgs{}
}

func (p *FoundationServiceGetPlatformConfArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetPlatformConfArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPlatformConf_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetPlatformConfArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetPlatformConfArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetPlatformConfResult struct {
  Success *PlatformConf `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceGetPlatformConfResult() *FoundationServiceGetPlatformConfResult {
  return &FoundationServiceGetPlatformConfResult{}
}

var FoundationServiceGetPlatformConfResult_Success_DEFAULT *PlatformConf
func (p *FoundationServiceGetPlatformConfResult) GetSuccess() *PlatformConf {
  if !p.IsSetSuccess() {
    return FoundationServiceGetPlatformConfResult_Success_DEFAULT
  }
return p.Success
}
func (p *FoundationServiceGetPlatformConfResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FoundationServiceGetPlatformConfResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetPlatformConfResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PlatformConf{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *FoundationServiceGetPlatformConfResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPlatformConf_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetPlatformConfResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FoundationServiceGetPlatformConfResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetPlatformConfResult(%+v)", *p)
}

// Attributes:
//  - Key
type FoundationServiceGetValueArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewFoundationServiceGetValueArgs() *FoundationServiceGetValueArgs {
  return &FoundationServiceGetValueArgs{}
}


func (p *FoundationServiceGetValueArgs) GetKey() string {
  return p.Key
}
func (p *FoundationServiceGetValueArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetValueArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *FoundationServiceGetValueArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *FoundationServiceGetValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetValueResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceGetValueResult() *FoundationServiceGetValueResult {
  return &FoundationServiceGetValueResult{}
}

var FoundationServiceGetValueResult_Success_DEFAULT string
func (p *FoundationServiceGetValueResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return FoundationServiceGetValueResult_Success_DEFAULT
  }
return *p.Success
}
func (p *FoundationServiceGetValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FoundationServiceGetValueResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetValueResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *FoundationServiceGetValueResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetValueResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FoundationServiceGetValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetValueResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type FoundationServiceSetValueArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
  Value string `thrift:"value,2" db:"value" json:"value"`
}

func NewFoundationServiceSetValueArgs() *FoundationServiceSetValueArgs {
  return &FoundationServiceSetValueArgs{}
}


func (p *FoundationServiceSetValueArgs) GetKey() string {
  return p.Key
}

func (p *FoundationServiceSetValueArgs) GetValue() string {
  return p.Value
}
func (p *FoundationServiceSetValueArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceSetValueArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *FoundationServiceSetValueArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *FoundationServiceSetValueArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SetValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceSetValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *FoundationServiceSetValueArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *FoundationServiceSetValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceSetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceSetValueResult struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceSetValueResult() *FoundationServiceSetValueResult {
  return &FoundationServiceSetValueResult{}
}

var FoundationServiceSetValueResult_Success_DEFAULT *Result_
func (p *FoundationServiceSetValueResult) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return FoundationServiceSetValueResult_Success_DEFAULT
  }
return p.Success
}
func (p *FoundationServiceSetValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FoundationServiceSetValueResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceSetValueResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *FoundationServiceSetValueResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SetValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceSetValueResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FoundationServiceSetValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceSetValueResult(%+v)", *p)
}

// Attributes:
//  - Key
type FoundationServiceDeleteValueArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewFoundationServiceDeleteValueArgs() *FoundationServiceDeleteValueArgs {
  return &FoundationServiceDeleteValueArgs{}
}


func (p *FoundationServiceDeleteValueArgs) GetKey() string {
  return p.Key
}
func (p *FoundationServiceDeleteValueArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceDeleteValueArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *FoundationServiceDeleteValueArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceDeleteValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *FoundationServiceDeleteValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceDeleteValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceDeleteValueResult struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceDeleteValueResult() *FoundationServiceDeleteValueResult {
  return &FoundationServiceDeleteValueResult{}
}

var FoundationServiceDeleteValueResult_Success_DEFAULT *Result_
func (p *FoundationServiceDeleteValueResult) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return FoundationServiceDeleteValueResult_Success_DEFAULT
  }
return p.Success
}
func (p *FoundationServiceDeleteValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FoundationServiceDeleteValueResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceDeleteValueResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *FoundationServiceDeleteValueResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceDeleteValueResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FoundationServiceDeleteValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceDeleteValueResult(%+v)", *p)
}

// Attributes:
//  - Keys
type FoundationServiceGetRegistryV1Args struct {
  Keys []string `thrift:"keys,1" db:"keys" json:"keys"`
}

func NewFoundationServiceGetRegistryV1Args() *FoundationServiceGetRegistryV1Args {
  return &FoundationServiceGetRegistryV1Args{}
}


func (p *FoundationServiceGetRegistryV1Args) GetKeys() []string {
  return p.Keys
}
func (p *FoundationServiceGetRegistryV1Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetRegistryV1Args)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem34 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem34 = v
}
    p.Keys = append(p.Keys, _elem34)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FoundationServiceGetRegistryV1Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetRegistryV1_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetRegistryV1Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keys", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keys: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keys: ", p), err) }
  return err
}

func (p *FoundationServiceGetRegistryV1Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetRegistryV1Args(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetRegistryV1Result struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceGetRegistryV1Result() *FoundationServiceGetRegistryV1Result {
  return &FoundationServiceGetRegistryV1Result{}
}

var FoundationServiceGetRegistryV1Result_Success_DEFAULT []string

func (p *FoundationServiceGetRegistryV1Result) GetSuccess() []string {
  return p.Success
}
func (p *FoundationServiceGetRegistryV1Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FoundationServiceGetRegistryV1Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetRegistryV1Result)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem35 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem35 = v
}
    p.Success = append(p.Success, _elem35)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FoundationServiceGetRegistryV1Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetRegistryV1_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetRegistryV1Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FoundationServiceGetRegistryV1Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetRegistryV1Result(%+v)", *p)
}

// Attributes:
//  - Keys
type FoundationServiceGetRegistryMapV1Args struct {
  Keys []string `thrift:"keys,1" db:"keys" json:"keys"`
}

func NewFoundationServiceGetRegistryMapV1Args() *FoundationServiceGetRegistryMapV1Args {
  return &FoundationServiceGetRegistryMapV1Args{}
}


func (p *FoundationServiceGetRegistryMapV1Args) GetKeys() []string {
  return p.Keys
}
func (p *FoundationServiceGetRegistryMapV1Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetRegistryMapV1Args)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem36 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem36 = v
}
    p.Keys = append(p.Keys, _elem36)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FoundationServiceGetRegistryMapV1Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetRegistryMapV1_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetRegistryMapV1Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keys", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keys: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keys: ", p), err) }
  return err
}

func (p *FoundationServiceGetRegistryMapV1Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetRegistryMapV1Args(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetRegistryMapV1Result struct {
  Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceGetRegistryMapV1Result() *FoundationServiceGetRegistryMapV1Result {
  return &FoundationServiceGetRegistryMapV1Result{}
}

var FoundationServiceGetRegistryMapV1Result_Success_DEFAULT map[string]string

func (p *FoundationServiceGetRegistryMapV1Result) GetSuccess() map[string]string {
  return p.Success
}
func (p *FoundationServiceGetRegistryMapV1Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FoundationServiceGetRegistryMapV1Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetRegistryMapV1Result)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key37 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key37 = v
}
var _val38 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val38 = v
}
    p.Success[_key37] = _val38
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *FoundationServiceGetRegistryMapV1Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetRegistryMapV1_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetRegistryMapV1Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FoundationServiceGetRegistryMapV1Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetRegistryMapV1Result(%+v)", *p)
}

// Attributes:
//  - Prefix
type FoundationServiceGetValuesByPrefixArgs struct {
  Prefix string `thrift:"prefix,1" db:"prefix" json:"prefix"`
}

func NewFoundationServiceGetValuesByPrefixArgs() *FoundationServiceGetValuesByPrefixArgs {
  return &FoundationServiceGetValuesByPrefixArgs{}
}


func (p *FoundationServiceGetValuesByPrefixArgs) GetPrefix() string {
  return p.Prefix
}
func (p *FoundationServiceGetValuesByPrefixArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetValuesByPrefixArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Prefix = v
}
  return nil
}

func (p *FoundationServiceGetValuesByPrefixArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetValuesByPrefix_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetValuesByPrefixArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("prefix", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:prefix: ", p), err) }
  if err := oprot.WriteString(string(p.Prefix)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prefix (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:prefix: ", p), err) }
  return err
}

func (p *FoundationServiceGetValuesByPrefixArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetValuesByPrefixArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetValuesByPrefixResult struct {
  Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceGetValuesByPrefixResult() *FoundationServiceGetValuesByPrefixResult {
  return &FoundationServiceGetValuesByPrefixResult{}
}

var FoundationServiceGetValuesByPrefixResult_Success_DEFAULT map[string]string

func (p *FoundationServiceGetValuesByPrefixResult) GetSuccess() map[string]string {
  return p.Success
}
func (p *FoundationServiceGetValuesByPrefixResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FoundationServiceGetValuesByPrefixResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetValuesByPrefixResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key39 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key39 = v
}
var _val40 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val40 = v
}
    p.Success[_key39] = _val40
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *FoundationServiceGetValuesByPrefixResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetValuesByPrefix_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetValuesByPrefixResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FoundationServiceGetValuesByPrefixResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetValuesByPrefixResult(%+v)", *p)
}

// Attributes:
//  - App
type FoundationServiceRegisterAppArgs struct {
  App *SsoApp `thrift:"app,1" db:"app" json:"app"`
}

func NewFoundationServiceRegisterAppArgs() *FoundationServiceRegisterAppArgs {
  return &FoundationServiceRegisterAppArgs{}
}

var FoundationServiceRegisterAppArgs_App_DEFAULT *SsoApp
func (p *FoundationServiceRegisterAppArgs) GetApp() *SsoApp {
  if !p.IsSetApp() {
    return FoundationServiceRegisterAppArgs_App_DEFAULT
  }
return p.App
}
func (p *FoundationServiceRegisterAppArgs) IsSetApp() bool {
  return p.App != nil
}

func (p *FoundationServiceRegisterAppArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceRegisterAppArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.App = &SsoApp{}
  if err := p.App.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.App), err)
  }
  return nil
}

func (p *FoundationServiceRegisterAppArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterApp_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceRegisterAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("app", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app: ", p), err) }
  if err := p.App.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.App), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app: ", p), err) }
  return err
}

func (p *FoundationServiceRegisterAppArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceRegisterAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceRegisterAppResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceRegisterAppResult() *FoundationServiceRegisterAppResult {
  return &FoundationServiceRegisterAppResult{}
}

var FoundationServiceRegisterAppResult_Success_DEFAULT string
func (p *FoundationServiceRegisterAppResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return FoundationServiceRegisterAppResult_Success_DEFAULT
  }
return *p.Success
}
func (p *FoundationServiceRegisterAppResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FoundationServiceRegisterAppResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceRegisterAppResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *FoundationServiceRegisterAppResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterApp_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceRegisterAppResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FoundationServiceRegisterAppResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceRegisterAppResult(%+v)", *p)
}

// Attributes:
//  - Name
type FoundationServiceGetAppArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewFoundationServiceGetAppArgs() *FoundationServiceGetAppArgs {
  return &FoundationServiceGetAppArgs{}
}


func (p *FoundationServiceGetAppArgs) GetName() string {
  return p.Name
}
func (p *FoundationServiceGetAppArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetAppArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *FoundationServiceGetAppArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetApp_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *FoundationServiceGetAppArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetAppResult struct {
  Success *SsoApp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceGetAppResult() *FoundationServiceGetAppResult {
  return &FoundationServiceGetAppResult{}
}

var FoundationServiceGetAppResult_Success_DEFAULT *SsoApp
func (p *FoundationServiceGetAppResult) GetSuccess() *SsoApp {
  if !p.IsSetSuccess() {
    return FoundationServiceGetAppResult_Success_DEFAULT
  }
return p.Success
}
func (p *FoundationServiceGetAppResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FoundationServiceGetAppResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetAppResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SsoApp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *FoundationServiceGetAppResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetApp_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetAppResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FoundationServiceGetAppResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetAppResult(%+v)", *p)
}

type FoundationServiceGetAllSsoAppArgs struct {
}

func NewFoundationServiceGetAllSsoAppArgs() *FoundationServiceGetAllSsoAppArgs {
  return &FoundationServiceGetAllSsoAppArgs{}
}

func (p *FoundationServiceGetAllSsoAppArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetAllSsoAppArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAllSsoApp_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetAllSsoAppArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetAllSsoAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetAllSsoAppResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceGetAllSsoAppResult() *FoundationServiceGetAllSsoAppResult {
  return &FoundationServiceGetAllSsoAppResult{}
}

var FoundationServiceGetAllSsoAppResult_Success_DEFAULT []string

func (p *FoundationServiceGetAllSsoAppResult) GetSuccess() []string {
  return p.Success
}
func (p *FoundationServiceGetAllSsoAppResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FoundationServiceGetAllSsoAppResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetAllSsoAppResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem41 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem41 = v
}
    p.Success = append(p.Success, _elem41)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FoundationServiceGetAllSsoAppResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAllSsoApp_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetAllSsoAppResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FoundationServiceGetAllSsoAppResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetAllSsoAppResult(%+v)", *p)
}

// Attributes:
//  - User
//  - Pwd
type FoundationServiceSuperValidateArgs struct {
  User string `thrift:"user,1" db:"user" json:"user"`
  Pwd string `thrift:"pwd,2" db:"pwd" json:"pwd"`
}

func NewFoundationServiceSuperValidateArgs() *FoundationServiceSuperValidateArgs {
  return &FoundationServiceSuperValidateArgs{}
}


func (p *FoundationServiceSuperValidateArgs) GetUser() string {
  return p.User
}

func (p *FoundationServiceSuperValidateArgs) GetPwd() string {
  return p.Pwd
}
func (p *FoundationServiceSuperValidateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceSuperValidateArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *FoundationServiceSuperValidateArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *FoundationServiceSuperValidateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SuperValidate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceSuperValidateArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := oprot.WriteString(string(p.User)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *FoundationServiceSuperValidateArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err) }
  if err := oprot.WriteString(string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err) }
  return err
}

func (p *FoundationServiceSuperValidateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceSuperValidateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceSuperValidateResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceSuperValidateResult() *FoundationServiceSuperValidateResult {
  return &FoundationServiceSuperValidateResult{}
}

var FoundationServiceSuperValidateResult_Success_DEFAULT bool
func (p *FoundationServiceSuperValidateResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return FoundationServiceSuperValidateResult_Success_DEFAULT
  }
return *p.Success
}
func (p *FoundationServiceSuperValidateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FoundationServiceSuperValidateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceSuperValidateResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *FoundationServiceSuperValidateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SuperValidate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceSuperValidateResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FoundationServiceSuperValidateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceSuperValidateResult(%+v)", *p)
}

// Attributes:
//  - User
//  - Pwd
type FoundationServiceFlushSuperPwdArgs struct {
  User string `thrift:"user,1" db:"user" json:"user"`
  Pwd string `thrift:"pwd,2" db:"pwd" json:"pwd"`
}

func NewFoundationServiceFlushSuperPwdArgs() *FoundationServiceFlushSuperPwdArgs {
  return &FoundationServiceFlushSuperPwdArgs{}
}


func (p *FoundationServiceFlushSuperPwdArgs) GetUser() string {
  return p.User
}

func (p *FoundationServiceFlushSuperPwdArgs) GetPwd() string {
  return p.Pwd
}
func (p *FoundationServiceFlushSuperPwdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceFlushSuperPwdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *FoundationServiceFlushSuperPwdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *FoundationServiceFlushSuperPwdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FlushSuperPwd_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceFlushSuperPwdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := oprot.WriteString(string(p.User)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *FoundationServiceFlushSuperPwdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err) }
  if err := oprot.WriteString(string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err) }
  return err
}

func (p *FoundationServiceFlushSuperPwdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceFlushSuperPwdArgs(%+v)", *p)
}

type FoundationServiceFlushSuperPwdResult struct {
}

func NewFoundationServiceFlushSuperPwdResult() *FoundationServiceFlushSuperPwdResult {
  return &FoundationServiceFlushSuperPwdResult{}
}

func (p *FoundationServiceFlushSuperPwdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceFlushSuperPwdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FlushSuperPwd_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceFlushSuperPwdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceFlushSuperPwdResult(%+v)", *p)
}

// Attributes:
//  - ReturnUrl
type FoundationServiceGetSyncLoginUrlArgs struct {
  ReturnUrl string `thrift:"returnUrl,1" db:"returnUrl" json:"returnUrl"`
}

func NewFoundationServiceGetSyncLoginUrlArgs() *FoundationServiceGetSyncLoginUrlArgs {
  return &FoundationServiceGetSyncLoginUrlArgs{}
}


func (p *FoundationServiceGetSyncLoginUrlArgs) GetReturnUrl() string {
  return p.ReturnUrl
}
func (p *FoundationServiceGetSyncLoginUrlArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetSyncLoginUrlArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReturnUrl = v
}
  return nil
}

func (p *FoundationServiceGetSyncLoginUrlArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetSyncLoginUrl_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetSyncLoginUrlArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("returnUrl", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:returnUrl: ", p), err) }
  if err := oprot.WriteString(string(p.ReturnUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.returnUrl (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:returnUrl: ", p), err) }
  return err
}

func (p *FoundationServiceGetSyncLoginUrlArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetSyncLoginUrlArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetSyncLoginUrlResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceGetSyncLoginUrlResult() *FoundationServiceGetSyncLoginUrlResult {
  return &FoundationServiceGetSyncLoginUrlResult{}
}

var FoundationServiceGetSyncLoginUrlResult_Success_DEFAULT string
func (p *FoundationServiceGetSyncLoginUrlResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return FoundationServiceGetSyncLoginUrlResult_Success_DEFAULT
  }
return *p.Success
}
func (p *FoundationServiceGetSyncLoginUrlResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FoundationServiceGetSyncLoginUrlResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetSyncLoginUrlResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *FoundationServiceGetSyncLoginUrlResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetSyncLoginUrl_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetSyncLoginUrlResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FoundationServiceGetSyncLoginUrlResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetSyncLoginUrlResult(%+v)", *p)
}

// Attributes:
//  - Codes
type FoundationServiceGetAreaNamesArgs struct {
  Codes []int32 `thrift:"codes,1" db:"codes" json:"codes"`
}

func NewFoundationServiceGetAreaNamesArgs() *FoundationServiceGetAreaNamesArgs {
  return &FoundationServiceGetAreaNamesArgs{}
}


func (p *FoundationServiceGetAreaNamesArgs) GetCodes() []int32 {
  return p.Codes
}
func (p *FoundationServiceGetAreaNamesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetAreaNamesArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Codes =  tSlice
  for i := 0; i < size; i ++ {
var _elem42 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem42 = v
}
    p.Codes = append(p.Codes, _elem42)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FoundationServiceGetAreaNamesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAreaNames_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetAreaNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("codes", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:codes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Codes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Codes {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:codes: ", p), err) }
  return err
}

func (p *FoundationServiceGetAreaNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetAreaNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetAreaNamesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceGetAreaNamesResult() *FoundationServiceGetAreaNamesResult {
  return &FoundationServiceGetAreaNamesResult{}
}

var FoundationServiceGetAreaNamesResult_Success_DEFAULT []string

func (p *FoundationServiceGetAreaNamesResult) GetSuccess() []string {
  return p.Success
}
func (p *FoundationServiceGetAreaNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FoundationServiceGetAreaNamesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetAreaNamesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem43 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem43 = v
}
    p.Success = append(p.Success, _elem43)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FoundationServiceGetAreaNamesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAreaNames_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetAreaNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FoundationServiceGetAreaNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetAreaNamesResult(%+v)", *p)
}

// Attributes:
//  - Code
type FoundationServiceGetChildAreasArgs struct {
  Code int32 `thrift:"code,1" db:"code" json:"code"`
}

func NewFoundationServiceGetChildAreasArgs() *FoundationServiceGetChildAreasArgs {
  return &FoundationServiceGetChildAreasArgs{}
}


func (p *FoundationServiceGetChildAreasArgs) GetCode() int32 {
  return p.Code
}
func (p *FoundationServiceGetChildAreasArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetChildAreasArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *FoundationServiceGetChildAreasArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetChildAreas_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetChildAreasArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *FoundationServiceGetChildAreasArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetChildAreasArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetChildAreasResult struct {
  Success []*SArea `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFoundationServiceGetChildAreasResult() *FoundationServiceGetChildAreasResult {
  return &FoundationServiceGetChildAreasResult{}
}

var FoundationServiceGetChildAreasResult_Success_DEFAULT []*SArea

func (p *FoundationServiceGetChildAreasResult) GetSuccess() []*SArea {
  return p.Success
}
func (p *FoundationServiceGetChildAreasResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FoundationServiceGetChildAreasResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FoundationServiceGetChildAreasResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SArea, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem44 := &SArea{}
    if err := _elem44.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem44), err)
    }
    p.Success = append(p.Success, _elem44)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FoundationServiceGetChildAreasResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetChildAreas_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FoundationServiceGetChildAreasResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FoundationServiceGetChildAreasResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FoundationServiceGetChildAreasResult(%+v)", *p)
}



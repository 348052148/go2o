// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package member_service

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"go2o/core/service/thrift/auto_gen/rpc/message_service"
	"go2o/core/service/thrift/auto_gen/rpc/ttype"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = ttype.GoUnusedProtection__
var _ = message_service.GoUnusedProtection__
//凭据
type ECredentials int64
const (
  ECredentials_User       ECredentials = 1
  ECredentials_Code       ECredentials = 2
  ECredentials_Email      ECredentials = 3
  ECredentials_Phone      ECredentials = 4
  ECredentials_InviteCode ECredentials = 6
)

func (p ECredentials) String() string {
  switch p {
  case ECredentials_User: return "User"
  case ECredentials_Code: return "Code"
  case ECredentials_Email: return "Email"
  case ECredentials_Phone: return "Phone"
  case ECredentials_InviteCode: return "InviteCode"
  }
  return "<UNSET>"
}

func ECredentialsFromString(s string) (ECredentials, error) {
  switch s {
  case "User": return ECredentials_User, nil 
  case "Code": return ECredentials_Code, nil 
  case "Email": return ECredentials_Email, nil 
  case "Phone": return ECredentials_Phone, nil 
  case "InviteCode": return ECredentials_InviteCode, nil 
  }
  return ECredentials(0), fmt.Errorf("not a valid ECredentials string")
}


func ECredentialsPtr(v ECredentials) *ECredentials { return &v }

func (p ECredentials) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ECredentials) UnmarshalText(text []byte) error {
q, err := ECredentialsFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ECredentials) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ECredentials(v)
return nil
}

func (p *ECredentials) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// 等级
// 
// Attributes:
//  - ID
//  - Name
//  - RequireExp
//  - ProgramSignal
//  - IsOfficial
//  - Enabled
//  - AllowUpgrade
type SMemberLevel struct {
  ID int32 `thrift:"ID,1" db:"ID" json:"ID"`
  Name string `thrift:"Name,2" db:"Name" json:"Name"`
  RequireExp int32 `thrift:"RequireExp,3" db:"RequireExp" json:"RequireExp"`
  ProgramSignal string `thrift:"ProgramSignal,4" db:"ProgramSignal" json:"ProgramSignal"`
  IsOfficial int32 `thrift:"IsOfficial,5" db:"IsOfficial" json:"IsOfficial"`
  Enabled int32 `thrift:"Enabled,6" db:"Enabled" json:"Enabled"`
  AllowUpgrade int32 `thrift:"AllowUpgrade,7" db:"AllowUpgrade" json:"AllowUpgrade"`
}

func NewSMemberLevel() *SMemberLevel {
  return &SMemberLevel{}
}


func (p *SMemberLevel) GetID() int32 {
  return p.ID
}

func (p *SMemberLevel) GetName() string {
  return p.Name
}

func (p *SMemberLevel) GetRequireExp() int32 {
  return p.RequireExp
}

func (p *SMemberLevel) GetProgramSignal() string {
  return p.ProgramSignal
}

func (p *SMemberLevel) GetIsOfficial() int32 {
  return p.IsOfficial
}

func (p *SMemberLevel) GetEnabled() int32 {
  return p.Enabled
}

func (p *SMemberLevel) GetAllowUpgrade() int32 {
  return p.AllowUpgrade
}
func (p *SMemberLevel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SMemberLevel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *SMemberLevel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *SMemberLevel)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RequireExp = v
}
  return nil
}

func (p *SMemberLevel)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ProgramSignal = v
}
  return nil
}

func (p *SMemberLevel)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IsOfficial = v
}
  return nil
}

func (p *SMemberLevel)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Enabled = v
}
  return nil
}

func (p *SMemberLevel)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.AllowUpgrade = v
}
  return nil
}

func (p *SMemberLevel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SMemberLevel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SMemberLevel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err) }
  return err
}

func (p *SMemberLevel) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Name: ", p), err) }
  return err
}

func (p *SMemberLevel) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("RequireExp", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:RequireExp: ", p), err) }
  if err := oprot.WriteI32(int32(p.RequireExp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.RequireExp (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:RequireExp: ", p), err) }
  return err
}

func (p *SMemberLevel) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ProgramSignal", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ProgramSignal: ", p), err) }
  if err := oprot.WriteString(string(p.ProgramSignal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ProgramSignal (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ProgramSignal: ", p), err) }
  return err
}

func (p *SMemberLevel) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("IsOfficial", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:IsOfficial: ", p), err) }
  if err := oprot.WriteI32(int32(p.IsOfficial)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.IsOfficial (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:IsOfficial: ", p), err) }
  return err
}

func (p *SMemberLevel) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Enabled", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Enabled: ", p), err) }
  if err := oprot.WriteI32(int32(p.Enabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Enabled (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Enabled: ", p), err) }
  return err
}

func (p *SMemberLevel) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("AllowUpgrade", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:AllowUpgrade: ", p), err) }
  if err := oprot.WriteI32(int32(p.AllowUpgrade)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.AllowUpgrade (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:AllowUpgrade: ", p), err) }
  return err
}

func (p *SMemberLevel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SMemberLevel(%+v)", *p)
}

// 会员
// 
// Attributes:
//  - ID
//  - User: 用户名
//  - Pwd
//  - TradePwd
//  - Exp
//  - Level
//  - PremiumUser: 高级用户级别
//  - PremiumExpires: 高级用户过期时间
//  - InviteCode
//  - RegIp
//  - RegFrom
//  - State
//  - Flag: 会员标志
//  - Code
//  - Avatar
//  - Phone
//  - Email
//  - Name: 昵称
//  - RealName: 真实姓名
//  - DynamicToken
//  - RegTime: 注册时间
//  - LastLoginTime: 最后登录时间
type SMember struct {
  ID int64 `thrift:"Id,1" db:"Id" json:"Id"`
  User string `thrift:"User,2" db:"User" json:"User"`
  Pwd string `thrift:"Pwd,3" db:"Pwd" json:"Pwd"`
  TradePwd string `thrift:"TradePwd,4" db:"TradePwd" json:"TradePwd"`
  Exp int64 `thrift:"Exp,5" db:"Exp" json:"Exp"`
  Level int32 `thrift:"Level,6" db:"Level" json:"Level"`
  PremiumUser int32 `thrift:"PremiumUser,7" db:"PremiumUser" json:"PremiumUser"`
  PremiumExpires int64 `thrift:"PremiumExpires,8" db:"PremiumExpires" json:"PremiumExpires"`
  InviteCode string `thrift:"InviteCode,9" db:"InviteCode" json:"InviteCode"`
  RegIp string `thrift:"RegIp,10" db:"RegIp" json:"RegIp"`
  RegFrom string `thrift:"RegFrom,11" db:"RegFrom" json:"RegFrom"`
  State int32 `thrift:"State,12" db:"State" json:"State"`
  Flag int32 `thrift:"Flag,13" db:"Flag" json:"Flag"`
  Code string `thrift:"Code,14" db:"Code" json:"Code"`
  Avatar string `thrift:"Avatar,15" db:"Avatar" json:"Avatar"`
  Phone string `thrift:"Phone,16" db:"Phone" json:"Phone"`
  Email string `thrift:"Email,17" db:"Email" json:"Email"`
  Name string `thrift:"Name,18" db:"Name" json:"Name"`
  RealName string `thrift:"RealName,19" db:"RealName" json:"RealName"`
  DynamicToken string `thrift:"DynamicToken,20" db:"DynamicToken" json:"DynamicToken"`
  RegTime int64 `thrift:"RegTime,21" db:"RegTime" json:"RegTime"`
  LastLoginTime int64 `thrift:"LastLoginTime,22" db:"LastLoginTime" json:"LastLoginTime"`
}

func NewSMember() *SMember {
  return &SMember{}
}


func (p *SMember) GetID() int64 {
  return p.ID
}

func (p *SMember) GetUser() string {
  return p.User
}

func (p *SMember) GetPwd() string {
  return p.Pwd
}

func (p *SMember) GetTradePwd() string {
  return p.TradePwd
}

func (p *SMember) GetExp() int64 {
  return p.Exp
}

func (p *SMember) GetLevel() int32 {
  return p.Level
}

func (p *SMember) GetPremiumUser() int32 {
  return p.PremiumUser
}

func (p *SMember) GetPremiumExpires() int64 {
  return p.PremiumExpires
}

func (p *SMember) GetInviteCode() string {
  return p.InviteCode
}

func (p *SMember) GetRegIp() string {
  return p.RegIp
}

func (p *SMember) GetRegFrom() string {
  return p.RegFrom
}

func (p *SMember) GetState() int32 {
  return p.State
}

func (p *SMember) GetFlag() int32 {
  return p.Flag
}

func (p *SMember) GetCode() string {
  return p.Code
}

func (p *SMember) GetAvatar() string {
  return p.Avatar
}

func (p *SMember) GetPhone() string {
  return p.Phone
}

func (p *SMember) GetEmail() string {
  return p.Email
}

func (p *SMember) GetName() string {
  return p.Name
}

func (p *SMember) GetRealName() string {
  return p.RealName
}

func (p *SMember) GetDynamicToken() string {
  return p.DynamicToken
}

func (p *SMember) GetRegTime() int64 {
  return p.RegTime
}

func (p *SMember) GetLastLoginTime() int64 {
  return p.LastLoginTime
}
func (p *SMember) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SMember)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *SMember)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *SMember)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *SMember)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TradePwd = v
}
  return nil
}

func (p *SMember)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Exp = v
}
  return nil
}

func (p *SMember)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Level = v
}
  return nil
}

func (p *SMember)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.PremiumUser = v
}
  return nil
}

func (p *SMember)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.PremiumExpires = v
}
  return nil
}

func (p *SMember)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.InviteCode = v
}
  return nil
}

func (p *SMember)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.RegIp = v
}
  return nil
}

func (p *SMember)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.RegFrom = v
}
  return nil
}

func (p *SMember)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.State = v
}
  return nil
}

func (p *SMember)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Flag = v
}
  return nil
}

func (p *SMember)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *SMember)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Avatar = v
}
  return nil
}

func (p *SMember)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *SMember)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *SMember)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *SMember)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.RealName = v
}
  return nil
}

func (p *SMember)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.DynamicToken = v
}
  return nil
}

func (p *SMember)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.RegTime = v
}
  return nil
}

func (p *SMember)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.LastLoginTime = v
}
  return nil
}

func (p *SMember) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SMember"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SMember) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Id: ", p), err) }
  return err
}

func (p *SMember) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("User", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:User: ", p), err) }
  if err := oprot.WriteString(string(p.User)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.User (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:User: ", p), err) }
  return err
}

func (p *SMember) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Pwd", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Pwd: ", p), err) }
  if err := oprot.WriteString(string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Pwd (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Pwd: ", p), err) }
  return err
}

func (p *SMember) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TradePwd", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:TradePwd: ", p), err) }
  if err := oprot.WriteString(string(p.TradePwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TradePwd (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:TradePwd: ", p), err) }
  return err
}

func (p *SMember) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Exp", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Exp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Exp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Exp (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Exp: ", p), err) }
  return err
}

func (p *SMember) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Level", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Level: ", p), err) }
  if err := oprot.WriteI32(int32(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Level (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Level: ", p), err) }
  return err
}

func (p *SMember) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PremiumUser", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:PremiumUser: ", p), err) }
  if err := oprot.WriteI32(int32(p.PremiumUser)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PremiumUser (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:PremiumUser: ", p), err) }
  return err
}

func (p *SMember) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PremiumExpires", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:PremiumExpires: ", p), err) }
  if err := oprot.WriteI64(int64(p.PremiumExpires)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PremiumExpires (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:PremiumExpires: ", p), err) }
  return err
}

func (p *SMember) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("InviteCode", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:InviteCode: ", p), err) }
  if err := oprot.WriteString(string(p.InviteCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.InviteCode (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:InviteCode: ", p), err) }
  return err
}

func (p *SMember) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("RegIp", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:RegIp: ", p), err) }
  if err := oprot.WriteString(string(p.RegIp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.RegIp (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:RegIp: ", p), err) }
  return err
}

func (p *SMember) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("RegFrom", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:RegFrom: ", p), err) }
  if err := oprot.WriteString(string(p.RegFrom)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.RegFrom (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:RegFrom: ", p), err) }
  return err
}

func (p *SMember) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("State", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:State: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.State (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:State: ", p), err) }
  return err
}

func (p *SMember) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Flag", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:Flag: ", p), err) }
  if err := oprot.WriteI32(int32(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Flag (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:Flag: ", p), err) }
  return err
}

func (p *SMember) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Code", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:Code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Code (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:Code: ", p), err) }
  return err
}

func (p *SMember) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Avatar", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:Avatar: ", p), err) }
  if err := oprot.WriteString(string(p.Avatar)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Avatar (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:Avatar: ", p), err) }
  return err
}

func (p *SMember) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Phone", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:Phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Phone (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:Phone: ", p), err) }
  return err
}

func (p *SMember) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Email", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:Email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Email (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:Email: ", p), err) }
  return err
}

func (p *SMember) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Name", thrift.STRING, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:Name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Name (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:Name: ", p), err) }
  return err
}

func (p *SMember) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("RealName", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:RealName: ", p), err) }
  if err := oprot.WriteString(string(p.RealName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.RealName (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:RealName: ", p), err) }
  return err
}

func (p *SMember) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("DynamicToken", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:DynamicToken: ", p), err) }
  if err := oprot.WriteString(string(p.DynamicToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.DynamicToken (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:DynamicToken: ", p), err) }
  return err
}

func (p *SMember) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("RegTime", thrift.I64, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:RegTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.RegTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.RegTime (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:RegTime: ", p), err) }
  return err
}

func (p *SMember) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("LastLoginTime", thrift.I64, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:LastLoginTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLoginTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.LastLoginTime (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:LastLoginTime: ", p), err) }
  return err
}

func (p *SMember) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SMember(%+v)", *p)
}

// 资料
// 
// Attributes:
//  - MemberId
//  - Name
//  - Avatar
//  - Sex
//  - BirthDay
//  - Phone
//  - Address
//  - Im
//  - Email
//  - Province
//  - City
//  - District
//  - Remark
//  - Ext1
//  - Ext2
//  - Ext3
//  - Ext4
//  - Ext5
//  - Ext6
//  - UpdateTime
type SProfile struct {
  MemberId int64 `thrift:"MemberId,1" db:"MemberId" json:"MemberId"`
  Name string `thrift:"Name,2" db:"Name" json:"Name"`
  Avatar string `thrift:"Avatar,3" db:"Avatar" json:"Avatar"`
  Sex int32 `thrift:"Sex,4" db:"Sex" json:"Sex"`
  BirthDay string `thrift:"BirthDay,5" db:"BirthDay" json:"BirthDay"`
  Phone string `thrift:"Phone,6" db:"Phone" json:"Phone"`
  Address string `thrift:"Address,7" db:"Address" json:"Address"`
  Im string `thrift:"Im,8" db:"Im" json:"Im"`
  Email string `thrift:"Email,9" db:"Email" json:"Email"`
  Province int32 `thrift:"Province,10" db:"Province" json:"Province"`
  City int32 `thrift:"City,11" db:"City" json:"City"`
  District int32 `thrift:"District,12" db:"District" json:"District"`
  Remark string `thrift:"Remark,13" db:"Remark" json:"Remark"`
  Ext1 string `thrift:"Ext1,14" db:"Ext1" json:"Ext1"`
  Ext2 string `thrift:"Ext2,15" db:"Ext2" json:"Ext2"`
  Ext3 string `thrift:"Ext3,16" db:"Ext3" json:"Ext3"`
  Ext4 string `thrift:"Ext4,17" db:"Ext4" json:"Ext4"`
  Ext5 string `thrift:"Ext5,18" db:"Ext5" json:"Ext5"`
  Ext6 string `thrift:"Ext6,19" db:"Ext6" json:"Ext6"`
  UpdateTime int64 `thrift:"UpdateTime,20" db:"UpdateTime" json:"UpdateTime"`
}

func NewSProfile() *SProfile {
  return &SProfile{}
}


func (p *SProfile) GetMemberId() int64 {
  return p.MemberId
}

func (p *SProfile) GetName() string {
  return p.Name
}

func (p *SProfile) GetAvatar() string {
  return p.Avatar
}

func (p *SProfile) GetSex() int32 {
  return p.Sex
}

func (p *SProfile) GetBirthDay() string {
  return p.BirthDay
}

func (p *SProfile) GetPhone() string {
  return p.Phone
}

func (p *SProfile) GetAddress() string {
  return p.Address
}

func (p *SProfile) GetIm() string {
  return p.Im
}

func (p *SProfile) GetEmail() string {
  return p.Email
}

func (p *SProfile) GetProvince() int32 {
  return p.Province
}

func (p *SProfile) GetCity() int32 {
  return p.City
}

func (p *SProfile) GetDistrict() int32 {
  return p.District
}

func (p *SProfile) GetRemark() string {
  return p.Remark
}

func (p *SProfile) GetExt1() string {
  return p.Ext1
}

func (p *SProfile) GetExt2() string {
  return p.Ext2
}

func (p *SProfile) GetExt3() string {
  return p.Ext3
}

func (p *SProfile) GetExt4() string {
  return p.Ext4
}

func (p *SProfile) GetExt5() string {
  return p.Ext5
}

func (p *SProfile) GetExt6() string {
  return p.Ext6
}

func (p *SProfile) GetUpdateTime() int64 {
  return p.UpdateTime
}
func (p *SProfile) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SProfile)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *SProfile)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *SProfile)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Avatar = v
}
  return nil
}

func (p *SProfile)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Sex = v
}
  return nil
}

func (p *SProfile)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BirthDay = v
}
  return nil
}

func (p *SProfile)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *SProfile)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *SProfile)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Im = v
}
  return nil
}

func (p *SProfile)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *SProfile)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Province = v
}
  return nil
}

func (p *SProfile)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.City = v
}
  return nil
}

func (p *SProfile)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.District = v
}
  return nil
}

func (p *SProfile)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Remark = v
}
  return nil
}

func (p *SProfile)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Ext1 = v
}
  return nil
}

func (p *SProfile)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Ext2 = v
}
  return nil
}

func (p *SProfile)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.Ext3 = v
}
  return nil
}

func (p *SProfile)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.Ext4 = v
}
  return nil
}

func (p *SProfile)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.Ext5 = v
}
  return nil
}

func (p *SProfile)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.Ext6 = v
}
  return nil
}

func (p *SProfile)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.UpdateTime = v
}
  return nil
}

func (p *SProfile) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SProfile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SProfile) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MemberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MemberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MemberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MemberId: ", p), err) }
  return err
}

func (p *SProfile) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Name: ", p), err) }
  return err
}

func (p *SProfile) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Avatar", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Avatar: ", p), err) }
  if err := oprot.WriteString(string(p.Avatar)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Avatar (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Avatar: ", p), err) }
  return err
}

func (p *SProfile) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Sex", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Sex: ", p), err) }
  if err := oprot.WriteI32(int32(p.Sex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Sex (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Sex: ", p), err) }
  return err
}

func (p *SProfile) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BirthDay", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:BirthDay: ", p), err) }
  if err := oprot.WriteString(string(p.BirthDay)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BirthDay (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:BirthDay: ", p), err) }
  return err
}

func (p *SProfile) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Phone", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Phone (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Phone: ", p), err) }
  return err
}

func (p *SProfile) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Address", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Address (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Address: ", p), err) }
  return err
}

func (p *SProfile) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Im", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Im: ", p), err) }
  if err := oprot.WriteString(string(p.Im)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Im (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Im: ", p), err) }
  return err
}

func (p *SProfile) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Email", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:Email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Email (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:Email: ", p), err) }
  return err
}

func (p *SProfile) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Province", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Province: ", p), err) }
  if err := oprot.WriteI32(int32(p.Province)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Province (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Province: ", p), err) }
  return err
}

func (p *SProfile) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("City", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:City: ", p), err) }
  if err := oprot.WriteI32(int32(p.City)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.City (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:City: ", p), err) }
  return err
}

func (p *SProfile) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("District", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:District: ", p), err) }
  if err := oprot.WriteI32(int32(p.District)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.District (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:District: ", p), err) }
  return err
}

func (p *SProfile) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Remark", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:Remark: ", p), err) }
  if err := oprot.WriteString(string(p.Remark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Remark (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:Remark: ", p), err) }
  return err
}

func (p *SProfile) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Ext1", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:Ext1: ", p), err) }
  if err := oprot.WriteString(string(p.Ext1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Ext1 (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:Ext1: ", p), err) }
  return err
}

func (p *SProfile) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Ext2", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:Ext2: ", p), err) }
  if err := oprot.WriteString(string(p.Ext2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Ext2 (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:Ext2: ", p), err) }
  return err
}

func (p *SProfile) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Ext3", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:Ext3: ", p), err) }
  if err := oprot.WriteString(string(p.Ext3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Ext3 (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:Ext3: ", p), err) }
  return err
}

func (p *SProfile) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Ext4", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:Ext4: ", p), err) }
  if err := oprot.WriteString(string(p.Ext4)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Ext4 (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:Ext4: ", p), err) }
  return err
}

func (p *SProfile) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Ext5", thrift.STRING, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:Ext5: ", p), err) }
  if err := oprot.WriteString(string(p.Ext5)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Ext5 (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:Ext5: ", p), err) }
  return err
}

func (p *SProfile) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Ext6", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:Ext6: ", p), err) }
  if err := oprot.WriteString(string(p.Ext6)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Ext6 (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:Ext6: ", p), err) }
  return err
}

func (p *SProfile) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:UpdateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:UpdateTime: ", p), err) }
  return err
}

func (p *SProfile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SProfile(%+v)", *p)
}

// 账户
// 
// Attributes:
//  - MemberId
//  - Integral
//  - FreezeIntegral
//  - Balance
//  - FreezeBalance
//  - ExpiredBalance
//  - WalletBalance
//  - FreezeWallet
//  - ExpiredWallet
//  - TotalWalletAmount
//  - FlowBalance
//  - GrowBalance
//  - GrowAmount
//  - GrowEarnings
//  - GrowTotalEarnings
//  - TotalExpense
//  - TotalCharge
//  - TotalPay
//  - PriorityPay
//  - UpdateTime
type SAccount struct {
  MemberId int64 `thrift:"MemberId,1" db:"MemberId" json:"MemberId"`
  Integral int64 `thrift:"Integral,2" db:"Integral" json:"Integral"`
  FreezeIntegral int64 `thrift:"FreezeIntegral,3" db:"FreezeIntegral" json:"FreezeIntegral"`
  Balance float64 `thrift:"Balance,4" db:"Balance" json:"Balance"`
  FreezeBalance float64 `thrift:"FreezeBalance,5" db:"FreezeBalance" json:"FreezeBalance"`
  ExpiredBalance float64 `thrift:"ExpiredBalance,6" db:"ExpiredBalance" json:"ExpiredBalance"`
  WalletBalance float64 `thrift:"WalletBalance,7" db:"WalletBalance" json:"WalletBalance"`
  FreezeWallet float64 `thrift:"FreezeWallet,8" db:"FreezeWallet" json:"FreezeWallet"`
  ExpiredWallet float64 `thrift:"ExpiredWallet,9" db:"ExpiredWallet" json:"ExpiredWallet"`
  TotalWalletAmount float64 `thrift:"TotalWalletAmount,10" db:"TotalWalletAmount" json:"TotalWalletAmount"`
  FlowBalance float64 `thrift:"FlowBalance,11" db:"FlowBalance" json:"FlowBalance"`
  GrowBalance float64 `thrift:"GrowBalance,12" db:"GrowBalance" json:"GrowBalance"`
  GrowAmount float64 `thrift:"GrowAmount,13" db:"GrowAmount" json:"GrowAmount"`
  GrowEarnings float64 `thrift:"GrowEarnings,14" db:"GrowEarnings" json:"GrowEarnings"`
  GrowTotalEarnings float64 `thrift:"GrowTotalEarnings,15" db:"GrowTotalEarnings" json:"GrowTotalEarnings"`
  TotalExpense float64 `thrift:"TotalExpense,16" db:"TotalExpense" json:"TotalExpense"`
  TotalCharge float64 `thrift:"TotalCharge,17" db:"TotalCharge" json:"TotalCharge"`
  TotalPay float64 `thrift:"TotalPay,18" db:"TotalPay" json:"TotalPay"`
  PriorityPay int64 `thrift:"PriorityPay,19" db:"PriorityPay" json:"PriorityPay"`
  UpdateTime int64 `thrift:"UpdateTime,20" db:"UpdateTime" json:"UpdateTime"`
}

func NewSAccount() *SAccount {
  return &SAccount{}
}


func (p *SAccount) GetMemberId() int64 {
  return p.MemberId
}

func (p *SAccount) GetIntegral() int64 {
  return p.Integral
}

func (p *SAccount) GetFreezeIntegral() int64 {
  return p.FreezeIntegral
}

func (p *SAccount) GetBalance() float64 {
  return p.Balance
}

func (p *SAccount) GetFreezeBalance() float64 {
  return p.FreezeBalance
}

func (p *SAccount) GetExpiredBalance() float64 {
  return p.ExpiredBalance
}

func (p *SAccount) GetWalletBalance() float64 {
  return p.WalletBalance
}

func (p *SAccount) GetFreezeWallet() float64 {
  return p.FreezeWallet
}

func (p *SAccount) GetExpiredWallet() float64 {
  return p.ExpiredWallet
}

func (p *SAccount) GetTotalWalletAmount() float64 {
  return p.TotalWalletAmount
}

func (p *SAccount) GetFlowBalance() float64 {
  return p.FlowBalance
}

func (p *SAccount) GetGrowBalance() float64 {
  return p.GrowBalance
}

func (p *SAccount) GetGrowAmount() float64 {
  return p.GrowAmount
}

func (p *SAccount) GetGrowEarnings() float64 {
  return p.GrowEarnings
}

func (p *SAccount) GetGrowTotalEarnings() float64 {
  return p.GrowTotalEarnings
}

func (p *SAccount) GetTotalExpense() float64 {
  return p.TotalExpense
}

func (p *SAccount) GetTotalCharge() float64 {
  return p.TotalCharge
}

func (p *SAccount) GetTotalPay() float64 {
  return p.TotalPay
}

func (p *SAccount) GetPriorityPay() int64 {
  return p.PriorityPay
}

func (p *SAccount) GetUpdateTime() int64 {
  return p.UpdateTime
}
func (p *SAccount) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SAccount)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *SAccount)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Integral = v
}
  return nil
}

func (p *SAccount)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FreezeIntegral = v
}
  return nil
}

func (p *SAccount)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Balance = v
}
  return nil
}

func (p *SAccount)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FreezeBalance = v
}
  return nil
}

func (p *SAccount)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ExpiredBalance = v
}
  return nil
}

func (p *SAccount)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.WalletBalance = v
}
  return nil
}

func (p *SAccount)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.FreezeWallet = v
}
  return nil
}

func (p *SAccount)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ExpiredWallet = v
}
  return nil
}

func (p *SAccount)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TotalWalletAmount = v
}
  return nil
}

func (p *SAccount)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.FlowBalance = v
}
  return nil
}

func (p *SAccount)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.GrowBalance = v
}
  return nil
}

func (p *SAccount)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.GrowAmount = v
}
  return nil
}

func (p *SAccount)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.GrowEarnings = v
}
  return nil
}

func (p *SAccount)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.GrowTotalEarnings = v
}
  return nil
}

func (p *SAccount)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.TotalExpense = v
}
  return nil
}

func (p *SAccount)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.TotalCharge = v
}
  return nil
}

func (p *SAccount)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.TotalPay = v
}
  return nil
}

func (p *SAccount)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.PriorityPay = v
}
  return nil
}

func (p *SAccount)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.UpdateTime = v
}
  return nil
}

func (p *SAccount) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SAccount"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SAccount) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MemberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MemberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MemberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MemberId: ", p), err) }
  return err
}

func (p *SAccount) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Integral", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Integral: ", p), err) }
  if err := oprot.WriteI64(int64(p.Integral)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Integral (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Integral: ", p), err) }
  return err
}

func (p *SAccount) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("FreezeIntegral", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:FreezeIntegral: ", p), err) }
  if err := oprot.WriteI64(int64(p.FreezeIntegral)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.FreezeIntegral (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:FreezeIntegral: ", p), err) }
  return err
}

func (p *SAccount) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Balance", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Balance: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Balance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Balance (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Balance: ", p), err) }
  return err
}

func (p *SAccount) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("FreezeBalance", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:FreezeBalance: ", p), err) }
  if err := oprot.WriteDouble(float64(p.FreezeBalance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.FreezeBalance (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:FreezeBalance: ", p), err) }
  return err
}

func (p *SAccount) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ExpiredBalance", thrift.DOUBLE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ExpiredBalance: ", p), err) }
  if err := oprot.WriteDouble(float64(p.ExpiredBalance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ExpiredBalance (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ExpiredBalance: ", p), err) }
  return err
}

func (p *SAccount) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("WalletBalance", thrift.DOUBLE, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:WalletBalance: ", p), err) }
  if err := oprot.WriteDouble(float64(p.WalletBalance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.WalletBalance (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:WalletBalance: ", p), err) }
  return err
}

func (p *SAccount) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("FreezeWallet", thrift.DOUBLE, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:FreezeWallet: ", p), err) }
  if err := oprot.WriteDouble(float64(p.FreezeWallet)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.FreezeWallet (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:FreezeWallet: ", p), err) }
  return err
}

func (p *SAccount) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ExpiredWallet", thrift.DOUBLE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ExpiredWallet: ", p), err) }
  if err := oprot.WriteDouble(float64(p.ExpiredWallet)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ExpiredWallet (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ExpiredWallet: ", p), err) }
  return err
}

func (p *SAccount) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TotalWalletAmount", thrift.DOUBLE, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:TotalWalletAmount: ", p), err) }
  if err := oprot.WriteDouble(float64(p.TotalWalletAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TotalWalletAmount (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:TotalWalletAmount: ", p), err) }
  return err
}

func (p *SAccount) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("FlowBalance", thrift.DOUBLE, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:FlowBalance: ", p), err) }
  if err := oprot.WriteDouble(float64(p.FlowBalance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.FlowBalance (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:FlowBalance: ", p), err) }
  return err
}

func (p *SAccount) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("GrowBalance", thrift.DOUBLE, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:GrowBalance: ", p), err) }
  if err := oprot.WriteDouble(float64(p.GrowBalance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.GrowBalance (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:GrowBalance: ", p), err) }
  return err
}

func (p *SAccount) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("GrowAmount", thrift.DOUBLE, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:GrowAmount: ", p), err) }
  if err := oprot.WriteDouble(float64(p.GrowAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.GrowAmount (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:GrowAmount: ", p), err) }
  return err
}

func (p *SAccount) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("GrowEarnings", thrift.DOUBLE, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:GrowEarnings: ", p), err) }
  if err := oprot.WriteDouble(float64(p.GrowEarnings)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.GrowEarnings (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:GrowEarnings: ", p), err) }
  return err
}

func (p *SAccount) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("GrowTotalEarnings", thrift.DOUBLE, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:GrowTotalEarnings: ", p), err) }
  if err := oprot.WriteDouble(float64(p.GrowTotalEarnings)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.GrowTotalEarnings (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:GrowTotalEarnings: ", p), err) }
  return err
}

func (p *SAccount) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TotalExpense", thrift.DOUBLE, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:TotalExpense: ", p), err) }
  if err := oprot.WriteDouble(float64(p.TotalExpense)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TotalExpense (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:TotalExpense: ", p), err) }
  return err
}

func (p *SAccount) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TotalCharge", thrift.DOUBLE, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:TotalCharge: ", p), err) }
  if err := oprot.WriteDouble(float64(p.TotalCharge)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TotalCharge (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:TotalCharge: ", p), err) }
  return err
}

func (p *SAccount) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TotalPay", thrift.DOUBLE, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:TotalPay: ", p), err) }
  if err := oprot.WriteDouble(float64(p.TotalPay)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TotalPay (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:TotalPay: ", p), err) }
  return err
}

func (p *SAccount) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PriorityPay", thrift.I64, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:PriorityPay: ", p), err) }
  if err := oprot.WriteI64(int64(p.PriorityPay)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PriorityPay (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:PriorityPay: ", p), err) }
  return err
}

func (p *SAccount) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:UpdateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:UpdateTime: ", p), err) }
  return err
}

func (p *SAccount) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SAccount(%+v)", *p)
}

// Attributes:
//  - Name
//  - Avatar
//  - Phone
//  - Exp
//  - Level
//  - LevelName
//  - InviteCode
//  - TrustAuthState
//  - PremiumUser
//  - Flag
//  - UpdateTime
//  - TradePwdHasSet: 交易密码是否已设置
type SComplexMember struct {
  Name string `thrift:"Name,1" db:"Name" json:"Name"`
  Avatar string `thrift:"Avatar,2" db:"Avatar" json:"Avatar"`
  Phone string `thrift:"Phone,3" db:"Phone" json:"Phone"`
  Exp int32 `thrift:"Exp,4" db:"Exp" json:"Exp"`
  Level int32 `thrift:"Level,5" db:"Level" json:"Level"`
  LevelName string `thrift:"LevelName,6" db:"LevelName" json:"LevelName"`
  InviteCode string `thrift:"InviteCode,7" db:"InviteCode" json:"InviteCode"`
  TrustAuthState int32 `thrift:"TrustAuthState,8" db:"TrustAuthState" json:"TrustAuthState"`
  PremiumUser int32 `thrift:"PremiumUser,9" db:"PremiumUser" json:"PremiumUser"`
  Flag int32 `thrift:"Flag,10" db:"Flag" json:"Flag"`
  UpdateTime int64 `thrift:"UpdateTime,11" db:"UpdateTime" json:"UpdateTime"`
  TradePwdHasSet bool `thrift:"TradePwdHasSet,12" db:"TradePwdHasSet" json:"TradePwdHasSet"`
}

func NewSComplexMember() *SComplexMember {
  return &SComplexMember{}
}


func (p *SComplexMember) GetName() string {
  return p.Name
}

func (p *SComplexMember) GetAvatar() string {
  return p.Avatar
}

func (p *SComplexMember) GetPhone() string {
  return p.Phone
}

func (p *SComplexMember) GetExp() int32 {
  return p.Exp
}

func (p *SComplexMember) GetLevel() int32 {
  return p.Level
}

func (p *SComplexMember) GetLevelName() string {
  return p.LevelName
}

func (p *SComplexMember) GetInviteCode() string {
  return p.InviteCode
}

func (p *SComplexMember) GetTrustAuthState() int32 {
  return p.TrustAuthState
}

func (p *SComplexMember) GetPremiumUser() int32 {
  return p.PremiumUser
}

func (p *SComplexMember) GetFlag() int32 {
  return p.Flag
}

func (p *SComplexMember) GetUpdateTime() int64 {
  return p.UpdateTime
}

func (p *SComplexMember) GetTradePwdHasSet() bool {
  return p.TradePwdHasSet
}
func (p *SComplexMember) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SComplexMember)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *SComplexMember)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Avatar = v
}
  return nil
}

func (p *SComplexMember)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *SComplexMember)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Exp = v
}
  return nil
}

func (p *SComplexMember)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Level = v
}
  return nil
}

func (p *SComplexMember)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LevelName = v
}
  return nil
}

func (p *SComplexMember)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.InviteCode = v
}
  return nil
}

func (p *SComplexMember)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.TrustAuthState = v
}
  return nil
}

func (p *SComplexMember)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.PremiumUser = v
}
  return nil
}

func (p *SComplexMember)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Flag = v
}
  return nil
}

func (p *SComplexMember)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.UpdateTime = v
}
  return nil
}

func (p *SComplexMember)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.TradePwdHasSet = v
}
  return nil
}

func (p *SComplexMember) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SComplexMember"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SComplexMember) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Name: ", p), err) }
  return err
}

func (p *SComplexMember) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Avatar", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Avatar: ", p), err) }
  if err := oprot.WriteString(string(p.Avatar)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Avatar (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Avatar: ", p), err) }
  return err
}

func (p *SComplexMember) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Phone", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Phone (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Phone: ", p), err) }
  return err
}

func (p *SComplexMember) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Exp", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Exp: ", p), err) }
  if err := oprot.WriteI32(int32(p.Exp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Exp (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Exp: ", p), err) }
  return err
}

func (p *SComplexMember) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Level", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Level: ", p), err) }
  if err := oprot.WriteI32(int32(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Level (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Level: ", p), err) }
  return err
}

func (p *SComplexMember) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("LevelName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:LevelName: ", p), err) }
  if err := oprot.WriteString(string(p.LevelName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.LevelName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:LevelName: ", p), err) }
  return err
}

func (p *SComplexMember) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("InviteCode", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:InviteCode: ", p), err) }
  if err := oprot.WriteString(string(p.InviteCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.InviteCode (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:InviteCode: ", p), err) }
  return err
}

func (p *SComplexMember) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TrustAuthState", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:TrustAuthState: ", p), err) }
  if err := oprot.WriteI32(int32(p.TrustAuthState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TrustAuthState (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:TrustAuthState: ", p), err) }
  return err
}

func (p *SComplexMember) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PremiumUser", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:PremiumUser: ", p), err) }
  if err := oprot.WriteI32(int32(p.PremiumUser)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PremiumUser (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:PremiumUser: ", p), err) }
  return err
}

func (p *SComplexMember) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Flag", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Flag: ", p), err) }
  if err := oprot.WriteI32(int32(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Flag (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Flag: ", p), err) }
  return err
}

func (p *SComplexMember) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:UpdateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:UpdateTime: ", p), err) }
  return err
}

func (p *SComplexMember) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TradePwdHasSet", thrift.BOOL, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:TradePwdHasSet: ", p), err) }
  if err := oprot.WriteBool(bool(p.TradePwdHasSet)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TradePwdHasSet (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:TradePwdHasSet: ", p), err) }
  return err
}

func (p *SComplexMember) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SComplexMember(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - CardId
//  - InviterId
//  - InviterStr
//  - RegisterMchId
type SMemberRelation struct {
  MemberId int64 `thrift:"MemberId,1" db:"MemberId" json:"MemberId"`
  CardId string `thrift:"CardId,2" db:"CardId" json:"CardId"`
  InviterId int64 `thrift:"InviterId,3" db:"InviterId" json:"InviterId"`
  InviterStr string `thrift:"InviterStr,4" db:"InviterStr" json:"InviterStr"`
  RegisterMchId int32 `thrift:"RegisterMchId,5" db:"RegisterMchId" json:"RegisterMchId"`
}

func NewSMemberRelation() *SMemberRelation {
  return &SMemberRelation{}
}


func (p *SMemberRelation) GetMemberId() int64 {
  return p.MemberId
}

func (p *SMemberRelation) GetCardId() string {
  return p.CardId
}

func (p *SMemberRelation) GetInviterId() int64 {
  return p.InviterId
}

func (p *SMemberRelation) GetInviterStr() string {
  return p.InviterStr
}

func (p *SMemberRelation) GetRegisterMchId() int32 {
  return p.RegisterMchId
}
func (p *SMemberRelation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SMemberRelation)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *SMemberRelation)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CardId = v
}
  return nil
}

func (p *SMemberRelation)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.InviterId = v
}
  return nil
}

func (p *SMemberRelation)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.InviterStr = v
}
  return nil
}

func (p *SMemberRelation)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RegisterMchId = v
}
  return nil
}

func (p *SMemberRelation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SMemberRelation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SMemberRelation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MemberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MemberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MemberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MemberId: ", p), err) }
  return err
}

func (p *SMemberRelation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CardId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:CardId: ", p), err) }
  if err := oprot.WriteString(string(p.CardId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CardId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:CardId: ", p), err) }
  return err
}

func (p *SMemberRelation) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("InviterId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:InviterId: ", p), err) }
  if err := oprot.WriteI64(int64(p.InviterId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.InviterId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:InviterId: ", p), err) }
  return err
}

func (p *SMemberRelation) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("InviterStr", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:InviterStr: ", p), err) }
  if err := oprot.WriteString(string(p.InviterStr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.InviterStr (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:InviterStr: ", p), err) }
  return err
}

func (p *SMemberRelation) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("RegisterMchId", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:RegisterMchId: ", p), err) }
  if err := oprot.WriteI32(int32(p.RegisterMchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.RegisterMchId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:RegisterMchId: ", p), err) }
  return err
}

func (p *SMemberRelation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SMemberRelation(%+v)", *p)
}

// 实名认证信息
// 
// Attributes:
//  - RealName: 真实姓名
//  - CountryCode: 国家代码,如:CN
//  - CardType: 证件类型
//  - CardId: 证件号码
//  - CardImage: 证件正面照
//  - CardReverseImage: 证件反面照
//  - TrustImage: 认证人脸照
//  - ManualReview: 是否人工审核
//  - ReviewState: 审核状态
//  - ReviewTime: 审核时间
//  - Remark: 备注
type STrustedInfo struct {
  RealName string `thrift:"RealName,1" db:"RealName" json:"RealName"`
  CountryCode string `thrift:"CountryCode,2" db:"CountryCode" json:"CountryCode"`
  CardType int32 `thrift:"CardType,3" db:"CardType" json:"CardType"`
  CardId string `thrift:"CardId,4" db:"CardId" json:"CardId"`
  CardImage string `thrift:"CardImage,5" db:"CardImage" json:"CardImage"`
  CardReverseImage string `thrift:"CardReverseImage,6" db:"CardReverseImage" json:"CardReverseImage"`
  TrustImage string `thrift:"TrustImage,7" db:"TrustImage" json:"TrustImage"`
  ManualReview int32 `thrift:"ManualReview,8" db:"ManualReview" json:"ManualReview"`
  ReviewState int32 `thrift:"ReviewState,9" db:"ReviewState" json:"ReviewState"`
  ReviewTime int64 `thrift:"ReviewTime,10" db:"ReviewTime" json:"ReviewTime"`
  Remark string `thrift:"Remark,11" db:"Remark" json:"Remark"`
}

func NewSTrustedInfo() *STrustedInfo {
  return &STrustedInfo{}
}


func (p *STrustedInfo) GetRealName() string {
  return p.RealName
}

func (p *STrustedInfo) GetCountryCode() string {
  return p.CountryCode
}

func (p *STrustedInfo) GetCardType() int32 {
  return p.CardType
}

func (p *STrustedInfo) GetCardId() string {
  return p.CardId
}

func (p *STrustedInfo) GetCardImage() string {
  return p.CardImage
}

func (p *STrustedInfo) GetCardReverseImage() string {
  return p.CardReverseImage
}

func (p *STrustedInfo) GetTrustImage() string {
  return p.TrustImage
}

func (p *STrustedInfo) GetManualReview() int32 {
  return p.ManualReview
}

func (p *STrustedInfo) GetReviewState() int32 {
  return p.ReviewState
}

func (p *STrustedInfo) GetReviewTime() int64 {
  return p.ReviewTime
}

func (p *STrustedInfo) GetRemark() string {
  return p.Remark
}
func (p *STrustedInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *STrustedInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RealName = v
}
  return nil
}

func (p *STrustedInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CountryCode = v
}
  return nil
}

func (p *STrustedInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CardType = v
}
  return nil
}

func (p *STrustedInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CardId = v
}
  return nil
}

func (p *STrustedInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CardImage = v
}
  return nil
}

func (p *STrustedInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CardReverseImage = v
}
  return nil
}

func (p *STrustedInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TrustImage = v
}
  return nil
}

func (p *STrustedInfo)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ManualReview = v
}
  return nil
}

func (p *STrustedInfo)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ReviewState = v
}
  return nil
}

func (p *STrustedInfo)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ReviewTime = v
}
  return nil
}

func (p *STrustedInfo)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Remark = v
}
  return nil
}

func (p *STrustedInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("STrustedInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *STrustedInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("RealName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:RealName: ", p), err) }
  if err := oprot.WriteString(string(p.RealName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.RealName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:RealName: ", p), err) }
  return err
}

func (p *STrustedInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CountryCode", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:CountryCode: ", p), err) }
  if err := oprot.WriteString(string(p.CountryCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CountryCode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:CountryCode: ", p), err) }
  return err
}

func (p *STrustedInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CardType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:CardType: ", p), err) }
  if err := oprot.WriteI32(int32(p.CardType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CardType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:CardType: ", p), err) }
  return err
}

func (p *STrustedInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CardId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:CardId: ", p), err) }
  if err := oprot.WriteString(string(p.CardId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CardId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:CardId: ", p), err) }
  return err
}

func (p *STrustedInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CardImage", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:CardImage: ", p), err) }
  if err := oprot.WriteString(string(p.CardImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CardImage (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:CardImage: ", p), err) }
  return err
}

func (p *STrustedInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CardReverseImage", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:CardReverseImage: ", p), err) }
  if err := oprot.WriteString(string(p.CardReverseImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CardReverseImage (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:CardReverseImage: ", p), err) }
  return err
}

func (p *STrustedInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TrustImage", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:TrustImage: ", p), err) }
  if err := oprot.WriteString(string(p.TrustImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TrustImage (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:TrustImage: ", p), err) }
  return err
}

func (p *STrustedInfo) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ManualReview", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:ManualReview: ", p), err) }
  if err := oprot.WriteI32(int32(p.ManualReview)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ManualReview (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:ManualReview: ", p), err) }
  return err
}

func (p *STrustedInfo) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ReviewState", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ReviewState: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReviewState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ReviewState (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ReviewState: ", p), err) }
  return err
}

func (p *STrustedInfo) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ReviewTime", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:ReviewTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReviewTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ReviewTime (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:ReviewTime: ", p), err) }
  return err
}

func (p *STrustedInfo) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Remark", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:Remark: ", p), err) }
  if err := oprot.WriteString(string(p.Remark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Remark (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:Remark: ", p), err) }
  return err
}

func (p *STrustedInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("STrustedInfo(%+v)", *p)
}

// Attributes:
//  - ID
//  - ConsigneeName: 收货人姓名
//  - ConsigneePhone: 收货人电话
//  - Province
//  - City
//  - District
//  - Area
//  - DetailAddress
//  - IsDefault
type SAddress struct {
  ID int64 `thrift:"ID,1" db:"ID" json:"ID"`
  ConsigneeName string `thrift:"ConsigneeName,2" db:"ConsigneeName" json:"ConsigneeName"`
  ConsigneePhone string `thrift:"ConsigneePhone,3" db:"ConsigneePhone" json:"ConsigneePhone"`
  Province int32 `thrift:"Province,4" db:"Province" json:"Province"`
  City int32 `thrift:"City,5" db:"City" json:"City"`
  District int32 `thrift:"District,6" db:"District" json:"District"`
  Area string `thrift:"Area,7" db:"Area" json:"Area"`
  DetailAddress string `thrift:"DetailAddress,8" db:"DetailAddress" json:"DetailAddress"`
  IsDefault int32 `thrift:"IsDefault,9" db:"IsDefault" json:"IsDefault"`
}

func NewSAddress() *SAddress {
  return &SAddress{}
}


func (p *SAddress) GetID() int64 {
  return p.ID
}

func (p *SAddress) GetConsigneeName() string {
  return p.ConsigneeName
}

func (p *SAddress) GetConsigneePhone() string {
  return p.ConsigneePhone
}

func (p *SAddress) GetProvince() int32 {
  return p.Province
}

func (p *SAddress) GetCity() int32 {
  return p.City
}

func (p *SAddress) GetDistrict() int32 {
  return p.District
}

func (p *SAddress) GetArea() string {
  return p.Area
}

func (p *SAddress) GetDetailAddress() string {
  return p.DetailAddress
}

func (p *SAddress) GetIsDefault() int32 {
  return p.IsDefault
}
func (p *SAddress) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SAddress)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *SAddress)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsigneeName = v
}
  return nil
}

func (p *SAddress)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ConsigneePhone = v
}
  return nil
}

func (p *SAddress)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Province = v
}
  return nil
}

func (p *SAddress)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.City = v
}
  return nil
}

func (p *SAddress)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.District = v
}
  return nil
}

func (p *SAddress)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Area = v
}
  return nil
}

func (p *SAddress)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.DetailAddress = v
}
  return nil
}

func (p *SAddress)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.IsDefault = v
}
  return nil
}

func (p *SAddress) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SAddress"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SAddress) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err) }
  return err
}

func (p *SAddress) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ConsigneeName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ConsigneeName: ", p), err) }
  if err := oprot.WriteString(string(p.ConsigneeName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ConsigneeName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ConsigneeName: ", p), err) }
  return err
}

func (p *SAddress) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ConsigneePhone", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ConsigneePhone: ", p), err) }
  if err := oprot.WriteString(string(p.ConsigneePhone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ConsigneePhone (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ConsigneePhone: ", p), err) }
  return err
}

func (p *SAddress) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Province", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Province: ", p), err) }
  if err := oprot.WriteI32(int32(p.Province)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Province (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Province: ", p), err) }
  return err
}

func (p *SAddress) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("City", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:City: ", p), err) }
  if err := oprot.WriteI32(int32(p.City)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.City (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:City: ", p), err) }
  return err
}

func (p *SAddress) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("District", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:District: ", p), err) }
  if err := oprot.WriteI32(int32(p.District)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.District (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:District: ", p), err) }
  return err
}

func (p *SAddress) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Area", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Area: ", p), err) }
  if err := oprot.WriteString(string(p.Area)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Area (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Area: ", p), err) }
  return err
}

func (p *SAddress) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("DetailAddress", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:DetailAddress: ", p), err) }
  if err := oprot.WriteString(string(p.DetailAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.DetailAddress (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:DetailAddress: ", p), err) }
  return err
}

func (p *SAddress) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("IsDefault", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:IsDefault: ", p), err) }
  if err := oprot.WriteI32(int32(p.IsDefault)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.IsDefault (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:IsDefault: ", p), err) }
  return err
}

func (p *SAddress) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SAddress(%+v)", *p)
}

// 收款码
// 
// Attributes:
//  - Identity: 账户标识,如:alipay
//  - Name: 账户名称
//  - AccountId: 账号
//  - CodeUrl: 收款码地址
//  - State: 是否启用
type SReceiptsCode struct {
  Identity string `thrift:"Identity,1" db:"Identity" json:"Identity"`
  Name string `thrift:"Name,2" db:"Name" json:"Name"`
  AccountId string `thrift:"AccountId,3" db:"AccountId" json:"AccountId"`
  CodeUrl string `thrift:"CodeUrl,4" db:"CodeUrl" json:"CodeUrl"`
  State int32 `thrift:"State,5" db:"State" json:"State"`
}

func NewSReceiptsCode() *SReceiptsCode {
  return &SReceiptsCode{}
}


func (p *SReceiptsCode) GetIdentity() string {
  return p.Identity
}

func (p *SReceiptsCode) GetName() string {
  return p.Name
}

func (p *SReceiptsCode) GetAccountId() string {
  return p.AccountId
}

func (p *SReceiptsCode) GetCodeUrl() string {
  return p.CodeUrl
}

func (p *SReceiptsCode) GetState() int32 {
  return p.State
}
func (p *SReceiptsCode) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SReceiptsCode)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Identity = v
}
  return nil
}

func (p *SReceiptsCode)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *SReceiptsCode)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AccountId = v
}
  return nil
}

func (p *SReceiptsCode)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CodeUrl = v
}
  return nil
}

func (p *SReceiptsCode)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.State = v
}
  return nil
}

func (p *SReceiptsCode) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SReceiptsCode"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SReceiptsCode) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Identity", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Identity: ", p), err) }
  if err := oprot.WriteString(string(p.Identity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Identity (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Identity: ", p), err) }
  return err
}

func (p *SReceiptsCode) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Name: ", p), err) }
  return err
}

func (p *SReceiptsCode) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("AccountId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:AccountId: ", p), err) }
  if err := oprot.WriteString(string(p.AccountId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.AccountId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:AccountId: ", p), err) }
  return err
}

func (p *SReceiptsCode) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CodeUrl", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:CodeUrl: ", p), err) }
  if err := oprot.WriteString(string(p.CodeUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CodeUrl (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:CodeUrl: ", p), err) }
  return err
}

func (p *SReceiptsCode) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("State", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:State: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.State (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:State: ", p), err) }
  return err
}

func (p *SReceiptsCode) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SReceiptsCode(%+v)", *p)
}

// 会员银行卡
// 
// Attributes:
//  - ID: 编号
//  - BankName: 银行名称
//  - AccountName: 账户名
//  - Account: 账号
//  - Network: 网点名称
//  - State: 状态
type SBankcard struct {
  ID int64 `thrift:"Id,1" db:"Id" json:"Id"`
  BankName string `thrift:"BankName,2" db:"BankName" json:"BankName"`
  AccountName string `thrift:"AccountName,3" db:"AccountName" json:"AccountName"`
  Account string `thrift:"Account,4" db:"Account" json:"Account"`
  Network string `thrift:"Network,5" db:"Network" json:"Network"`
  State int32 `thrift:"State,6" db:"State" json:"State"`
}

func NewSBankcard() *SBankcard {
  return &SBankcard{}
}


func (p *SBankcard) GetID() int64 {
  return p.ID
}

func (p *SBankcard) GetBankName() string {
  return p.BankName
}

func (p *SBankcard) GetAccountName() string {
  return p.AccountName
}

func (p *SBankcard) GetAccount() string {
  return p.Account
}

func (p *SBankcard) GetNetwork() string {
  return p.Network
}

func (p *SBankcard) GetState() int32 {
  return p.State
}
func (p *SBankcard) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SBankcard)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *SBankcard)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BankName = v
}
  return nil
}

func (p *SBankcard)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AccountName = v
}
  return nil
}

func (p *SBankcard)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *SBankcard)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Network = v
}
  return nil
}

func (p *SBankcard)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.State = v
}
  return nil
}

func (p *SBankcard) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SBankcard"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SBankcard) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Id: ", p), err) }
  return err
}

func (p *SBankcard) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BankName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:BankName: ", p), err) }
  if err := oprot.WriteString(string(p.BankName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BankName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:BankName: ", p), err) }
  return err
}

func (p *SBankcard) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("AccountName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:AccountName: ", p), err) }
  if err := oprot.WriteString(string(p.AccountName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.AccountName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:AccountName: ", p), err) }
  return err
}

func (p *SBankcard) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Account", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Account (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Account: ", p), err) }
  return err
}

func (p *SBankcard) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Network", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Network: ", p), err) }
  if err := oprot.WriteString(string(p.Network)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Network (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Network: ", p), err) }
  return err
}

func (p *SBankcard) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("State", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:State: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.State (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:State: ", p), err) }
  return err
}

func (p *SBankcard) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SBankcard(%+v)", *p)
}

// Attributes:
//  - Level: 等级
//  - LevelName: 等级名称
//  - Exp: 经验值
//  - ProgramSignal: 编程符号
//  - NextLevel: 下一级等级,返回-1表示最高级别
//  - NextLevelName: 下一等级名称
//  - NextProgramSignal: 编程符号
//  - RequireExp: 需要经验值
type SMemberLevelInfo struct {
  Level int32 `thrift:"Level,1" db:"Level" json:"Level"`
  LevelName string `thrift:"LevelName,2" db:"LevelName" json:"LevelName"`
  Exp int32 `thrift:"Exp,3" db:"Exp" json:"Exp"`
  ProgramSignal string `thrift:"ProgramSignal,4" db:"ProgramSignal" json:"ProgramSignal"`
  NextLevel int32 `thrift:"NextLevel,5" db:"NextLevel" json:"NextLevel"`
  NextLevelName string `thrift:"NextLevelName,6" db:"NextLevelName" json:"NextLevelName"`
  NextProgramSignal string `thrift:"NextProgramSignal,7" db:"NextProgramSignal" json:"NextProgramSignal"`
  RequireExp int32 `thrift:"RequireExp,8" db:"RequireExp" json:"RequireExp"`
}

func NewSMemberLevelInfo() *SMemberLevelInfo {
  return &SMemberLevelInfo{}
}


func (p *SMemberLevelInfo) GetLevel() int32 {
  return p.Level
}

func (p *SMemberLevelInfo) GetLevelName() string {
  return p.LevelName
}

func (p *SMemberLevelInfo) GetExp() int32 {
  return p.Exp
}

func (p *SMemberLevelInfo) GetProgramSignal() string {
  return p.ProgramSignal
}

func (p *SMemberLevelInfo) GetNextLevel() int32 {
  return p.NextLevel
}

func (p *SMemberLevelInfo) GetNextLevelName() string {
  return p.NextLevelName
}

func (p *SMemberLevelInfo) GetNextProgramSignal() string {
  return p.NextProgramSignal
}

func (p *SMemberLevelInfo) GetRequireExp() int32 {
  return p.RequireExp
}
func (p *SMemberLevelInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SMemberLevelInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Level = v
}
  return nil
}

func (p *SMemberLevelInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LevelName = v
}
  return nil
}

func (p *SMemberLevelInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Exp = v
}
  return nil
}

func (p *SMemberLevelInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ProgramSignal = v
}
  return nil
}

func (p *SMemberLevelInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NextLevel = v
}
  return nil
}

func (p *SMemberLevelInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NextLevelName = v
}
  return nil
}

func (p *SMemberLevelInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NextProgramSignal = v
}
  return nil
}

func (p *SMemberLevelInfo)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.RequireExp = v
}
  return nil
}

func (p *SMemberLevelInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SMemberLevelInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SMemberLevelInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Level", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Level: ", p), err) }
  if err := oprot.WriteI32(int32(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Level (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Level: ", p), err) }
  return err
}

func (p *SMemberLevelInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("LevelName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:LevelName: ", p), err) }
  if err := oprot.WriteString(string(p.LevelName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.LevelName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:LevelName: ", p), err) }
  return err
}

func (p *SMemberLevelInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Exp", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Exp: ", p), err) }
  if err := oprot.WriteI32(int32(p.Exp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Exp (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Exp: ", p), err) }
  return err
}

func (p *SMemberLevelInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ProgramSignal", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ProgramSignal: ", p), err) }
  if err := oprot.WriteString(string(p.ProgramSignal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ProgramSignal (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ProgramSignal: ", p), err) }
  return err
}

func (p *SMemberLevelInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("NextLevel", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:NextLevel: ", p), err) }
  if err := oprot.WriteI32(int32(p.NextLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.NextLevel (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:NextLevel: ", p), err) }
  return err
}

func (p *SMemberLevelInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("NextLevelName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:NextLevelName: ", p), err) }
  if err := oprot.WriteString(string(p.NextLevelName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.NextLevelName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:NextLevelName: ", p), err) }
  return err
}

func (p *SMemberLevelInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("NextProgramSignal", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:NextProgramSignal: ", p), err) }
  if err := oprot.WriteString(string(p.NextProgramSignal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.NextProgramSignal (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:NextProgramSignal: ", p), err) }
  return err
}

func (p *SMemberLevelInfo) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("RequireExp", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:RequireExp: ", p), err) }
  if err := oprot.WriteI32(int32(p.RequireExp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.RequireExp (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:RequireExp: ", p), err) }
  return err
}

func (p *SMemberLevelInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SMemberLevelInfo(%+v)", *p)
}

// 订单汇总信息
// 
// Attributes:
//  - AwaitPayment: 待付款订单数量
//  - AwaitShipment: 待发货订单数量
//  - AwaitReceive: 待收货订单数量
//  - Completed: 已完成订单数量
type SMemberOrderSummary struct {
  AwaitPayment int32 `thrift:"AwaitPayment,1" db:"AwaitPayment" json:"AwaitPayment"`
  AwaitShipment int32 `thrift:"AwaitShipment,2" db:"AwaitShipment" json:"AwaitShipment"`
  AwaitReceive int32 `thrift:"AwaitReceive,3" db:"AwaitReceive" json:"AwaitReceive"`
  Completed int32 `thrift:"Completed,4" db:"Completed" json:"Completed"`
}

func NewSMemberOrderSummary() *SMemberOrderSummary {
  return &SMemberOrderSummary{}
}


func (p *SMemberOrderSummary) GetAwaitPayment() int32 {
  return p.AwaitPayment
}

func (p *SMemberOrderSummary) GetAwaitShipment() int32 {
  return p.AwaitShipment
}

func (p *SMemberOrderSummary) GetAwaitReceive() int32 {
  return p.AwaitReceive
}

func (p *SMemberOrderSummary) GetCompleted() int32 {
  return p.Completed
}
func (p *SMemberOrderSummary) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SMemberOrderSummary)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AwaitPayment = v
}
  return nil
}

func (p *SMemberOrderSummary)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AwaitShipment = v
}
  return nil
}

func (p *SMemberOrderSummary)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AwaitReceive = v
}
  return nil
}

func (p *SMemberOrderSummary)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Completed = v
}
  return nil
}

func (p *SMemberOrderSummary) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SMemberOrderSummary"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SMemberOrderSummary) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("AwaitPayment", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:AwaitPayment: ", p), err) }
  if err := oprot.WriteI32(int32(p.AwaitPayment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.AwaitPayment (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:AwaitPayment: ", p), err) }
  return err
}

func (p *SMemberOrderSummary) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("AwaitShipment", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:AwaitShipment: ", p), err) }
  if err := oprot.WriteI32(int32(p.AwaitShipment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.AwaitShipment (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:AwaitShipment: ", p), err) }
  return err
}

func (p *SMemberOrderSummary) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("AwaitReceive", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:AwaitReceive: ", p), err) }
  if err := oprot.WriteI32(int32(p.AwaitReceive)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.AwaitReceive (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:AwaitReceive: ", p), err) }
  return err
}

func (p *SMemberOrderSummary) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Completed", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Completed: ", p), err) }
  if err := oprot.WriteI32(int32(p.Completed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Completed (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Completed: ", p), err) }
  return err
}

func (p *SMemberOrderSummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SMemberOrderSummary(%+v)", *p)
}

type MemberService interface {
  // 注册会员
  // @param user 登陆用户名
  // @param pwd 登陆密码,md5运算后的字符串
  // @param flag 用户自定义标志
  // @param phone 手机号码
  // @param email 邮箱
  // @param avatar 头像
  // @param extend 扩展数据
  // @return 注册结果，返回user_code
  // 
  // Parameters:
  //  - User
  //  - Pwd
  //  - Flag
  //  - Name
  //  - Phone
  //  - Email
  //  - Avatar
  //  - Extend
  RegisterMemberV2(ctx context.Context, user string, pwd string, flag int32, name string, phone string, email string, avatar string, extend map[string]string) (r *ttype.Result_, err error)
  // Parameters:
  //  - User
  //  - Pwd
  //  - Update
  CheckLogin(ctx context.Context, user string, pwd string, update bool) (r *ttype.Result_, err error)
  // 检查交易密码
  // 
  // Parameters:
  //  - MemberId
  //  - TradePwd
  CheckTradePwd(ctx context.Context, memberId int64, tradePwd string) (r *ttype.Result_, err error)
  // 交换会员编号
  // 
  // Parameters:
  //  - Cred
  //  - Value
  SwapMemberId(ctx context.Context, cred ECredentials, value string) (r int64, err error)
  // 等级列表
  MemberLevelList(ctx context.Context) (r []*SMemberLevel, err error)
  // Parameters:
  //  - MemberId
  GetTrustInfo(ctx context.Context, memberId int64) (r *STrustedInfo, err error)
  // 提交实名信息
  // 
  // Parameters:
  //  - MemberId
  //  - Info
  SubmitTrustInfo(ctx context.Context, memberId int64, info *STrustedInfo) (r *ttype.Result_, err error)
  // 审核实名认证,若重复审核将返回错误 *
  // 
  // Parameters:
  //  - MemberId
  //  - ReviewPass
  //  - Remark
  ReviewTrustedInfo(ctx context.Context, memberId int64, reviewPass bool, remark string) (r *ttype.Result_, err error)
  // 获取会员等级信息
  // 
  // Parameters:
  //  - ID
  GetMemberLevel(ctx context.Context, id int32) (r *SMemberLevel, err error)
  // 保存等级
  // 
  // Parameters:
  //  - Level
  SaveMemberLevel(ctx context.Context, level *SMemberLevel) (r *ttype.Result_, err error)
  // Parameters:
  //  - Sign
  GetLevelBySign(ctx context.Context, sign string) (r *SMemberLevel, err error)
  // Parameters:
  //  - ID
  GetMember(ctx context.Context, id int64) (r *SMember, err error)
  // Parameters:
  //  - User
  GetMemberByUser(ctx context.Context, user string) (r *SMember, err error)
  // Parameters:
  //  - ID
  GetProfile(ctx context.Context, id int64) (r *SProfile, err error)
  // 激活会员
  // 
  // Parameters:
  //  - MemberId
  Active(ctx context.Context, memberId int64) (r *ttype.Result_, err error)
  // 锁定,minutes锁定分钟数,默认:-1永久锁定
  // 
  // Parameters:
  //  - MemberId
  //  - Minutes
  //  - Remark
  Lock(ctx context.Context, memberId int64, minutes int32, remark string) (r *ttype.Result_, err error)
  // 解锁会员
  // 
  // Parameters:
  //  - MemberId
  Unlock(ctx context.Context, memberId int64) (r *ttype.Result_, err error)
  // 标志赋值, 如果flag小于零, 则异或运算
  // 
  // Parameters:
  //  - MemberId
  //  - Flag
  GrantFlag(ctx context.Context, memberId int64, flag int32) (r *ttype.Result_, err error)
  // 获取会员汇总信息
  // 
  // Parameters:
  //  - MemberId
  Complex(ctx context.Context, memberId int64) (r *SComplexMember, err error)
  // 发送会员验证码消息, 并返回验证码, 验证码通过data.code获取
  // 
  // Parameters:
  //  - MemberId
  //  - Operation
  //  - MsgType
  SendCode(ctx context.Context, memberId int64, operation string, msgType message_service.EMessageChannel) (r *ttype.Result_, err error)
  // 比较验证码是否正确
  // 
  // Parameters:
  //  - MemberId
  //  - Code
  CompareCode(ctx context.Context, memberId int64, code string) (r *ttype.Result_, err error)
  // 获取收款码
  // 
  // Parameters:
  //  - MemberId
  ReceiptsCodes(ctx context.Context, memberId int64) (r []*SReceiptsCode, err error)
  // 保存收款码
  // 
  // Parameters:
  //  - MemberId
  //  - Code
  SaveReceiptsCode(ctx context.Context, memberId int64, code *SReceiptsCode) (r *ttype.Result_, err error)
  // 获取银行卡
  // 
  // Parameters:
  //  - MemberId
  Bankcards(ctx context.Context, memberId int64) (r []*SBankcard, err error)
  // 保存银行卡
  // 
  // Parameters:
  //  - MemberId
  //  - Card
  SaveBankcard(ctx context.Context, memberId int64, card *SBankcard) (r *ttype.Result_, err error)
  // Parameters:
  //  - MemberId
  CheckProfileComplete(ctx context.Context, memberId int64) (r *ttype.Result_, err error)
  // 获取会员等级信息
  // 
  // Parameters:
  //  - MemberId
  MemberLevelInfo(ctx context.Context, memberId int64) (r *SMemberLevelInfo, err error)
  // Parameters:
  //  - MemberId
  //  - Level
  //  - Review
  //  - PaymentOrderId
  UpdateLevel(ctx context.Context, memberId int64, level int32, review bool, paymentOrderId int64) (r *ttype.Result_, err error)
  // Parameters:
  //  - MemberId
  //  - Phone
  ChangePhone(ctx context.Context, memberId int64, phone string) (r *ttype.Result_, err error)
  // Parameters:
  //  - MemberId
  //  - Usr
  ChangeUser(ctx context.Context, memberId int64, usr string) (r *ttype.Result_, err error)
  // 更改密码
  // 
  // Parameters:
  //  - MemberId
  //  - Old
  //  - Pwd
  ModifyPwd(ctx context.Context, memberId int64, old string, pwd string) (r *ttype.Result_, err error)
  // 更改交易密码
  // 
  // Parameters:
  //  - MemberId
  //  - Old
  //  - Pwd
  ModifyTradePwd(ctx context.Context, memberId int64, old string, pwd string) (r *ttype.Result_, err error)
  // 更改邀请人
  // 
  // Parameters:
  //  - MemberId
  //  - InviterId
  ChangeInviterId(ctx context.Context, memberId int64, inviterId int64) (r *ttype.Result_, err error)
  // 获取会员的订单状态及其数量
  // 
  // Parameters:
  //  - MemberId
  OrdersQuantity(ctx context.Context, memberId int64) (r map[int32]int32, err error)
  // Parameters:
  //  - MemberId
  //  - V
  //  - Expires
  Premium(ctx context.Context, memberId int64, v int32, expires int64) (r *ttype.Result_, err error)
  // Parameters:
  //  - MemberId
  //  - Reset
  GetToken(ctx context.Context, memberId int64, reset bool) (r string, err error)
  // Parameters:
  //  - MemberId
  //  - Token
  CheckToken(ctx context.Context, memberId int64, token string) (r bool, err error)
  // Parameters:
  //  - MemberId
  RemoveToken(ctx context.Context, memberId int64) (err error)
  // Parameters:
  //  - MemberId
  GetAddressList(ctx context.Context, memberId int64) (r []*SAddress, err error)
  // Parameters:
  //  - MemberId
  //  - AddrId
  GetAddress(ctx context.Context, memberId int64, addrId int64) (r *SAddress, err error)
  // Parameters:
  //  - MemberId
  GetAccount(ctx context.Context, memberId int64) (r *SAccount, err error)
  // Parameters:
  //  - MemberId
  //  - Depth
  InviterArray(ctx context.Context, memberId int64, depth int32) (r []int64, err error)
  // Parameters:
  //  - MemberId
  //  - Depth
  InviteMembersQuantity(ctx context.Context, memberId int64, depth int32) (r int32, err error)
  // Parameters:
  //  - MemberId
  //  - Data
  QueryInviteQuantity(ctx context.Context, memberId int64, data map[string]string) (r int32, err error)
  // Parameters:
  //  - MemberId
  //  - Data
  QueryInviteArray(ctx context.Context, memberId int64, data map[string]string) (r []int64, err error)
  // Parameters:
  //  - MemberId
  //  - Account
  //  - Title
  //  - Amount
  //  - OuterNo
  //  - Remark
  AccountCharge(ctx context.Context, memberId int64, account int32, title string, amount int32, outerNo string, remark string) (r *ttype.Result_, err error)
  // Parameters:
  //  - MemberId
  //  - Account
  //  - Title
  //  - Amount
  //  - OuterNo
  //  - Remark
  AccountConsume(ctx context.Context, memberId int64, account int32, title string, amount int32, outerNo string, remark string) (r *ttype.Result_, err error)
  // Parameters:
  //  - MemberId
  //  - Account
  //  - Title
  //  - Amount
  //  - OuterNo
  //  - Remark
  AccountDiscount(ctx context.Context, memberId int64, account int32, title string, amount int32, outerNo string, remark string) (r *ttype.Result_, err error)
  // Parameters:
  //  - MemberId
  //  - Account
  //  - Title
  //  - Amount
  //  - OuterNo
  //  - Remark
  AccountRefund(ctx context.Context, memberId int64, account int32, title string, amount int32, outerNo string, remark string) (r *ttype.Result_, err error)
  // Parameters:
  //  - MemberId
  //  - Account
  //  - Value
  //  - RelateUser
  //  - Remark
  AccountAdjust(ctx context.Context, memberId int64, account int32, value int32, relateUser int64, remark string) (r *ttype.Result_, err error)
  // Parameters:
  //  - MemberId
  //  - Action
  //  - Data
  B4EAuth(ctx context.Context, memberId int64, action string, data map[string]string) (r *ttype.Result_, err error)
  // 获取指定账户的流水记录
  // 
  // Parameters:
  //  - MemberId
  //  - AccountType
  //  - Params
  PagingAccountLog(ctx context.Context, memberId int64, accountType int32, params *ttype.SPagingParams) (r *ttype.SPagingResult_, err error)
}

type MemberServiceClient struct {
  c thrift.TClient
}

func NewMemberServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MemberServiceClient {
  return &MemberServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewMemberServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MemberServiceClient {
  return &MemberServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMemberServiceClient(c thrift.TClient) *MemberServiceClient {
  return &MemberServiceClient{
    c: c,
  }
}

func (p *MemberServiceClient) Client_() thrift.TClient {
  return p.c
}
// 注册会员
// @param user 登陆用户名
// @param pwd 登陆密码,md5运算后的字符串
// @param flag 用户自定义标志
// @param phone 手机号码
// @param email 邮箱
// @param avatar 头像
// @param extend 扩展数据
// @return 注册结果，返回user_code
// 
// Parameters:
//  - User
//  - Pwd
//  - Flag
//  - Name
//  - Phone
//  - Email
//  - Avatar
//  - Extend
func (p *MemberServiceClient) RegisterMemberV2(ctx context.Context, user string, pwd string, flag int32, name string, phone string, email string, avatar string, extend map[string]string) (r *ttype.Result_, err error) {
  var _args0 MemberServiceRegisterMemberV2Args
  _args0.User = user
  _args0.Pwd = pwd
  _args0.Flag = flag
  _args0.Name = name
  _args0.Phone = phone
  _args0.Email = email
  _args0.Avatar = avatar
  _args0.Extend = extend
  var _result1 MemberServiceRegisterMemberV2Result
  if err = p.Client_().Call(ctx, "RegisterMemberV2", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - User
//  - Pwd
//  - Update
func (p *MemberServiceClient) CheckLogin(ctx context.Context, user string, pwd string, update bool) (r *ttype.Result_, err error) {
  var _args2 MemberServiceCheckLoginArgs
  _args2.User = user
  _args2.Pwd = pwd
  _args2.Update = update
  var _result3 MemberServiceCheckLoginResult
  if err = p.Client_().Call(ctx, "CheckLogin", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// 检查交易密码
// 
// Parameters:
//  - MemberId
//  - TradePwd
func (p *MemberServiceClient) CheckTradePwd(ctx context.Context, memberId int64, tradePwd string) (r *ttype.Result_, err error) {
  var _args4 MemberServiceCheckTradePwdArgs
  _args4.MemberId = memberId
  _args4.TradePwd = tradePwd
  var _result5 MemberServiceCheckTradePwdResult
  if err = p.Client_().Call(ctx, "CheckTradePwd", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// 交换会员编号
// 
// Parameters:
//  - Cred
//  - Value
func (p *MemberServiceClient) SwapMemberId(ctx context.Context, cred ECredentials, value string) (r int64, err error) {
  var _args6 MemberServiceSwapMemberIdArgs
  _args6.Cred = cred
  _args6.Value = value
  var _result7 MemberServiceSwapMemberIdResult
  if err = p.Client_().Call(ctx, "SwapMemberId", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// 等级列表
func (p *MemberServiceClient) MemberLevelList(ctx context.Context) (r []*SMemberLevel, err error) {
  var _args8 MemberServiceMemberLevelListArgs
  var _result9 MemberServiceMemberLevelListResult
  if err = p.Client_().Call(ctx, "MemberLevelList", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - MemberId
func (p *MemberServiceClient) GetTrustInfo(ctx context.Context, memberId int64) (r *STrustedInfo, err error) {
  var _args10 MemberServiceGetTrustInfoArgs
  _args10.MemberId = memberId
  var _result11 MemberServiceGetTrustInfoResult
  if err = p.Client_().Call(ctx, "GetTrustInfo", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// 提交实名信息
// 
// Parameters:
//  - MemberId
//  - Info
func (p *MemberServiceClient) SubmitTrustInfo(ctx context.Context, memberId int64, info *STrustedInfo) (r *ttype.Result_, err error) {
  var _args12 MemberServiceSubmitTrustInfoArgs
  _args12.MemberId = memberId
  _args12.Info = info
  var _result13 MemberServiceSubmitTrustInfoResult
  if err = p.Client_().Call(ctx, "SubmitTrustInfo", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// 审核实名认证,若重复审核将返回错误 *
// 
// Parameters:
//  - MemberId
//  - ReviewPass
//  - Remark
func (p *MemberServiceClient) ReviewTrustedInfo(ctx context.Context, memberId int64, reviewPass bool, remark string) (r *ttype.Result_, err error) {
  var _args14 MemberServiceReviewTrustedInfoArgs
  _args14.MemberId = memberId
  _args14.ReviewPass = reviewPass
  _args14.Remark = remark
  var _result15 MemberServiceReviewTrustedInfoResult
  if err = p.Client_().Call(ctx, "ReviewTrustedInfo", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

// 获取会员等级信息
// 
// Parameters:
//  - ID
func (p *MemberServiceClient) GetMemberLevel(ctx context.Context, id int32) (r *SMemberLevel, err error) {
  var _args16 MemberServiceGetMemberLevelArgs
  _args16.ID = id
  var _result17 MemberServiceGetMemberLevelResult
  if err = p.Client_().Call(ctx, "GetMemberLevel", &_args16, &_result17); err != nil {
    return
  }
  return _result17.GetSuccess(), nil
}

// 保存等级
// 
// Parameters:
//  - Level
func (p *MemberServiceClient) SaveMemberLevel(ctx context.Context, level *SMemberLevel) (r *ttype.Result_, err error) {
  var _args18 MemberServiceSaveMemberLevelArgs
  _args18.Level = level
  var _result19 MemberServiceSaveMemberLevelResult
  if err = p.Client_().Call(ctx, "SaveMemberLevel", &_args18, &_result19); err != nil {
    return
  }
  return _result19.GetSuccess(), nil
}

// Parameters:
//  - Sign
func (p *MemberServiceClient) GetLevelBySign(ctx context.Context, sign string) (r *SMemberLevel, err error) {
  var _args20 MemberServiceGetLevelBySignArgs
  _args20.Sign = sign
  var _result21 MemberServiceGetLevelBySignResult
  if err = p.Client_().Call(ctx, "GetLevelBySign", &_args20, &_result21); err != nil {
    return
  }
  return _result21.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *MemberServiceClient) GetMember(ctx context.Context, id int64) (r *SMember, err error) {
  var _args22 MemberServiceGetMemberArgs
  _args22.ID = id
  var _result23 MemberServiceGetMemberResult
  if err = p.Client_().Call(ctx, "GetMember", &_args22, &_result23); err != nil {
    return
  }
  return _result23.GetSuccess(), nil
}

// Parameters:
//  - User
func (p *MemberServiceClient) GetMemberByUser(ctx context.Context, user string) (r *SMember, err error) {
  var _args24 MemberServiceGetMemberByUserArgs
  _args24.User = user
  var _result25 MemberServiceGetMemberByUserResult
  if err = p.Client_().Call(ctx, "GetMemberByUser", &_args24, &_result25); err != nil {
    return
  }
  return _result25.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *MemberServiceClient) GetProfile(ctx context.Context, id int64) (r *SProfile, err error) {
  var _args26 MemberServiceGetProfileArgs
  _args26.ID = id
  var _result27 MemberServiceGetProfileResult
  if err = p.Client_().Call(ctx, "GetProfile", &_args26, &_result27); err != nil {
    return
  }
  return _result27.GetSuccess(), nil
}

// 激活会员
// 
// Parameters:
//  - MemberId
func (p *MemberServiceClient) Active(ctx context.Context, memberId int64) (r *ttype.Result_, err error) {
  var _args28 MemberServiceActiveArgs
  _args28.MemberId = memberId
  var _result29 MemberServiceActiveResult
  if err = p.Client_().Call(ctx, "Active", &_args28, &_result29); err != nil {
    return
  }
  return _result29.GetSuccess(), nil
}

// 锁定,minutes锁定分钟数,默认:-1永久锁定
// 
// Parameters:
//  - MemberId
//  - Minutes
//  - Remark
func (p *MemberServiceClient) Lock(ctx context.Context, memberId int64, minutes int32, remark string) (r *ttype.Result_, err error) {
  var _args30 MemberServiceLockArgs
  _args30.MemberId = memberId
  _args30.Minutes = minutes
  _args30.Remark = remark
  var _result31 MemberServiceLockResult
  if err = p.Client_().Call(ctx, "Lock", &_args30, &_result31); err != nil {
    return
  }
  return _result31.GetSuccess(), nil
}

// 解锁会员
// 
// Parameters:
//  - MemberId
func (p *MemberServiceClient) Unlock(ctx context.Context, memberId int64) (r *ttype.Result_, err error) {
  var _args32 MemberServiceUnlockArgs
  _args32.MemberId = memberId
  var _result33 MemberServiceUnlockResult
  if err = p.Client_().Call(ctx, "Unlock", &_args32, &_result33); err != nil {
    return
  }
  return _result33.GetSuccess(), nil
}

// 标志赋值, 如果flag小于零, 则异或运算
// 
// Parameters:
//  - MemberId
//  - Flag
func (p *MemberServiceClient) GrantFlag(ctx context.Context, memberId int64, flag int32) (r *ttype.Result_, err error) {
  var _args34 MemberServiceGrantFlagArgs
  _args34.MemberId = memberId
  _args34.Flag = flag
  var _result35 MemberServiceGrantFlagResult
  if err = p.Client_().Call(ctx, "GrantFlag", &_args34, &_result35); err != nil {
    return
  }
  return _result35.GetSuccess(), nil
}

// 获取会员汇总信息
// 
// Parameters:
//  - MemberId
func (p *MemberServiceClient) Complex(ctx context.Context, memberId int64) (r *SComplexMember, err error) {
  var _args36 MemberServiceComplexArgs
  _args36.MemberId = memberId
  var _result37 MemberServiceComplexResult
  if err = p.Client_().Call(ctx, "Complex", &_args36, &_result37); err != nil {
    return
  }
  return _result37.GetSuccess(), nil
}

// 发送会员验证码消息, 并返回验证码, 验证码通过data.code获取
// 
// Parameters:
//  - MemberId
//  - Operation
//  - MsgType
func (p *MemberServiceClient) SendCode(ctx context.Context, memberId int64, operation string, msgType message_service.EMessageChannel) (r *ttype.Result_, err error) {
  var _args38 MemberServiceSendCodeArgs
  _args38.MemberId = memberId
  _args38.Operation = operation
  _args38.MsgType = msgType
  var _result39 MemberServiceSendCodeResult
  if err = p.Client_().Call(ctx, "SendCode", &_args38, &_result39); err != nil {
    return
  }
  return _result39.GetSuccess(), nil
}

// 比较验证码是否正确
// 
// Parameters:
//  - MemberId
//  - Code
func (p *MemberServiceClient) CompareCode(ctx context.Context, memberId int64, code string) (r *ttype.Result_, err error) {
  var _args40 MemberServiceCompareCodeArgs
  _args40.MemberId = memberId
  _args40.Code = code
  var _result41 MemberServiceCompareCodeResult
  if err = p.Client_().Call(ctx, "CompareCode", &_args40, &_result41); err != nil {
    return
  }
  return _result41.GetSuccess(), nil
}

// 获取收款码
// 
// Parameters:
//  - MemberId
func (p *MemberServiceClient) ReceiptsCodes(ctx context.Context, memberId int64) (r []*SReceiptsCode, err error) {
  var _args42 MemberServiceReceiptsCodesArgs
  _args42.MemberId = memberId
  var _result43 MemberServiceReceiptsCodesResult
  if err = p.Client_().Call(ctx, "ReceiptsCodes", &_args42, &_result43); err != nil {
    return
  }
  return _result43.GetSuccess(), nil
}

// 保存收款码
// 
// Parameters:
//  - MemberId
//  - Code
func (p *MemberServiceClient) SaveReceiptsCode(ctx context.Context, memberId int64, code *SReceiptsCode) (r *ttype.Result_, err error) {
  var _args44 MemberServiceSaveReceiptsCodeArgs
  _args44.MemberId = memberId
  _args44.Code = code
  var _result45 MemberServiceSaveReceiptsCodeResult
  if err = p.Client_().Call(ctx, "SaveReceiptsCode", &_args44, &_result45); err != nil {
    return
  }
  return _result45.GetSuccess(), nil
}

// 获取银行卡
// 
// Parameters:
//  - MemberId
func (p *MemberServiceClient) Bankcards(ctx context.Context, memberId int64) (r []*SBankcard, err error) {
  var _args46 MemberServiceBankcardsArgs
  _args46.MemberId = memberId
  var _result47 MemberServiceBankcardsResult
  if err = p.Client_().Call(ctx, "Bankcards", &_args46, &_result47); err != nil {
    return
  }
  return _result47.GetSuccess(), nil
}

// 保存银行卡
// 
// Parameters:
//  - MemberId
//  - Card
func (p *MemberServiceClient) SaveBankcard(ctx context.Context, memberId int64, card *SBankcard) (r *ttype.Result_, err error) {
  var _args48 MemberServiceSaveBankcardArgs
  _args48.MemberId = memberId
  _args48.Card = card
  var _result49 MemberServiceSaveBankcardResult
  if err = p.Client_().Call(ctx, "SaveBankcard", &_args48, &_result49); err != nil {
    return
  }
  return _result49.GetSuccess(), nil
}

// Parameters:
//  - MemberId
func (p *MemberServiceClient) CheckProfileComplete(ctx context.Context, memberId int64) (r *ttype.Result_, err error) {
  var _args50 MemberServiceCheckProfileCompleteArgs
  _args50.MemberId = memberId
  var _result51 MemberServiceCheckProfileCompleteResult
  if err = p.Client_().Call(ctx, "CheckProfileComplete", &_args50, &_result51); err != nil {
    return
  }
  return _result51.GetSuccess(), nil
}

// 获取会员等级信息
// 
// Parameters:
//  - MemberId
func (p *MemberServiceClient) MemberLevelInfo(ctx context.Context, memberId int64) (r *SMemberLevelInfo, err error) {
  var _args52 MemberServiceMemberLevelInfoArgs
  _args52.MemberId = memberId
  var _result53 MemberServiceMemberLevelInfoResult
  if err = p.Client_().Call(ctx, "MemberLevelInfo", &_args52, &_result53); err != nil {
    return
  }
  return _result53.GetSuccess(), nil
}

// Parameters:
//  - MemberId
//  - Level
//  - Review
//  - PaymentOrderId
func (p *MemberServiceClient) UpdateLevel(ctx context.Context, memberId int64, level int32, review bool, paymentOrderId int64) (r *ttype.Result_, err error) {
  var _args54 MemberServiceUpdateLevelArgs
  _args54.MemberId = memberId
  _args54.Level = level
  _args54.Review = review
  _args54.PaymentOrderId = paymentOrderId
  var _result55 MemberServiceUpdateLevelResult
  if err = p.Client_().Call(ctx, "UpdateLevel", &_args54, &_result55); err != nil {
    return
  }
  return _result55.GetSuccess(), nil
}

// Parameters:
//  - MemberId
//  - Phone
func (p *MemberServiceClient) ChangePhone(ctx context.Context, memberId int64, phone string) (r *ttype.Result_, err error) {
  var _args56 MemberServiceChangePhoneArgs
  _args56.MemberId = memberId
  _args56.Phone = phone
  var _result57 MemberServiceChangePhoneResult
  if err = p.Client_().Call(ctx, "ChangePhone", &_args56, &_result57); err != nil {
    return
  }
  return _result57.GetSuccess(), nil
}

// Parameters:
//  - MemberId
//  - Usr
func (p *MemberServiceClient) ChangeUser(ctx context.Context, memberId int64, usr string) (r *ttype.Result_, err error) {
  var _args58 MemberServiceChangeUserArgs
  _args58.MemberId = memberId
  _args58.Usr = usr
  var _result59 MemberServiceChangeUserResult
  if err = p.Client_().Call(ctx, "ChangeUser", &_args58, &_result59); err != nil {
    return
  }
  return _result59.GetSuccess(), nil
}

// 更改密码
// 
// Parameters:
//  - MemberId
//  - Old
//  - Pwd
func (p *MemberServiceClient) ModifyPwd(ctx context.Context, memberId int64, old string, pwd string) (r *ttype.Result_, err error) {
  var _args60 MemberServiceModifyPwdArgs
  _args60.MemberId = memberId
  _args60.Old = old
  _args60.Pwd = pwd
  var _result61 MemberServiceModifyPwdResult
  if err = p.Client_().Call(ctx, "ModifyPwd", &_args60, &_result61); err != nil {
    return
  }
  return _result61.GetSuccess(), nil
}

// 更改交易密码
// 
// Parameters:
//  - MemberId
//  - Old
//  - Pwd
func (p *MemberServiceClient) ModifyTradePwd(ctx context.Context, memberId int64, old string, pwd string) (r *ttype.Result_, err error) {
  var _args62 MemberServiceModifyTradePwdArgs
  _args62.MemberId = memberId
  _args62.Old = old
  _args62.Pwd = pwd
  var _result63 MemberServiceModifyTradePwdResult
  if err = p.Client_().Call(ctx, "ModifyTradePwd", &_args62, &_result63); err != nil {
    return
  }
  return _result63.GetSuccess(), nil
}

// 更改邀请人
// 
// Parameters:
//  - MemberId
//  - InviterId
func (p *MemberServiceClient) ChangeInviterId(ctx context.Context, memberId int64, inviterId int64) (r *ttype.Result_, err error) {
  var _args64 MemberServiceChangeInviterIdArgs
  _args64.MemberId = memberId
  _args64.InviterId = inviterId
  var _result65 MemberServiceChangeInviterIdResult
  if err = p.Client_().Call(ctx, "ChangeInviterId", &_args64, &_result65); err != nil {
    return
  }
  return _result65.GetSuccess(), nil
}

// 获取会员的订单状态及其数量
// 
// Parameters:
//  - MemberId
func (p *MemberServiceClient) OrdersQuantity(ctx context.Context, memberId int64) (r map[int32]int32, err error) {
  var _args66 MemberServiceOrdersQuantityArgs
  _args66.MemberId = memberId
  var _result67 MemberServiceOrdersQuantityResult
  if err = p.Client_().Call(ctx, "OrdersQuantity", &_args66, &_result67); err != nil {
    return
  }
  return _result67.GetSuccess(), nil
}

// Parameters:
//  - MemberId
//  - V
//  - Expires
func (p *MemberServiceClient) Premium(ctx context.Context, memberId int64, v int32, expires int64) (r *ttype.Result_, err error) {
  var _args68 MemberServicePremiumArgs
  _args68.MemberId = memberId
  _args68.V = v
  _args68.Expires = expires
  var _result69 MemberServicePremiumResult
  if err = p.Client_().Call(ctx, "Premium", &_args68, &_result69); err != nil {
    return
  }
  return _result69.GetSuccess(), nil
}

// Parameters:
//  - MemberId
//  - Reset
func (p *MemberServiceClient) GetToken(ctx context.Context, memberId int64, reset bool) (r string, err error) {
  var _args70 MemberServiceGetTokenArgs
  _args70.MemberId = memberId
  _args70.Reset = reset
  var _result71 MemberServiceGetTokenResult
  if err = p.Client_().Call(ctx, "GetToken", &_args70, &_result71); err != nil {
    return
  }
  return _result71.GetSuccess(), nil
}

// Parameters:
//  - MemberId
//  - Token
func (p *MemberServiceClient) CheckToken(ctx context.Context, memberId int64, token string) (r bool, err error) {
  var _args72 MemberServiceCheckTokenArgs
  _args72.MemberId = memberId
  _args72.Token = token
  var _result73 MemberServiceCheckTokenResult
  if err = p.Client_().Call(ctx, "CheckToken", &_args72, &_result73); err != nil {
    return
  }
  return _result73.GetSuccess(), nil
}

// Parameters:
//  - MemberId
func (p *MemberServiceClient) RemoveToken(ctx context.Context, memberId int64) (err error) {
  var _args74 MemberServiceRemoveTokenArgs
  _args74.MemberId = memberId
  var _result75 MemberServiceRemoveTokenResult
  if err = p.Client_().Call(ctx, "RemoveToken", &_args74, &_result75); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - MemberId
func (p *MemberServiceClient) GetAddressList(ctx context.Context, memberId int64) (r []*SAddress, err error) {
  var _args76 MemberServiceGetAddressListArgs
  _args76.MemberId = memberId
  var _result77 MemberServiceGetAddressListResult
  if err = p.Client_().Call(ctx, "GetAddressList", &_args76, &_result77); err != nil {
    return
  }
  return _result77.GetSuccess(), nil
}

// Parameters:
//  - MemberId
//  - AddrId
func (p *MemberServiceClient) GetAddress(ctx context.Context, memberId int64, addrId int64) (r *SAddress, err error) {
  var _args78 MemberServiceGetAddressArgs
  _args78.MemberId = memberId
  _args78.AddrId = addrId
  var _result79 MemberServiceGetAddressResult
  if err = p.Client_().Call(ctx, "GetAddress", &_args78, &_result79); err != nil {
    return
  }
  return _result79.GetSuccess(), nil
}

// Parameters:
//  - MemberId
func (p *MemberServiceClient) GetAccount(ctx context.Context, memberId int64) (r *SAccount, err error) {
  var _args80 MemberServiceGetAccountArgs
  _args80.MemberId = memberId
  var _result81 MemberServiceGetAccountResult
  if err = p.Client_().Call(ctx, "GetAccount", &_args80, &_result81); err != nil {
    return
  }
  return _result81.GetSuccess(), nil
}

// Parameters:
//  - MemberId
//  - Depth
func (p *MemberServiceClient) InviterArray(ctx context.Context, memberId int64, depth int32) (r []int64, err error) {
  var _args82 MemberServiceInviterArrayArgs
  _args82.MemberId = memberId
  _args82.Depth = depth
  var _result83 MemberServiceInviterArrayResult
  if err = p.Client_().Call(ctx, "InviterArray", &_args82, &_result83); err != nil {
    return
  }
  return _result83.GetSuccess(), nil
}

// Parameters:
//  - MemberId
//  - Depth
func (p *MemberServiceClient) InviteMembersQuantity(ctx context.Context, memberId int64, depth int32) (r int32, err error) {
  var _args84 MemberServiceInviteMembersQuantityArgs
  _args84.MemberId = memberId
  _args84.Depth = depth
  var _result85 MemberServiceInviteMembersQuantityResult
  if err = p.Client_().Call(ctx, "InviteMembersQuantity", &_args84, &_result85); err != nil {
    return
  }
  return _result85.GetSuccess(), nil
}

// Parameters:
//  - MemberId
//  - Data
func (p *MemberServiceClient) QueryInviteQuantity(ctx context.Context, memberId int64, data map[string]string) (r int32, err error) {
  var _args86 MemberServiceQueryInviteQuantityArgs
  _args86.MemberId = memberId
  _args86.Data = data
  var _result87 MemberServiceQueryInviteQuantityResult
  if err = p.Client_().Call(ctx, "QueryInviteQuantity", &_args86, &_result87); err != nil {
    return
  }
  return _result87.GetSuccess(), nil
}

// Parameters:
//  - MemberId
//  - Data
func (p *MemberServiceClient) QueryInviteArray(ctx context.Context, memberId int64, data map[string]string) (r []int64, err error) {
  var _args88 MemberServiceQueryInviteArrayArgs
  _args88.MemberId = memberId
  _args88.Data = data
  var _result89 MemberServiceQueryInviteArrayResult
  if err = p.Client_().Call(ctx, "QueryInviteArray", &_args88, &_result89); err != nil {
    return
  }
  return _result89.GetSuccess(), nil
}

// Parameters:
//  - MemberId
//  - Account
//  - Title
//  - Amount
//  - OuterNo
//  - Remark
func (p *MemberServiceClient) AccountCharge(ctx context.Context, memberId int64, account int32, title string, amount int32, outerNo string, remark string) (r *ttype.Result_, err error) {
  var _args90 MemberServiceAccountChargeArgs
  _args90.MemberId = memberId
  _args90.Account = account
  _args90.Title = title
  _args90.Amount = amount
  _args90.OuterNo = outerNo
  _args90.Remark = remark
  var _result91 MemberServiceAccountChargeResult
  if err = p.Client_().Call(ctx, "AccountCharge", &_args90, &_result91); err != nil {
    return
  }
  return _result91.GetSuccess(), nil
}

// Parameters:
//  - MemberId
//  - Account
//  - Title
//  - Amount
//  - OuterNo
//  - Remark
func (p *MemberServiceClient) AccountConsume(ctx context.Context, memberId int64, account int32, title string, amount int32, outerNo string, remark string) (r *ttype.Result_, err error) {
  var _args92 MemberServiceAccountConsumeArgs
  _args92.MemberId = memberId
  _args92.Account = account
  _args92.Title = title
  _args92.Amount = amount
  _args92.OuterNo = outerNo
  _args92.Remark = remark
  var _result93 MemberServiceAccountConsumeResult
  if err = p.Client_().Call(ctx, "AccountConsume", &_args92, &_result93); err != nil {
    return
  }
  return _result93.GetSuccess(), nil
}

// Parameters:
//  - MemberId
//  - Account
//  - Title
//  - Amount
//  - OuterNo
//  - Remark
func (p *MemberServiceClient) AccountDiscount(ctx context.Context, memberId int64, account int32, title string, amount int32, outerNo string, remark string) (r *ttype.Result_, err error) {
  var _args94 MemberServiceAccountDiscountArgs
  _args94.MemberId = memberId
  _args94.Account = account
  _args94.Title = title
  _args94.Amount = amount
  _args94.OuterNo = outerNo
  _args94.Remark = remark
  var _result95 MemberServiceAccountDiscountResult
  if err = p.Client_().Call(ctx, "AccountDiscount", &_args94, &_result95); err != nil {
    return
  }
  return _result95.GetSuccess(), nil
}

// Parameters:
//  - MemberId
//  - Account
//  - Title
//  - Amount
//  - OuterNo
//  - Remark
func (p *MemberServiceClient) AccountRefund(ctx context.Context, memberId int64, account int32, title string, amount int32, outerNo string, remark string) (r *ttype.Result_, err error) {
  var _args96 MemberServiceAccountRefundArgs
  _args96.MemberId = memberId
  _args96.Account = account
  _args96.Title = title
  _args96.Amount = amount
  _args96.OuterNo = outerNo
  _args96.Remark = remark
  var _result97 MemberServiceAccountRefundResult
  if err = p.Client_().Call(ctx, "AccountRefund", &_args96, &_result97); err != nil {
    return
  }
  return _result97.GetSuccess(), nil
}

// Parameters:
//  - MemberId
//  - Account
//  - Value
//  - RelateUser
//  - Remark
func (p *MemberServiceClient) AccountAdjust(ctx context.Context, memberId int64, account int32, value int32, relateUser int64, remark string) (r *ttype.Result_, err error) {
  var _args98 MemberServiceAccountAdjustArgs
  _args98.MemberId = memberId
  _args98.Account = account
  _args98.Value = value
  _args98.RelateUser = relateUser
  _args98.Remark = remark
  var _result99 MemberServiceAccountAdjustResult
  if err = p.Client_().Call(ctx, "AccountAdjust", &_args98, &_result99); err != nil {
    return
  }
  return _result99.GetSuccess(), nil
}

// Parameters:
//  - MemberId
//  - Action
//  - Data
func (p *MemberServiceClient) B4EAuth(ctx context.Context, memberId int64, action string, data map[string]string) (r *ttype.Result_, err error) {
  var _args100 MemberServiceB4EAuthArgs
  _args100.MemberId = memberId
  _args100.Action = action
  _args100.Data = data
  var _result101 MemberServiceB4EAuthResult
  if err = p.Client_().Call(ctx, "B4EAuth", &_args100, &_result101); err != nil {
    return
  }
  return _result101.GetSuccess(), nil
}

// 获取指定账户的流水记录
// 
// Parameters:
//  - MemberId
//  - AccountType
//  - Params
func (p *MemberServiceClient) PagingAccountLog(ctx context.Context, memberId int64, accountType int32, params *ttype.SPagingParams) (r *ttype.SPagingResult_, err error) {
  var _args102 MemberServicePagingAccountLogArgs
  _args102.MemberId = memberId
  _args102.AccountType = accountType
  _args102.Params = params
  var _result103 MemberServicePagingAccountLogResult
  if err = p.Client_().Call(ctx, "PagingAccountLog", &_args102, &_result103); err != nil {
    return
  }
  return _result103.GetSuccess(), nil
}

type MemberServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler      MemberService
}

func (p *MemberServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MemberServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MemberServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMemberServiceProcessor(handler MemberService) *MemberServiceProcessor {

  self104 := &MemberServiceProcessor{handler: handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self104.processorMap["RegisterMemberV2"] = &memberServiceProcessorRegisterMemberV2{handler: handler}
  self104.processorMap["CheckLogin"] = &memberServiceProcessorCheckLogin{handler: handler}
  self104.processorMap["CheckTradePwd"] = &memberServiceProcessorCheckTradePwd{handler: handler}
  self104.processorMap["SwapMemberId"] = &memberServiceProcessorSwapMemberId{handler: handler}
  self104.processorMap["MemberLevelList"] = &memberServiceProcessorMemberLevelList{handler: handler}
  self104.processorMap["GetTrustInfo"] = &memberServiceProcessorGetTrustInfo{handler: handler}
  self104.processorMap["SubmitTrustInfo"] = &memberServiceProcessorSubmitTrustInfo{handler: handler}
  self104.processorMap["ReviewTrustedInfo"] = &memberServiceProcessorReviewTrustedInfo{handler: handler}
  self104.processorMap["GetMemberLevel"] = &memberServiceProcessorGetMemberLevel{handler: handler}
  self104.processorMap["SaveMemberLevel"] = &memberServiceProcessorSaveMemberLevel{handler: handler}
  self104.processorMap["GetLevelBySign"] = &memberServiceProcessorGetLevelBySign{handler: handler}
  self104.processorMap["GetMember"] = &memberServiceProcessorGetMember{handler: handler}
  self104.processorMap["GetMemberByUser"] = &memberServiceProcessorGetMemberByUser{handler: handler}
  self104.processorMap["GetProfile"] = &memberServiceProcessorGetProfile{handler: handler}
  self104.processorMap["Active"] = &memberServiceProcessorActive{handler: handler}
  self104.processorMap["Lock"] = &memberServiceProcessorLock{handler: handler}
  self104.processorMap["Unlock"] = &memberServiceProcessorUnlock{handler: handler}
  self104.processorMap["GrantFlag"] = &memberServiceProcessorGrantFlag{handler: handler}
  self104.processorMap["Complex"] = &memberServiceProcessorComplex{handler: handler}
  self104.processorMap["SendCode"] = &memberServiceProcessorSendCode{handler: handler}
  self104.processorMap["CompareCode"] = &memberServiceProcessorCompareCode{handler: handler}
  self104.processorMap["ReceiptsCodes"] = &memberServiceProcessorReceiptsCodes{handler: handler}
  self104.processorMap["SaveReceiptsCode"] = &memberServiceProcessorSaveReceiptsCode{handler: handler}
  self104.processorMap["Bankcards"] = &memberServiceProcessorBankcards{handler: handler}
  self104.processorMap["SaveBankcard"] = &memberServiceProcessorSaveBankcard{handler: handler}
  self104.processorMap["CheckProfileComplete"] = &memberServiceProcessorCheckProfileComplete{handler: handler}
  self104.processorMap["MemberLevelInfo"] = &memberServiceProcessorMemberLevelInfo{handler: handler}
  self104.processorMap["UpdateLevel"] = &memberServiceProcessorUpdateLevel{handler: handler}
  self104.processorMap["ChangePhone"] = &memberServiceProcessorChangePhone{handler: handler}
  self104.processorMap["ChangeUser"] = &memberServiceProcessorChangeUser{handler: handler}
  self104.processorMap["ModifyPwd"] = &memberServiceProcessorModifyPwd{handler: handler}
  self104.processorMap["ModifyTradePwd"] = &memberServiceProcessorModifyTradePwd{handler: handler}
  self104.processorMap["ChangeInviterId"] = &memberServiceProcessorChangeInviterId{handler: handler}
  self104.processorMap["OrdersQuantity"] = &memberServiceProcessorOrdersQuantity{handler: handler}
  self104.processorMap["Premium"] = &memberServiceProcessorPremium{handler: handler}
  self104.processorMap["GetToken"] = &memberServiceProcessorGetToken{handler: handler}
  self104.processorMap["CheckToken"] = &memberServiceProcessorCheckToken{handler: handler}
  self104.processorMap["RemoveToken"] = &memberServiceProcessorRemoveToken{handler: handler}
  self104.processorMap["GetAddressList"] = &memberServiceProcessorGetAddressList{handler: handler}
  self104.processorMap["GetAddress"] = &memberServiceProcessorGetAddress{handler: handler}
  self104.processorMap["GetAccount"] = &memberServiceProcessorGetAccount{handler: handler}
  self104.processorMap["InviterArray"] = &memberServiceProcessorInviterArray{handler: handler}
  self104.processorMap["InviteMembersQuantity"] = &memberServiceProcessorInviteMembersQuantity{handler: handler}
  self104.processorMap["QueryInviteQuantity"] = &memberServiceProcessorQueryInviteQuantity{handler: handler}
  self104.processorMap["QueryInviteArray"] = &memberServiceProcessorQueryInviteArray{handler: handler}
  self104.processorMap["AccountCharge"] = &memberServiceProcessorAccountCharge{handler: handler}
  self104.processorMap["AccountConsume"] = &memberServiceProcessorAccountConsume{handler: handler}
  self104.processorMap["AccountDiscount"] = &memberServiceProcessorAccountDiscount{handler: handler}
  self104.processorMap["AccountRefund"] = &memberServiceProcessorAccountRefund{handler: handler}
  self104.processorMap["AccountAdjust"] = &memberServiceProcessorAccountAdjust{handler: handler}
  self104.processorMap["B4EAuth"] = &memberServiceProcessorB4EAuth{handler: handler}
  self104.processorMap["PagingAccountLog"] = &memberServiceProcessorPagingAccountLog{handler: handler}
return self104
}

func (p *MemberServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x105 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x105.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x105

}

type memberServiceProcessorRegisterMemberV2 struct {
  handler MemberService
}

func (p *memberServiceProcessorRegisterMemberV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceRegisterMemberV2Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RegisterMemberV2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceRegisterMemberV2Result{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.RegisterMemberV2(ctx, args.User, args.Pwd, args.Flag, args.Name, args.Phone, args.Email, args.Avatar, args.Extend); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RegisterMemberV2: " + err2.Error())
    oprot.WriteMessageBegin("RegisterMemberV2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("RegisterMemberV2", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorCheckLogin struct {
  handler MemberService
}

func (p *memberServiceProcessorCheckLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceCheckLoginArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CheckLogin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceCheckLoginResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.CheckLogin(ctx, args.User, args.Pwd, args.Update); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CheckLogin: " + err2.Error())
    oprot.WriteMessageBegin("CheckLogin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("CheckLogin", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorCheckTradePwd struct {
  handler MemberService
}

func (p *memberServiceProcessorCheckTradePwd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceCheckTradePwdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CheckTradePwd", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceCheckTradePwdResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.CheckTradePwd(ctx, args.MemberId, args.TradePwd); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CheckTradePwd: " + err2.Error())
    oprot.WriteMessageBegin("CheckTradePwd", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("CheckTradePwd", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorSwapMemberId struct {
  handler MemberService
}

func (p *memberServiceProcessorSwapMemberId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceSwapMemberIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SwapMemberId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceSwapMemberIdResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.SwapMemberId(ctx, args.Cred, args.Value); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SwapMemberId: " + err2.Error())
    oprot.WriteMessageBegin("SwapMemberId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("SwapMemberId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorMemberLevelList struct {
  handler MemberService
}

func (p *memberServiceProcessorMemberLevelList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceMemberLevelListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("MemberLevelList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceMemberLevelListResult{}
var retval []*SMemberLevel
  var err2 error
  if retval, err2 = p.handler.MemberLevelList(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberLevelList: " + err2.Error())
    oprot.WriteMessageBegin("MemberLevelList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("MemberLevelList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorGetTrustInfo struct {
  handler MemberService
}

func (p *memberServiceProcessorGetTrustInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceGetTrustInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetTrustInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceGetTrustInfoResult{}
var retval *STrustedInfo
  var err2 error
  if retval, err2 = p.handler.GetTrustInfo(ctx, args.MemberId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTrustInfo: " + err2.Error())
    oprot.WriteMessageBegin("GetTrustInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetTrustInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorSubmitTrustInfo struct {
  handler MemberService
}

func (p *memberServiceProcessorSubmitTrustInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceSubmitTrustInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SubmitTrustInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceSubmitTrustInfoResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.SubmitTrustInfo(ctx, args.MemberId, args.Info); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SubmitTrustInfo: " + err2.Error())
    oprot.WriteMessageBegin("SubmitTrustInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SubmitTrustInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorReviewTrustedInfo struct {
  handler MemberService
}

func (p *memberServiceProcessorReviewTrustedInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceReviewTrustedInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ReviewTrustedInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceReviewTrustedInfoResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.ReviewTrustedInfo(ctx, args.MemberId, args.ReviewPass, args.Remark); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReviewTrustedInfo: " + err2.Error())
    oprot.WriteMessageBegin("ReviewTrustedInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ReviewTrustedInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorGetMemberLevel struct {
  handler MemberService
}

func (p *memberServiceProcessorGetMemberLevel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceGetMemberLevelArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetMemberLevel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceGetMemberLevelResult{}
var retval *SMemberLevel
  var err2 error
  if retval, err2 = p.handler.GetMemberLevel(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetMemberLevel: " + err2.Error())
    oprot.WriteMessageBegin("GetMemberLevel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetMemberLevel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorSaveMemberLevel struct {
  handler MemberService
}

func (p *memberServiceProcessorSaveMemberLevel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceSaveMemberLevelArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SaveMemberLevel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceSaveMemberLevelResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.SaveMemberLevel(ctx, args.Level); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SaveMemberLevel: " + err2.Error())
    oprot.WriteMessageBegin("SaveMemberLevel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SaveMemberLevel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorGetLevelBySign struct {
  handler MemberService
}

func (p *memberServiceProcessorGetLevelBySign) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceGetLevelBySignArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetLevelBySign", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceGetLevelBySignResult{}
var retval *SMemberLevel
  var err2 error
  if retval, err2 = p.handler.GetLevelBySign(ctx, args.Sign); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLevelBySign: " + err2.Error())
    oprot.WriteMessageBegin("GetLevelBySign", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetLevelBySign", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorGetMember struct {
  handler MemberService
}

func (p *memberServiceProcessorGetMember) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceGetMemberArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetMember", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceGetMemberResult{}
var retval *SMember
  var err2 error
  if retval, err2 = p.handler.GetMember(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetMember: " + err2.Error())
    oprot.WriteMessageBegin("GetMember", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetMember", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorGetMemberByUser struct {
  handler MemberService
}

func (p *memberServiceProcessorGetMemberByUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceGetMemberByUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetMemberByUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceGetMemberByUserResult{}
var retval *SMember
  var err2 error
  if retval, err2 = p.handler.GetMemberByUser(ctx, args.User); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetMemberByUser: " + err2.Error())
    oprot.WriteMessageBegin("GetMemberByUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetMemberByUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorGetProfile struct {
  handler MemberService
}

func (p *memberServiceProcessorGetProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceGetProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceGetProfileResult{}
var retval *SProfile
  var err2 error
  if retval, err2 = p.handler.GetProfile(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProfile: " + err2.Error())
    oprot.WriteMessageBegin("GetProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetProfile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorActive struct {
  handler MemberService
}

func (p *memberServiceProcessorActive) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceActiveArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Active", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceActiveResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.Active(ctx, args.MemberId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Active: " + err2.Error())
    oprot.WriteMessageBegin("Active", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Active", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorLock struct {
  handler MemberService
}

func (p *memberServiceProcessorLock) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceLockArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Lock", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceLockResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.Lock(ctx, args.MemberId, args.Minutes, args.Remark); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Lock: " + err2.Error())
    oprot.WriteMessageBegin("Lock", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Lock", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorUnlock struct {
  handler MemberService
}

func (p *memberServiceProcessorUnlock) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceUnlockArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Unlock", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceUnlockResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.Unlock(ctx, args.MemberId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Unlock: " + err2.Error())
    oprot.WriteMessageBegin("Unlock", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Unlock", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorGrantFlag struct {
  handler MemberService
}

func (p *memberServiceProcessorGrantFlag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceGrantFlagArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GrantFlag", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceGrantFlagResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.GrantFlag(ctx, args.MemberId, args.Flag); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GrantFlag: " + err2.Error())
    oprot.WriteMessageBegin("GrantFlag", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GrantFlag", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorComplex struct {
  handler MemberService
}

func (p *memberServiceProcessorComplex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceComplexArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Complex", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceComplexResult{}
var retval *SComplexMember
  var err2 error
  if retval, err2 = p.handler.Complex(ctx, args.MemberId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Complex: " + err2.Error())
    oprot.WriteMessageBegin("Complex", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Complex", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorSendCode struct {
  handler MemberService
}

func (p *memberServiceProcessorSendCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceSendCodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceSendCodeResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.SendCode(ctx, args.MemberId, args.Operation, args.MsgType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendCode: " + err2.Error())
    oprot.WriteMessageBegin("SendCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SendCode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorCompareCode struct {
  handler MemberService
}

func (p *memberServiceProcessorCompareCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceCompareCodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CompareCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceCompareCodeResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.CompareCode(ctx, args.MemberId, args.Code); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CompareCode: " + err2.Error())
    oprot.WriteMessageBegin("CompareCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("CompareCode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorReceiptsCodes struct {
  handler MemberService
}

func (p *memberServiceProcessorReceiptsCodes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceReceiptsCodesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ReceiptsCodes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceReceiptsCodesResult{}
var retval []*SReceiptsCode
  var err2 error
  if retval, err2 = p.handler.ReceiptsCodes(ctx, args.MemberId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReceiptsCodes: " + err2.Error())
    oprot.WriteMessageBegin("ReceiptsCodes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ReceiptsCodes", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorSaveReceiptsCode struct {
  handler MemberService
}

func (p *memberServiceProcessorSaveReceiptsCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceSaveReceiptsCodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SaveReceiptsCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceSaveReceiptsCodeResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.SaveReceiptsCode(ctx, args.MemberId, args.Code); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SaveReceiptsCode: " + err2.Error())
    oprot.WriteMessageBegin("SaveReceiptsCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SaveReceiptsCode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorBankcards struct {
  handler MemberService
}

func (p *memberServiceProcessorBankcards) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceBankcardsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Bankcards", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceBankcardsResult{}
var retval []*SBankcard
  var err2 error
  if retval, err2 = p.handler.Bankcards(ctx, args.MemberId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Bankcards: " + err2.Error())
    oprot.WriteMessageBegin("Bankcards", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Bankcards", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorSaveBankcard struct {
  handler MemberService
}

func (p *memberServiceProcessorSaveBankcard) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceSaveBankcardArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SaveBankcard", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceSaveBankcardResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.SaveBankcard(ctx, args.MemberId, args.Card); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SaveBankcard: " + err2.Error())
    oprot.WriteMessageBegin("SaveBankcard", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SaveBankcard", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorCheckProfileComplete struct {
  handler MemberService
}

func (p *memberServiceProcessorCheckProfileComplete) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceCheckProfileCompleteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CheckProfileComplete", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceCheckProfileCompleteResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.CheckProfileComplete(ctx, args.MemberId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CheckProfileComplete: " + err2.Error())
    oprot.WriteMessageBegin("CheckProfileComplete", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("CheckProfileComplete", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorMemberLevelInfo struct {
  handler MemberService
}

func (p *memberServiceProcessorMemberLevelInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceMemberLevelInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("MemberLevelInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceMemberLevelInfoResult{}
var retval *SMemberLevelInfo
  var err2 error
  if retval, err2 = p.handler.MemberLevelInfo(ctx, args.MemberId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberLevelInfo: " + err2.Error())
    oprot.WriteMessageBegin("MemberLevelInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("MemberLevelInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorUpdateLevel struct {
  handler MemberService
}

func (p *memberServiceProcessorUpdateLevel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceUpdateLevelArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UpdateLevel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceUpdateLevelResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.UpdateLevel(ctx, args.MemberId, args.Level, args.Review, args.PaymentOrderId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateLevel: " + err2.Error())
    oprot.WriteMessageBegin("UpdateLevel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("UpdateLevel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorChangePhone struct {
  handler MemberService
}

func (p *memberServiceProcessorChangePhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceChangePhoneArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ChangePhone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceChangePhoneResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.ChangePhone(ctx, args.MemberId, args.Phone); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ChangePhone: " + err2.Error())
    oprot.WriteMessageBegin("ChangePhone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ChangePhone", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorChangeUser struct {
  handler MemberService
}

func (p *memberServiceProcessorChangeUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceChangeUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ChangeUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceChangeUserResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.ChangeUser(ctx, args.MemberId, args.Usr); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ChangeUser: " + err2.Error())
    oprot.WriteMessageBegin("ChangeUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ChangeUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorModifyPwd struct {
  handler MemberService
}

func (p *memberServiceProcessorModifyPwd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceModifyPwdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ModifyPwd", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceModifyPwdResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.ModifyPwd(ctx, args.MemberId, args.Old, args.Pwd); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ModifyPwd: " + err2.Error())
    oprot.WriteMessageBegin("ModifyPwd", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ModifyPwd", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorModifyTradePwd struct {
  handler MemberService
}

func (p *memberServiceProcessorModifyTradePwd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceModifyTradePwdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ModifyTradePwd", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceModifyTradePwdResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.ModifyTradePwd(ctx, args.MemberId, args.Old, args.Pwd); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ModifyTradePwd: " + err2.Error())
    oprot.WriteMessageBegin("ModifyTradePwd", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ModifyTradePwd", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorChangeInviterId struct {
  handler MemberService
}

func (p *memberServiceProcessorChangeInviterId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceChangeInviterIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ChangeInviterId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceChangeInviterIdResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.ChangeInviterId(ctx, args.MemberId, args.InviterId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ChangeInviterId: " + err2.Error())
    oprot.WriteMessageBegin("ChangeInviterId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ChangeInviterId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorOrdersQuantity struct {
  handler MemberService
}

func (p *memberServiceProcessorOrdersQuantity) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceOrdersQuantityArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("OrdersQuantity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceOrdersQuantityResult{}
var retval map[int32]int32
  var err2 error
  if retval, err2 = p.handler.OrdersQuantity(ctx, args.MemberId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OrdersQuantity: " + err2.Error())
    oprot.WriteMessageBegin("OrdersQuantity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("OrdersQuantity", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorPremium struct {
  handler MemberService
}

func (p *memberServiceProcessorPremium) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServicePremiumArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Premium", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServicePremiumResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.Premium(ctx, args.MemberId, args.V, args.Expires); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Premium: " + err2.Error())
    oprot.WriteMessageBegin("Premium", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Premium", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorGetToken struct {
  handler MemberService
}

func (p *memberServiceProcessorGetToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceGetTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceGetTokenResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetToken(ctx, args.MemberId, args.Reset); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetToken: " + err2.Error())
    oprot.WriteMessageBegin("GetToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetToken", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorCheckToken struct {
  handler MemberService
}

func (p *memberServiceProcessorCheckToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceCheckTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CheckToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceCheckTokenResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.CheckToken(ctx, args.MemberId, args.Token); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CheckToken: " + err2.Error())
    oprot.WriteMessageBegin("CheckToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("CheckToken", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorRemoveToken struct {
  handler MemberService
}

func (p *memberServiceProcessorRemoveToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceRemoveTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RemoveToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceRemoveTokenResult{}
  var err2 error
  if err2 = p.handler.RemoveToken(ctx, args.MemberId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RemoveToken: " + err2.Error())
    oprot.WriteMessageBegin("RemoveToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("RemoveToken", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorGetAddressList struct {
  handler MemberService
}

func (p *memberServiceProcessorGetAddressList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceGetAddressListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetAddressList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceGetAddressListResult{}
var retval []*SAddress
  var err2 error
  if retval, err2 = p.handler.GetAddressList(ctx, args.MemberId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAddressList: " + err2.Error())
    oprot.WriteMessageBegin("GetAddressList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetAddressList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorGetAddress struct {
  handler MemberService
}

func (p *memberServiceProcessorGetAddress) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceGetAddressArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetAddress", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceGetAddressResult{}
var retval *SAddress
  var err2 error
  if retval, err2 = p.handler.GetAddress(ctx, args.MemberId, args.AddrId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAddress: " + err2.Error())
    oprot.WriteMessageBegin("GetAddress", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetAddress", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorGetAccount struct {
  handler MemberService
}

func (p *memberServiceProcessorGetAccount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceGetAccountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetAccount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceGetAccountResult{}
var retval *SAccount
  var err2 error
  if retval, err2 = p.handler.GetAccount(ctx, args.MemberId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAccount: " + err2.Error())
    oprot.WriteMessageBegin("GetAccount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetAccount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorInviterArray struct {
  handler MemberService
}

func (p *memberServiceProcessorInviterArray) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceInviterArrayArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("InviterArray", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceInviterArrayResult{}
var retval []int64
  var err2 error
  if retval, err2 = p.handler.InviterArray(ctx, args.MemberId, args.Depth); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InviterArray: " + err2.Error())
    oprot.WriteMessageBegin("InviterArray", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("InviterArray", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorInviteMembersQuantity struct {
  handler MemberService
}

func (p *memberServiceProcessorInviteMembersQuantity) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceInviteMembersQuantityArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("InviteMembersQuantity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceInviteMembersQuantityResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.InviteMembersQuantity(ctx, args.MemberId, args.Depth); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InviteMembersQuantity: " + err2.Error())
    oprot.WriteMessageBegin("InviteMembersQuantity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("InviteMembersQuantity", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorQueryInviteQuantity struct {
  handler MemberService
}

func (p *memberServiceProcessorQueryInviteQuantity) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceQueryInviteQuantityArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("QueryInviteQuantity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceQueryInviteQuantityResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.QueryInviteQuantity(ctx, args.MemberId, args.Data); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryInviteQuantity: " + err2.Error())
    oprot.WriteMessageBegin("QueryInviteQuantity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("QueryInviteQuantity", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorQueryInviteArray struct {
  handler MemberService
}

func (p *memberServiceProcessorQueryInviteArray) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceQueryInviteArrayArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("QueryInviteArray", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceQueryInviteArrayResult{}
var retval []int64
  var err2 error
  if retval, err2 = p.handler.QueryInviteArray(ctx, args.MemberId, args.Data); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryInviteArray: " + err2.Error())
    oprot.WriteMessageBegin("QueryInviteArray", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("QueryInviteArray", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorAccountCharge struct {
  handler MemberService
}

func (p *memberServiceProcessorAccountCharge) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceAccountChargeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AccountCharge", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceAccountChargeResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.AccountCharge(ctx, args.MemberId, args.Account, args.Title, args.Amount, args.OuterNo, args.Remark); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AccountCharge: " + err2.Error())
    oprot.WriteMessageBegin("AccountCharge", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("AccountCharge", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorAccountConsume struct {
  handler MemberService
}

func (p *memberServiceProcessorAccountConsume) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceAccountConsumeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AccountConsume", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceAccountConsumeResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.AccountConsume(ctx, args.MemberId, args.Account, args.Title, args.Amount, args.OuterNo, args.Remark); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AccountConsume: " + err2.Error())
    oprot.WriteMessageBegin("AccountConsume", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("AccountConsume", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorAccountDiscount struct {
  handler MemberService
}

func (p *memberServiceProcessorAccountDiscount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceAccountDiscountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AccountDiscount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceAccountDiscountResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.AccountDiscount(ctx, args.MemberId, args.Account, args.Title, args.Amount, args.OuterNo, args.Remark); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AccountDiscount: " + err2.Error())
    oprot.WriteMessageBegin("AccountDiscount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("AccountDiscount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorAccountRefund struct {
  handler MemberService
}

func (p *memberServiceProcessorAccountRefund) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceAccountRefundArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AccountRefund", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceAccountRefundResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.AccountRefund(ctx, args.MemberId, args.Account, args.Title, args.Amount, args.OuterNo, args.Remark); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AccountRefund: " + err2.Error())
    oprot.WriteMessageBegin("AccountRefund", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("AccountRefund", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorAccountAdjust struct {
  handler MemberService
}

func (p *memberServiceProcessorAccountAdjust) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceAccountAdjustArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AccountAdjust", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceAccountAdjustResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.AccountAdjust(ctx, args.MemberId, args.Account, args.Value, args.RelateUser, args.Remark); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AccountAdjust: " + err2.Error())
    oprot.WriteMessageBegin("AccountAdjust", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("AccountAdjust", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorB4EAuth struct {
  handler MemberService
}

func (p *memberServiceProcessorB4EAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceB4EAuthArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("B4EAuth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceB4EAuthResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.B4EAuth(ctx, args.MemberId, args.Action, args.Data); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing B4EAuth: " + err2.Error())
    oprot.WriteMessageBegin("B4EAuth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("B4EAuth", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorPagingAccountLog struct {
  handler MemberService
}

func (p *memberServiceProcessorPagingAccountLog) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServicePagingAccountLogArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("PagingAccountLog", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServicePagingAccountLogResult{}
var retval *ttype.SPagingResult_
  var err2 error
  if retval, err2 = p.handler.PagingAccountLog(ctx, args.MemberId, args.AccountType, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PagingAccountLog: " + err2.Error())
    oprot.WriteMessageBegin("PagingAccountLog", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("PagingAccountLog", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - User
//  - Pwd
//  - Flag
//  - Name
//  - Phone
//  - Email
//  - Avatar
//  - Extend
type MemberServiceRegisterMemberV2Args struct {
  User string `thrift:"user,1" db:"user" json:"user"`
  Pwd string `thrift:"pwd,2" db:"pwd" json:"pwd"`
  Flag int32 `thrift:"flag,3" db:"flag" json:"flag"`
  Name string `thrift:"name,4" db:"name" json:"name"`
  Phone string `thrift:"phone,5" db:"phone" json:"phone"`
  Email string `thrift:"email,6" db:"email" json:"email"`
  Avatar string `thrift:"avatar,7" db:"avatar" json:"avatar"`
  Extend map[string]string `thrift:"extend,8" db:"extend" json:"extend"`
}

func NewMemberServiceRegisterMemberV2Args() *MemberServiceRegisterMemberV2Args {
  return &MemberServiceRegisterMemberV2Args{}
}


func (p *MemberServiceRegisterMemberV2Args) GetUser() string {
  return p.User
}

func (p *MemberServiceRegisterMemberV2Args) GetPwd() string {
  return p.Pwd
}

func (p *MemberServiceRegisterMemberV2Args) GetFlag() int32 {
  return p.Flag
}

func (p *MemberServiceRegisterMemberV2Args) GetName() string {
  return p.Name
}

func (p *MemberServiceRegisterMemberV2Args) GetPhone() string {
  return p.Phone
}

func (p *MemberServiceRegisterMemberV2Args) GetEmail() string {
  return p.Email
}

func (p *MemberServiceRegisterMemberV2Args) GetAvatar() string {
  return p.Avatar
}

func (p *MemberServiceRegisterMemberV2Args) GetExtend() map[string]string {
  return p.Extend
}
func (p *MemberServiceRegisterMemberV2Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceRegisterMemberV2Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *MemberServiceRegisterMemberV2Args)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *MemberServiceRegisterMemberV2Args)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Flag = v
}
  return nil
}

func (p *MemberServiceRegisterMemberV2Args)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *MemberServiceRegisterMemberV2Args)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *MemberServiceRegisterMemberV2Args)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *MemberServiceRegisterMemberV2Args)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Avatar = v
}
  return nil
}

func (p *MemberServiceRegisterMemberV2Args)  ReadField8(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extend =  tMap
  for i := 0; i < size; i ++ {
var _key106 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key106 = v
}
var _val107 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val107 = v
}
    p.Extend[_key106] = _val107
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MemberServiceRegisterMemberV2Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterMemberV2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceRegisterMemberV2Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := oprot.WriteString(string(p.User)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *MemberServiceRegisterMemberV2Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err) }
  if err := oprot.WriteString(string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err) }
  return err
}

func (p *MemberServiceRegisterMemberV2Args) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("flag", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:flag: ", p), err) }
  if err := oprot.WriteI32(int32(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flag (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:flag: ", p), err) }
  return err
}

func (p *MemberServiceRegisterMemberV2Args) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:name: ", p), err) }
  return err
}

func (p *MemberServiceRegisterMemberV2Args) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:phone: ", p), err) }
  return err
}

func (p *MemberServiceRegisterMemberV2Args) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:email: ", p), err) }
  return err
}

func (p *MemberServiceRegisterMemberV2Args) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("avatar", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:avatar: ", p), err) }
  if err := oprot.WriteString(string(p.Avatar)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avatar (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:avatar: ", p), err) }
  return err
}

func (p *MemberServiceRegisterMemberV2Args) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extend", thrift.MAP, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:extend: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extend {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:extend: ", p), err) }
  return err
}

func (p *MemberServiceRegisterMemberV2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceRegisterMemberV2Args(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceRegisterMemberV2Result struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceRegisterMemberV2Result() *MemberServiceRegisterMemberV2Result {
  return &MemberServiceRegisterMemberV2Result{}
}

var MemberServiceRegisterMemberV2Result_Success_DEFAULT *ttype.Result_
func (p *MemberServiceRegisterMemberV2Result) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceRegisterMemberV2Result_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceRegisterMemberV2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceRegisterMemberV2Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceRegisterMemberV2Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceRegisterMemberV2Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterMemberV2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceRegisterMemberV2Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceRegisterMemberV2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceRegisterMemberV2Result(%+v)", *p)
}

// Attributes:
//  - User
//  - Pwd
//  - Update
type MemberServiceCheckLoginArgs struct {
  User string `thrift:"user,1" db:"user" json:"user"`
  Pwd string `thrift:"pwd,2" db:"pwd" json:"pwd"`
  Update bool `thrift:"update,3" db:"update" json:"update"`
}

func NewMemberServiceCheckLoginArgs() *MemberServiceCheckLoginArgs {
  return &MemberServiceCheckLoginArgs{}
}


func (p *MemberServiceCheckLoginArgs) GetUser() string {
  return p.User
}

func (p *MemberServiceCheckLoginArgs) GetPwd() string {
  return p.Pwd
}

func (p *MemberServiceCheckLoginArgs) GetUpdate() bool {
  return p.Update
}
func (p *MemberServiceCheckLoginArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceCheckLoginArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *MemberServiceCheckLoginArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *MemberServiceCheckLoginArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Update = v
}
  return nil
}

func (p *MemberServiceCheckLoginArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CheckLogin_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceCheckLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := oprot.WriteString(string(p.User)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *MemberServiceCheckLoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err) }
  if err := oprot.WriteString(string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err) }
  return err
}

func (p *MemberServiceCheckLoginArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("update", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:update: ", p), err) }
  if err := oprot.WriteBool(bool(p.Update)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.update (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:update: ", p), err) }
  return err
}

func (p *MemberServiceCheckLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceCheckLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceCheckLoginResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceCheckLoginResult() *MemberServiceCheckLoginResult {
  return &MemberServiceCheckLoginResult{}
}

var MemberServiceCheckLoginResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceCheckLoginResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceCheckLoginResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceCheckLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceCheckLoginResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceCheckLoginResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceCheckLoginResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CheckLogin_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceCheckLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceCheckLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceCheckLoginResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - TradePwd
type MemberServiceCheckTradePwdArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  TradePwd string `thrift:"tradePwd,2" db:"tradePwd" json:"tradePwd"`
}

func NewMemberServiceCheckTradePwdArgs() *MemberServiceCheckTradePwdArgs {
  return &MemberServiceCheckTradePwdArgs{}
}


func (p *MemberServiceCheckTradePwdArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceCheckTradePwdArgs) GetTradePwd() string {
  return p.TradePwd
}
func (p *MemberServiceCheckTradePwdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceCheckTradePwdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceCheckTradePwdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TradePwd = v
}
  return nil
}

func (p *MemberServiceCheckTradePwdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CheckTradePwd_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceCheckTradePwdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceCheckTradePwdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradePwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tradePwd: ", p), err) }
  if err := oprot.WriteString(string(p.TradePwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradePwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tradePwd: ", p), err) }
  return err
}

func (p *MemberServiceCheckTradePwdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceCheckTradePwdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceCheckTradePwdResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceCheckTradePwdResult() *MemberServiceCheckTradePwdResult {
  return &MemberServiceCheckTradePwdResult{}
}

var MemberServiceCheckTradePwdResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceCheckTradePwdResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceCheckTradePwdResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceCheckTradePwdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceCheckTradePwdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceCheckTradePwdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceCheckTradePwdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CheckTradePwd_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceCheckTradePwdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceCheckTradePwdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceCheckTradePwdResult(%+v)", *p)
}

// Attributes:
//  - Cred
//  - Value
type MemberServiceSwapMemberIdArgs struct {
  Cred  ECredentials `thrift:"cred,1" db:"cred" json:"cred"`
  Value string       `thrift:"value,2" db:"value" json:"value"`
}

func NewMemberServiceSwapMemberIdArgs() *MemberServiceSwapMemberIdArgs {
  return &MemberServiceSwapMemberIdArgs{}
}


func (p *MemberServiceSwapMemberIdArgs) GetCred() ECredentials {
  return p.Cred
}

func (p *MemberServiceSwapMemberIdArgs) GetValue() string {
  return p.Value
}
func (p *MemberServiceSwapMemberIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceSwapMemberIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ECredentials(v)
  p.Cred = temp
}
  return nil
}

func (p *MemberServiceSwapMemberIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *MemberServiceSwapMemberIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SwapMemberId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceSwapMemberIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cred", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cred: ", p), err) }
  if err := oprot.WriteI32(int32(p.Cred)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cred (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cred: ", p), err) }
  return err
}

func (p *MemberServiceSwapMemberIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *MemberServiceSwapMemberIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceSwapMemberIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceSwapMemberIdResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceSwapMemberIdResult() *MemberServiceSwapMemberIdResult {
  return &MemberServiceSwapMemberIdResult{}
}

var MemberServiceSwapMemberIdResult_Success_DEFAULT int64
func (p *MemberServiceSwapMemberIdResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return MemberServiceSwapMemberIdResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MemberServiceSwapMemberIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceSwapMemberIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceSwapMemberIdResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MemberServiceSwapMemberIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SwapMemberId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceSwapMemberIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceSwapMemberIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceSwapMemberIdResult(%+v)", *p)
}

type MemberServiceMemberLevelListArgs struct {
}

func NewMemberServiceMemberLevelListArgs() *MemberServiceMemberLevelListArgs {
  return &MemberServiceMemberLevelListArgs{}
}

func (p *MemberServiceMemberLevelListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceMemberLevelListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MemberLevelList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceMemberLevelListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceMemberLevelListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceMemberLevelListResult struct {
  Success []*SMemberLevel `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceMemberLevelListResult() *MemberServiceMemberLevelListResult {
  return &MemberServiceMemberLevelListResult{}
}

var MemberServiceMemberLevelListResult_Success_DEFAULT []*SMemberLevel

func (p *MemberServiceMemberLevelListResult) GetSuccess() []*SMemberLevel {
  return p.Success
}
func (p *MemberServiceMemberLevelListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceMemberLevelListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceMemberLevelListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SMemberLevel, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem108 := &SMemberLevel{}
    if err := _elem108.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem108), err)
    }
    p.Success = append(p.Success, _elem108)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MemberServiceMemberLevelListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MemberLevelList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceMemberLevelListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceMemberLevelListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceMemberLevelListResult(%+v)", *p)
}

// Attributes:
//  - MemberId
type MemberServiceGetTrustInfoArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
}

func NewMemberServiceGetTrustInfoArgs() *MemberServiceGetTrustInfoArgs {
  return &MemberServiceGetTrustInfoArgs{}
}


func (p *MemberServiceGetTrustInfoArgs) GetMemberId() int64 {
  return p.MemberId
}
func (p *MemberServiceGetTrustInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetTrustInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceGetTrustInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetTrustInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetTrustInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceGetTrustInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetTrustInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetTrustInfoResult struct {
  Success *STrustedInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetTrustInfoResult() *MemberServiceGetTrustInfoResult {
  return &MemberServiceGetTrustInfoResult{}
}

var MemberServiceGetTrustInfoResult_Success_DEFAULT *STrustedInfo
func (p *MemberServiceGetTrustInfoResult) GetSuccess() *STrustedInfo {
  if !p.IsSetSuccess() {
    return MemberServiceGetTrustInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceGetTrustInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceGetTrustInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetTrustInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &STrustedInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceGetTrustInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetTrustInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetTrustInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceGetTrustInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetTrustInfoResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Info
type MemberServiceSubmitTrustInfoArgs struct {
  MemberId int64     `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Info *STrustedInfo `thrift:"info,2" db:"info" json:"info"`
}

func NewMemberServiceSubmitTrustInfoArgs() *MemberServiceSubmitTrustInfoArgs {
  return &MemberServiceSubmitTrustInfoArgs{}
}


func (p *MemberServiceSubmitTrustInfoArgs) GetMemberId() int64 {
  return p.MemberId
}
var MemberServiceSubmitTrustInfoArgs_Info_DEFAULT *STrustedInfo
func (p *MemberServiceSubmitTrustInfoArgs) GetInfo() *STrustedInfo {
  if !p.IsSetInfo() {
    return MemberServiceSubmitTrustInfoArgs_Info_DEFAULT
  }
return p.Info
}
func (p *MemberServiceSubmitTrustInfoArgs) IsSetInfo() bool {
  return p.Info != nil
}

func (p *MemberServiceSubmitTrustInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceSubmitTrustInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceSubmitTrustInfoArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Info = &STrustedInfo{}
  if err := p.Info.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *MemberServiceSubmitTrustInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SubmitTrustInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceSubmitTrustInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceSubmitTrustInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("info", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err) }
  if err := p.Info.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err) }
  return err
}

func (p *MemberServiceSubmitTrustInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceSubmitTrustInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceSubmitTrustInfoResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceSubmitTrustInfoResult() *MemberServiceSubmitTrustInfoResult {
  return &MemberServiceSubmitTrustInfoResult{}
}

var MemberServiceSubmitTrustInfoResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceSubmitTrustInfoResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceSubmitTrustInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceSubmitTrustInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceSubmitTrustInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceSubmitTrustInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceSubmitTrustInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SubmitTrustInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceSubmitTrustInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceSubmitTrustInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceSubmitTrustInfoResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - ReviewPass
//  - Remark
type MemberServiceReviewTrustedInfoArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  ReviewPass bool `thrift:"reviewPass,2" db:"reviewPass" json:"reviewPass"`
  Remark string `thrift:"remark,3" db:"remark" json:"remark"`
}

func NewMemberServiceReviewTrustedInfoArgs() *MemberServiceReviewTrustedInfoArgs {
  return &MemberServiceReviewTrustedInfoArgs{}
}


func (p *MemberServiceReviewTrustedInfoArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceReviewTrustedInfoArgs) GetReviewPass() bool {
  return p.ReviewPass
}

func (p *MemberServiceReviewTrustedInfoArgs) GetRemark() string {
  return p.Remark
}
func (p *MemberServiceReviewTrustedInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceReviewTrustedInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceReviewTrustedInfoArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ReviewPass = v
}
  return nil
}

func (p *MemberServiceReviewTrustedInfoArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Remark = v
}
  return nil
}

func (p *MemberServiceReviewTrustedInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReviewTrustedInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceReviewTrustedInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceReviewTrustedInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reviewPass", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reviewPass: ", p), err) }
  if err := oprot.WriteBool(bool(p.ReviewPass)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reviewPass (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reviewPass: ", p), err) }
  return err
}

func (p *MemberServiceReviewTrustedInfoArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remark", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:remark: ", p), err) }
  if err := oprot.WriteString(string(p.Remark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remark (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:remark: ", p), err) }
  return err
}

func (p *MemberServiceReviewTrustedInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceReviewTrustedInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceReviewTrustedInfoResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceReviewTrustedInfoResult() *MemberServiceReviewTrustedInfoResult {
  return &MemberServiceReviewTrustedInfoResult{}
}

var MemberServiceReviewTrustedInfoResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceReviewTrustedInfoResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceReviewTrustedInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceReviewTrustedInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceReviewTrustedInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceReviewTrustedInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceReviewTrustedInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReviewTrustedInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceReviewTrustedInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceReviewTrustedInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceReviewTrustedInfoResult(%+v)", *p)
}

// Attributes:
//  - ID
type MemberServiceGetMemberLevelArgs struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
}

func NewMemberServiceGetMemberLevelArgs() *MemberServiceGetMemberLevelArgs {
  return &MemberServiceGetMemberLevelArgs{}
}


func (p *MemberServiceGetMemberLevelArgs) GetID() int32 {
  return p.ID
}
func (p *MemberServiceGetMemberLevelArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetMemberLevelArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *MemberServiceGetMemberLevelArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetMemberLevel_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetMemberLevelArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *MemberServiceGetMemberLevelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetMemberLevelArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetMemberLevelResult struct {
  Success *SMemberLevel `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetMemberLevelResult() *MemberServiceGetMemberLevelResult {
  return &MemberServiceGetMemberLevelResult{}
}

var MemberServiceGetMemberLevelResult_Success_DEFAULT *SMemberLevel
func (p *MemberServiceGetMemberLevelResult) GetSuccess() *SMemberLevel {
  if !p.IsSetSuccess() {
    return MemberServiceGetMemberLevelResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceGetMemberLevelResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceGetMemberLevelResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetMemberLevelResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SMemberLevel{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceGetMemberLevelResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetMemberLevel_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetMemberLevelResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceGetMemberLevelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetMemberLevelResult(%+v)", *p)
}

// Attributes:
//  - Level
type MemberServiceSaveMemberLevelArgs struct {
  Level *SMemberLevel `thrift:"level,1" db:"level" json:"level"`
}

func NewMemberServiceSaveMemberLevelArgs() *MemberServiceSaveMemberLevelArgs {
  return &MemberServiceSaveMemberLevelArgs{}
}

var MemberServiceSaveMemberLevelArgs_Level_DEFAULT *SMemberLevel
func (p *MemberServiceSaveMemberLevelArgs) GetLevel() *SMemberLevel {
  if !p.IsSetLevel() {
    return MemberServiceSaveMemberLevelArgs_Level_DEFAULT
  }
return p.Level
}
func (p *MemberServiceSaveMemberLevelArgs) IsSetLevel() bool {
  return p.Level != nil
}

func (p *MemberServiceSaveMemberLevelArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceSaveMemberLevelArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Level = &SMemberLevel{}
  if err := p.Level.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Level), err)
  }
  return nil
}

func (p *MemberServiceSaveMemberLevelArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SaveMemberLevel_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceSaveMemberLevelArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("level", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:level: ", p), err) }
  if err := p.Level.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Level), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:level: ", p), err) }
  return err
}

func (p *MemberServiceSaveMemberLevelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceSaveMemberLevelArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceSaveMemberLevelResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceSaveMemberLevelResult() *MemberServiceSaveMemberLevelResult {
  return &MemberServiceSaveMemberLevelResult{}
}

var MemberServiceSaveMemberLevelResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceSaveMemberLevelResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceSaveMemberLevelResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceSaveMemberLevelResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceSaveMemberLevelResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceSaveMemberLevelResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceSaveMemberLevelResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SaveMemberLevel_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceSaveMemberLevelResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceSaveMemberLevelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceSaveMemberLevelResult(%+v)", *p)
}

// Attributes:
//  - Sign
type MemberServiceGetLevelBySignArgs struct {
  Sign string `thrift:"sign,1" db:"sign" json:"sign"`
}

func NewMemberServiceGetLevelBySignArgs() *MemberServiceGetLevelBySignArgs {
  return &MemberServiceGetLevelBySignArgs{}
}


func (p *MemberServiceGetLevelBySignArgs) GetSign() string {
  return p.Sign
}
func (p *MemberServiceGetLevelBySignArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetLevelBySignArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Sign = v
}
  return nil
}

func (p *MemberServiceGetLevelBySignArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetLevelBySign_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetLevelBySignArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sign", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sign: ", p), err) }
  if err := oprot.WriteString(string(p.Sign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sign (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sign: ", p), err) }
  return err
}

func (p *MemberServiceGetLevelBySignArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetLevelBySignArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetLevelBySignResult struct {
  Success *SMemberLevel `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetLevelBySignResult() *MemberServiceGetLevelBySignResult {
  return &MemberServiceGetLevelBySignResult{}
}

var MemberServiceGetLevelBySignResult_Success_DEFAULT *SMemberLevel
func (p *MemberServiceGetLevelBySignResult) GetSuccess() *SMemberLevel {
  if !p.IsSetSuccess() {
    return MemberServiceGetLevelBySignResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceGetLevelBySignResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceGetLevelBySignResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetLevelBySignResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SMemberLevel{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceGetLevelBySignResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetLevelBySign_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetLevelBySignResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceGetLevelBySignResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetLevelBySignResult(%+v)", *p)
}

// Attributes:
//  - ID
type MemberServiceGetMemberArgs struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewMemberServiceGetMemberArgs() *MemberServiceGetMemberArgs {
  return &MemberServiceGetMemberArgs{}
}


func (p *MemberServiceGetMemberArgs) GetID() int64 {
  return p.ID
}
func (p *MemberServiceGetMemberArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetMemberArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *MemberServiceGetMemberArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetMember_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *MemberServiceGetMemberArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetMemberArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetMemberResult struct {
  Success *SMember `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetMemberResult() *MemberServiceGetMemberResult {
  return &MemberServiceGetMemberResult{}
}

var MemberServiceGetMemberResult_Success_DEFAULT *SMember
func (p *MemberServiceGetMemberResult) GetSuccess() *SMember {
  if !p.IsSetSuccess() {
    return MemberServiceGetMemberResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceGetMemberResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceGetMemberResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetMemberResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SMember{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceGetMemberResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetMember_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceGetMemberResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetMemberResult(%+v)", *p)
}

// Attributes:
//  - User
type MemberServiceGetMemberByUserArgs struct {
  User string `thrift:"user,1" db:"user" json:"user"`
}

func NewMemberServiceGetMemberByUserArgs() *MemberServiceGetMemberByUserArgs {
  return &MemberServiceGetMemberByUserArgs{}
}


func (p *MemberServiceGetMemberByUserArgs) GetUser() string {
  return p.User
}
func (p *MemberServiceGetMemberByUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetMemberByUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *MemberServiceGetMemberByUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetMemberByUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetMemberByUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := oprot.WriteString(string(p.User)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *MemberServiceGetMemberByUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetMemberByUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetMemberByUserResult struct {
  Success *SMember `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetMemberByUserResult() *MemberServiceGetMemberByUserResult {
  return &MemberServiceGetMemberByUserResult{}
}

var MemberServiceGetMemberByUserResult_Success_DEFAULT *SMember
func (p *MemberServiceGetMemberByUserResult) GetSuccess() *SMember {
  if !p.IsSetSuccess() {
    return MemberServiceGetMemberByUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceGetMemberByUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceGetMemberByUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetMemberByUserResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SMember{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceGetMemberByUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetMemberByUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetMemberByUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceGetMemberByUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetMemberByUserResult(%+v)", *p)
}

// Attributes:
//  - ID
type MemberServiceGetProfileArgs struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewMemberServiceGetProfileArgs() *MemberServiceGetProfileArgs {
  return &MemberServiceGetProfileArgs{}
}


func (p *MemberServiceGetProfileArgs) GetID() int64 {
  return p.ID
}
func (p *MemberServiceGetProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *MemberServiceGetProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *MemberServiceGetProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetProfileResult struct {
  Success *SProfile `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetProfileResult() *MemberServiceGetProfileResult {
  return &MemberServiceGetProfileResult{}
}

var MemberServiceGetProfileResult_Success_DEFAULT *SProfile
func (p *MemberServiceGetProfileResult) GetSuccess() *SProfile {
  if !p.IsSetSuccess() {
    return MemberServiceGetProfileResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceGetProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceGetProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetProfileResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SProfile{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceGetProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceGetProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetProfileResult(%+v)", *p)
}

// Attributes:
//  - MemberId
type MemberServiceActiveArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
}

func NewMemberServiceActiveArgs() *MemberServiceActiveArgs {
  return &MemberServiceActiveArgs{}
}


func (p *MemberServiceActiveArgs) GetMemberId() int64 {
  return p.MemberId
}
func (p *MemberServiceActiveArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceActiveArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceActiveArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Active_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceActiveArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceActiveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceActiveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceActiveResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceActiveResult() *MemberServiceActiveResult {
  return &MemberServiceActiveResult{}
}

var MemberServiceActiveResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceActiveResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceActiveResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceActiveResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceActiveResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceActiveResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceActiveResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Active_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceActiveResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceActiveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceActiveResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Minutes
//  - Remark
type MemberServiceLockArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Minutes int32 `thrift:"minutes,2" db:"minutes" json:"minutes"`
  Remark string `thrift:"remark,3" db:"remark" json:"remark"`
}

func NewMemberServiceLockArgs() *MemberServiceLockArgs {
  return &MemberServiceLockArgs{}
}


func (p *MemberServiceLockArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceLockArgs) GetMinutes() int32 {
  return p.Minutes
}

func (p *MemberServiceLockArgs) GetRemark() string {
  return p.Remark
}
func (p *MemberServiceLockArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceLockArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceLockArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Minutes = v
}
  return nil
}

func (p *MemberServiceLockArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Remark = v
}
  return nil
}

func (p *MemberServiceLockArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Lock_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceLockArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceLockArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("minutes", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:minutes: ", p), err) }
  if err := oprot.WriteI32(int32(p.Minutes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minutes (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:minutes: ", p), err) }
  return err
}

func (p *MemberServiceLockArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remark", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:remark: ", p), err) }
  if err := oprot.WriteString(string(p.Remark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remark (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:remark: ", p), err) }
  return err
}

func (p *MemberServiceLockArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceLockArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceLockResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceLockResult() *MemberServiceLockResult {
  return &MemberServiceLockResult{}
}

var MemberServiceLockResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceLockResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceLockResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceLockResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceLockResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceLockResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceLockResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Lock_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceLockResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceLockResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceLockResult(%+v)", *p)
}

// Attributes:
//  - MemberId
type MemberServiceUnlockArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
}

func NewMemberServiceUnlockArgs() *MemberServiceUnlockArgs {
  return &MemberServiceUnlockArgs{}
}


func (p *MemberServiceUnlockArgs) GetMemberId() int64 {
  return p.MemberId
}
func (p *MemberServiceUnlockArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceUnlockArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceUnlockArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Unlock_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceUnlockArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceUnlockArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceUnlockArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceUnlockResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceUnlockResult() *MemberServiceUnlockResult {
  return &MemberServiceUnlockResult{}
}

var MemberServiceUnlockResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceUnlockResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceUnlockResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceUnlockResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceUnlockResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceUnlockResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceUnlockResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Unlock_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceUnlockResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceUnlockResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceUnlockResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Flag
type MemberServiceGrantFlagArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Flag int32 `thrift:"flag,2" db:"flag" json:"flag"`
}

func NewMemberServiceGrantFlagArgs() *MemberServiceGrantFlagArgs {
  return &MemberServiceGrantFlagArgs{}
}


func (p *MemberServiceGrantFlagArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceGrantFlagArgs) GetFlag() int32 {
  return p.Flag
}
func (p *MemberServiceGrantFlagArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGrantFlagArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceGrantFlagArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Flag = v
}
  return nil
}

func (p *MemberServiceGrantFlagArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GrantFlag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGrantFlagArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceGrantFlagArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("flag", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:flag: ", p), err) }
  if err := oprot.WriteI32(int32(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flag (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:flag: ", p), err) }
  return err
}

func (p *MemberServiceGrantFlagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGrantFlagArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGrantFlagResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGrantFlagResult() *MemberServiceGrantFlagResult {
  return &MemberServiceGrantFlagResult{}
}

var MemberServiceGrantFlagResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceGrantFlagResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceGrantFlagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceGrantFlagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceGrantFlagResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGrantFlagResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceGrantFlagResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GrantFlag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGrantFlagResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceGrantFlagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGrantFlagResult(%+v)", *p)
}

// Attributes:
//  - MemberId
type MemberServiceComplexArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
}

func NewMemberServiceComplexArgs() *MemberServiceComplexArgs {
  return &MemberServiceComplexArgs{}
}


func (p *MemberServiceComplexArgs) GetMemberId() int64 {
  return p.MemberId
}
func (p *MemberServiceComplexArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceComplexArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceComplexArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Complex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceComplexArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceComplexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceComplexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceComplexResult struct {
  Success *SComplexMember `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceComplexResult() *MemberServiceComplexResult {
  return &MemberServiceComplexResult{}
}

var MemberServiceComplexResult_Success_DEFAULT *SComplexMember
func (p *MemberServiceComplexResult) GetSuccess() *SComplexMember {
  if !p.IsSetSuccess() {
    return MemberServiceComplexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceComplexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceComplexResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceComplexResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SComplexMember{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceComplexResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Complex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceComplexResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceComplexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceComplexResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Operation
//  - MsgType
type MemberServiceSendCodeArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Operation string                          `thrift:"operation,2" db:"operation" json:"operation"`
  MsgType   message_service.EMessageChannel `thrift:"msgType,3" db:"msgType" json:"msgType"`
}

func NewMemberServiceSendCodeArgs() *MemberServiceSendCodeArgs {
  return &MemberServiceSendCodeArgs{}
}


func (p *MemberServiceSendCodeArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceSendCodeArgs) GetOperation() string {
  return p.Operation
}

func (p *MemberServiceSendCodeArgs) GetMsgType() message_service.EMessageChannel {
  return p.MsgType
}
func (p *MemberServiceSendCodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceSendCodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceSendCodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Operation = v
}
  return nil
}

func (p *MemberServiceSendCodeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := message_service.EMessageChannel(v)
  p.MsgType = temp
}
  return nil
}

func (p *MemberServiceSendCodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceSendCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceSendCodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("operation", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:operation: ", p), err) }
  if err := oprot.WriteString(string(p.Operation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.operation (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:operation: ", p), err) }
  return err
}

func (p *MemberServiceSendCodeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msgType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msgType: ", p), err) }
  if err := oprot.WriteI32(int32(p.MsgType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msgType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:msgType: ", p), err) }
  return err
}

func (p *MemberServiceSendCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceSendCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceSendCodeResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceSendCodeResult() *MemberServiceSendCodeResult {
  return &MemberServiceSendCodeResult{}
}

var MemberServiceSendCodeResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceSendCodeResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceSendCodeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceSendCodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceSendCodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceSendCodeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceSendCodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceSendCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceSendCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceSendCodeResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Code
type MemberServiceCompareCodeArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Code string `thrift:"code,2" db:"code" json:"code"`
}

func NewMemberServiceCompareCodeArgs() *MemberServiceCompareCodeArgs {
  return &MemberServiceCompareCodeArgs{}
}


func (p *MemberServiceCompareCodeArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceCompareCodeArgs) GetCode() string {
  return p.Code
}
func (p *MemberServiceCompareCodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceCompareCodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceCompareCodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *MemberServiceCompareCodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CompareCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceCompareCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceCompareCodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:code: ", p), err) }
  return err
}

func (p *MemberServiceCompareCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceCompareCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceCompareCodeResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceCompareCodeResult() *MemberServiceCompareCodeResult {
  return &MemberServiceCompareCodeResult{}
}

var MemberServiceCompareCodeResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceCompareCodeResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceCompareCodeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceCompareCodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceCompareCodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceCompareCodeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceCompareCodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CompareCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceCompareCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceCompareCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceCompareCodeResult(%+v)", *p)
}

// Attributes:
//  - MemberId
type MemberServiceReceiptsCodesArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
}

func NewMemberServiceReceiptsCodesArgs() *MemberServiceReceiptsCodesArgs {
  return &MemberServiceReceiptsCodesArgs{}
}


func (p *MemberServiceReceiptsCodesArgs) GetMemberId() int64 {
  return p.MemberId
}
func (p *MemberServiceReceiptsCodesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceReceiptsCodesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceReceiptsCodesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReceiptsCodes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceReceiptsCodesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceReceiptsCodesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceReceiptsCodesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceReceiptsCodesResult struct {
  Success []*SReceiptsCode `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceReceiptsCodesResult() *MemberServiceReceiptsCodesResult {
  return &MemberServiceReceiptsCodesResult{}
}

var MemberServiceReceiptsCodesResult_Success_DEFAULT []*SReceiptsCode

func (p *MemberServiceReceiptsCodesResult) GetSuccess() []*SReceiptsCode {
  return p.Success
}
func (p *MemberServiceReceiptsCodesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceReceiptsCodesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceReceiptsCodesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SReceiptsCode, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem109 := &SReceiptsCode{}
    if err := _elem109.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem109), err)
    }
    p.Success = append(p.Success, _elem109)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MemberServiceReceiptsCodesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReceiptsCodes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceReceiptsCodesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceReceiptsCodesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceReceiptsCodesResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Code
type MemberServiceSaveReceiptsCodeArgs struct {
  MemberId int64      `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Code *SReceiptsCode `thrift:"code,2" db:"code" json:"code"`
}

func NewMemberServiceSaveReceiptsCodeArgs() *MemberServiceSaveReceiptsCodeArgs {
  return &MemberServiceSaveReceiptsCodeArgs{}
}


func (p *MemberServiceSaveReceiptsCodeArgs) GetMemberId() int64 {
  return p.MemberId
}
var MemberServiceSaveReceiptsCodeArgs_Code_DEFAULT *SReceiptsCode
func (p *MemberServiceSaveReceiptsCodeArgs) GetCode() *SReceiptsCode {
  if !p.IsSetCode() {
    return MemberServiceSaveReceiptsCodeArgs_Code_DEFAULT
  }
return p.Code
}
func (p *MemberServiceSaveReceiptsCodeArgs) IsSetCode() bool {
  return p.Code != nil
}

func (p *MemberServiceSaveReceiptsCodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceSaveReceiptsCodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceSaveReceiptsCodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Code = &SReceiptsCode{}
  if err := p.Code.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Code), err)
  }
  return nil
}

func (p *MemberServiceSaveReceiptsCodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SaveReceiptsCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceSaveReceiptsCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceSaveReceiptsCodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:code: ", p), err) }
  if err := p.Code.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Code), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:code: ", p), err) }
  return err
}

func (p *MemberServiceSaveReceiptsCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceSaveReceiptsCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceSaveReceiptsCodeResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceSaveReceiptsCodeResult() *MemberServiceSaveReceiptsCodeResult {
  return &MemberServiceSaveReceiptsCodeResult{}
}

var MemberServiceSaveReceiptsCodeResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceSaveReceiptsCodeResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceSaveReceiptsCodeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceSaveReceiptsCodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceSaveReceiptsCodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceSaveReceiptsCodeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceSaveReceiptsCodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SaveReceiptsCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceSaveReceiptsCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceSaveReceiptsCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceSaveReceiptsCodeResult(%+v)", *p)
}

// Attributes:
//  - MemberId
type MemberServiceBankcardsArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
}

func NewMemberServiceBankcardsArgs() *MemberServiceBankcardsArgs {
  return &MemberServiceBankcardsArgs{}
}


func (p *MemberServiceBankcardsArgs) GetMemberId() int64 {
  return p.MemberId
}
func (p *MemberServiceBankcardsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceBankcardsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceBankcardsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Bankcards_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceBankcardsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceBankcardsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceBankcardsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceBankcardsResult struct {
  Success []*SBankcard `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceBankcardsResult() *MemberServiceBankcardsResult {
  return &MemberServiceBankcardsResult{}
}

var MemberServiceBankcardsResult_Success_DEFAULT []*SBankcard

func (p *MemberServiceBankcardsResult) GetSuccess() []*SBankcard {
  return p.Success
}
func (p *MemberServiceBankcardsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceBankcardsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceBankcardsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SBankcard, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem110 := &SBankcard{}
    if err := _elem110.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem110), err)
    }
    p.Success = append(p.Success, _elem110)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MemberServiceBankcardsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Bankcards_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceBankcardsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceBankcardsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceBankcardsResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Card
type MemberServiceSaveBankcardArgs struct {
  MemberId int64  `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Card *SBankcard `thrift:"card,2" db:"card" json:"card"`
}

func NewMemberServiceSaveBankcardArgs() *MemberServiceSaveBankcardArgs {
  return &MemberServiceSaveBankcardArgs{}
}


func (p *MemberServiceSaveBankcardArgs) GetMemberId() int64 {
  return p.MemberId
}
var MemberServiceSaveBankcardArgs_Card_DEFAULT *SBankcard
func (p *MemberServiceSaveBankcardArgs) GetCard() *SBankcard {
  if !p.IsSetCard() {
    return MemberServiceSaveBankcardArgs_Card_DEFAULT
  }
return p.Card
}
func (p *MemberServiceSaveBankcardArgs) IsSetCard() bool {
  return p.Card != nil
}

func (p *MemberServiceSaveBankcardArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceSaveBankcardArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceSaveBankcardArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Card = &SBankcard{}
  if err := p.Card.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Card), err)
  }
  return nil
}

func (p *MemberServiceSaveBankcardArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SaveBankcard_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceSaveBankcardArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceSaveBankcardArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("card", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:card: ", p), err) }
  if err := p.Card.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Card), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:card: ", p), err) }
  return err
}

func (p *MemberServiceSaveBankcardArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceSaveBankcardArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceSaveBankcardResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceSaveBankcardResult() *MemberServiceSaveBankcardResult {
  return &MemberServiceSaveBankcardResult{}
}

var MemberServiceSaveBankcardResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceSaveBankcardResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceSaveBankcardResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceSaveBankcardResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceSaveBankcardResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceSaveBankcardResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceSaveBankcardResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SaveBankcard_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceSaveBankcardResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceSaveBankcardResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceSaveBankcardResult(%+v)", *p)
}

// Attributes:
//  - MemberId
type MemberServiceCheckProfileCompleteArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
}

func NewMemberServiceCheckProfileCompleteArgs() *MemberServiceCheckProfileCompleteArgs {
  return &MemberServiceCheckProfileCompleteArgs{}
}


func (p *MemberServiceCheckProfileCompleteArgs) GetMemberId() int64 {
  return p.MemberId
}
func (p *MemberServiceCheckProfileCompleteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceCheckProfileCompleteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceCheckProfileCompleteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CheckProfileComplete_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceCheckProfileCompleteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceCheckProfileCompleteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceCheckProfileCompleteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceCheckProfileCompleteResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceCheckProfileCompleteResult() *MemberServiceCheckProfileCompleteResult {
  return &MemberServiceCheckProfileCompleteResult{}
}

var MemberServiceCheckProfileCompleteResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceCheckProfileCompleteResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceCheckProfileCompleteResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceCheckProfileCompleteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceCheckProfileCompleteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceCheckProfileCompleteResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceCheckProfileCompleteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CheckProfileComplete_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceCheckProfileCompleteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceCheckProfileCompleteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceCheckProfileCompleteResult(%+v)", *p)
}

// Attributes:
//  - MemberId
type MemberServiceMemberLevelInfoArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
}

func NewMemberServiceMemberLevelInfoArgs() *MemberServiceMemberLevelInfoArgs {
  return &MemberServiceMemberLevelInfoArgs{}
}


func (p *MemberServiceMemberLevelInfoArgs) GetMemberId() int64 {
  return p.MemberId
}
func (p *MemberServiceMemberLevelInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceMemberLevelInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceMemberLevelInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MemberLevelInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceMemberLevelInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceMemberLevelInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceMemberLevelInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceMemberLevelInfoResult struct {
  Success *SMemberLevelInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceMemberLevelInfoResult() *MemberServiceMemberLevelInfoResult {
  return &MemberServiceMemberLevelInfoResult{}
}

var MemberServiceMemberLevelInfoResult_Success_DEFAULT *SMemberLevelInfo
func (p *MemberServiceMemberLevelInfoResult) GetSuccess() *SMemberLevelInfo {
  if !p.IsSetSuccess() {
    return MemberServiceMemberLevelInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceMemberLevelInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceMemberLevelInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceMemberLevelInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SMemberLevelInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceMemberLevelInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MemberLevelInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceMemberLevelInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceMemberLevelInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceMemberLevelInfoResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Level
//  - Review
//  - PaymentOrderId
type MemberServiceUpdateLevelArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Level int32 `thrift:"level,2" db:"level" json:"level"`
  Review bool `thrift:"review,3" db:"review" json:"review"`
  PaymentOrderId int64 `thrift:"paymentOrderId,4" db:"paymentOrderId" json:"paymentOrderId"`
}

func NewMemberServiceUpdateLevelArgs() *MemberServiceUpdateLevelArgs {
  return &MemberServiceUpdateLevelArgs{}
}


func (p *MemberServiceUpdateLevelArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceUpdateLevelArgs) GetLevel() int32 {
  return p.Level
}

func (p *MemberServiceUpdateLevelArgs) GetReview() bool {
  return p.Review
}

func (p *MemberServiceUpdateLevelArgs) GetPaymentOrderId() int64 {
  return p.PaymentOrderId
}
func (p *MemberServiceUpdateLevelArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceUpdateLevelArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceUpdateLevelArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Level = v
}
  return nil
}

func (p *MemberServiceUpdateLevelArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Review = v
}
  return nil
}

func (p *MemberServiceUpdateLevelArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PaymentOrderId = v
}
  return nil
}

func (p *MemberServiceUpdateLevelArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateLevel_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceUpdateLevelArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceUpdateLevelArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("level", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:level: ", p), err) }
  if err := oprot.WriteI32(int32(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:level: ", p), err) }
  return err
}

func (p *MemberServiceUpdateLevelArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("review", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:review: ", p), err) }
  if err := oprot.WriteBool(bool(p.Review)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.review (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:review: ", p), err) }
  return err
}

func (p *MemberServiceUpdateLevelArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("paymentOrderId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:paymentOrderId: ", p), err) }
  if err := oprot.WriteI64(int64(p.PaymentOrderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.paymentOrderId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:paymentOrderId: ", p), err) }
  return err
}

func (p *MemberServiceUpdateLevelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceUpdateLevelArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceUpdateLevelResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceUpdateLevelResult() *MemberServiceUpdateLevelResult {
  return &MemberServiceUpdateLevelResult{}
}

var MemberServiceUpdateLevelResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceUpdateLevelResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceUpdateLevelResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceUpdateLevelResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceUpdateLevelResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceUpdateLevelResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceUpdateLevelResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateLevel_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceUpdateLevelResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceUpdateLevelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceUpdateLevelResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Phone
type MemberServiceChangePhoneArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Phone string `thrift:"phone,2" db:"phone" json:"phone"`
}

func NewMemberServiceChangePhoneArgs() *MemberServiceChangePhoneArgs {
  return &MemberServiceChangePhoneArgs{}
}


func (p *MemberServiceChangePhoneArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceChangePhoneArgs) GetPhone() string {
  return p.Phone
}
func (p *MemberServiceChangePhoneArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceChangePhoneArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceChangePhoneArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *MemberServiceChangePhoneArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChangePhone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceChangePhoneArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceChangePhoneArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phone: ", p), err) }
  return err
}

func (p *MemberServiceChangePhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceChangePhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceChangePhoneResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceChangePhoneResult() *MemberServiceChangePhoneResult {
  return &MemberServiceChangePhoneResult{}
}

var MemberServiceChangePhoneResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceChangePhoneResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceChangePhoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceChangePhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceChangePhoneResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceChangePhoneResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceChangePhoneResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChangePhone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceChangePhoneResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceChangePhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceChangePhoneResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Usr
type MemberServiceChangeUserArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Usr string `thrift:"usr,2" db:"usr" json:"usr"`
}

func NewMemberServiceChangeUserArgs() *MemberServiceChangeUserArgs {
  return &MemberServiceChangeUserArgs{}
}


func (p *MemberServiceChangeUserArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceChangeUserArgs) GetUsr() string {
  return p.Usr
}
func (p *MemberServiceChangeUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceChangeUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceChangeUserArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Usr = v
}
  return nil
}

func (p *MemberServiceChangeUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChangeUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceChangeUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceChangeUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("usr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:usr: ", p), err) }
  if err := oprot.WriteString(string(p.Usr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.usr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:usr: ", p), err) }
  return err
}

func (p *MemberServiceChangeUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceChangeUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceChangeUserResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceChangeUserResult() *MemberServiceChangeUserResult {
  return &MemberServiceChangeUserResult{}
}

var MemberServiceChangeUserResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceChangeUserResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceChangeUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceChangeUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceChangeUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceChangeUserResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceChangeUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChangeUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceChangeUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceChangeUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceChangeUserResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Old
//  - Pwd
type MemberServiceModifyPwdArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Old string `thrift:"old,2" db:"old" json:"old"`
  Pwd string `thrift:"pwd,3" db:"pwd" json:"pwd"`
}

func NewMemberServiceModifyPwdArgs() *MemberServiceModifyPwdArgs {
  return &MemberServiceModifyPwdArgs{}
}


func (p *MemberServiceModifyPwdArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceModifyPwdArgs) GetOld() string {
  return p.Old
}

func (p *MemberServiceModifyPwdArgs) GetPwd() string {
  return p.Pwd
}
func (p *MemberServiceModifyPwdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceModifyPwdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceModifyPwdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Old = v
}
  return nil
}

func (p *MemberServiceModifyPwdArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *MemberServiceModifyPwdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ModifyPwd_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceModifyPwdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceModifyPwdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("old", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:old: ", p), err) }
  if err := oprot.WriteString(string(p.Old)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.old (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:old: ", p), err) }
  return err
}

func (p *MemberServiceModifyPwdArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pwd: ", p), err) }
  if err := oprot.WriteString(string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pwd (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pwd: ", p), err) }
  return err
}

func (p *MemberServiceModifyPwdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceModifyPwdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceModifyPwdResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceModifyPwdResult() *MemberServiceModifyPwdResult {
  return &MemberServiceModifyPwdResult{}
}

var MemberServiceModifyPwdResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceModifyPwdResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceModifyPwdResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceModifyPwdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceModifyPwdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceModifyPwdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceModifyPwdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ModifyPwd_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceModifyPwdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceModifyPwdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceModifyPwdResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Old
//  - Pwd
type MemberServiceModifyTradePwdArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Old string `thrift:"old,2" db:"old" json:"old"`
  Pwd string `thrift:"pwd,3" db:"pwd" json:"pwd"`
}

func NewMemberServiceModifyTradePwdArgs() *MemberServiceModifyTradePwdArgs {
  return &MemberServiceModifyTradePwdArgs{}
}


func (p *MemberServiceModifyTradePwdArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceModifyTradePwdArgs) GetOld() string {
  return p.Old
}

func (p *MemberServiceModifyTradePwdArgs) GetPwd() string {
  return p.Pwd
}
func (p *MemberServiceModifyTradePwdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceModifyTradePwdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceModifyTradePwdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Old = v
}
  return nil
}

func (p *MemberServiceModifyTradePwdArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *MemberServiceModifyTradePwdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ModifyTradePwd_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceModifyTradePwdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceModifyTradePwdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("old", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:old: ", p), err) }
  if err := oprot.WriteString(string(p.Old)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.old (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:old: ", p), err) }
  return err
}

func (p *MemberServiceModifyTradePwdArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pwd: ", p), err) }
  if err := oprot.WriteString(string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pwd (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pwd: ", p), err) }
  return err
}

func (p *MemberServiceModifyTradePwdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceModifyTradePwdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceModifyTradePwdResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceModifyTradePwdResult() *MemberServiceModifyTradePwdResult {
  return &MemberServiceModifyTradePwdResult{}
}

var MemberServiceModifyTradePwdResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceModifyTradePwdResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceModifyTradePwdResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceModifyTradePwdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceModifyTradePwdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceModifyTradePwdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceModifyTradePwdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ModifyTradePwd_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceModifyTradePwdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceModifyTradePwdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceModifyTradePwdResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - InviterId
type MemberServiceChangeInviterIdArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  InviterId int64 `thrift:"inviterId,2" db:"inviterId" json:"inviterId"`
}

func NewMemberServiceChangeInviterIdArgs() *MemberServiceChangeInviterIdArgs {
  return &MemberServiceChangeInviterIdArgs{}
}


func (p *MemberServiceChangeInviterIdArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceChangeInviterIdArgs) GetInviterId() int64 {
  return p.InviterId
}
func (p *MemberServiceChangeInviterIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceChangeInviterIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceChangeInviterIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.InviterId = v
}
  return nil
}

func (p *MemberServiceChangeInviterIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChangeInviterId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceChangeInviterIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceChangeInviterIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inviterId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:inviterId: ", p), err) }
  if err := oprot.WriteI64(int64(p.InviterId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inviterId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:inviterId: ", p), err) }
  return err
}

func (p *MemberServiceChangeInviterIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceChangeInviterIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceChangeInviterIdResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceChangeInviterIdResult() *MemberServiceChangeInviterIdResult {
  return &MemberServiceChangeInviterIdResult{}
}

var MemberServiceChangeInviterIdResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceChangeInviterIdResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceChangeInviterIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceChangeInviterIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceChangeInviterIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceChangeInviterIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceChangeInviterIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChangeInviterId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceChangeInviterIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceChangeInviterIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceChangeInviterIdResult(%+v)", *p)
}

// Attributes:
//  - MemberId
type MemberServiceOrdersQuantityArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
}

func NewMemberServiceOrdersQuantityArgs() *MemberServiceOrdersQuantityArgs {
  return &MemberServiceOrdersQuantityArgs{}
}


func (p *MemberServiceOrdersQuantityArgs) GetMemberId() int64 {
  return p.MemberId
}
func (p *MemberServiceOrdersQuantityArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceOrdersQuantityArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceOrdersQuantityArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OrdersQuantity_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceOrdersQuantityArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceOrdersQuantityArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceOrdersQuantityArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceOrdersQuantityResult struct {
  Success map[int32]int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceOrdersQuantityResult() *MemberServiceOrdersQuantityResult {
  return &MemberServiceOrdersQuantityResult{}
}

var MemberServiceOrdersQuantityResult_Success_DEFAULT map[int32]int32

func (p *MemberServiceOrdersQuantityResult) GetSuccess() map[int32]int32 {
  return p.Success
}
func (p *MemberServiceOrdersQuantityResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceOrdersQuantityResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceOrdersQuantityResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]int32, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key111 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key111 = v
}
var _val112 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val112 = v
}
    p.Success[_key111] = _val112
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MemberServiceOrdersQuantityResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OrdersQuantity_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceOrdersQuantityResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceOrdersQuantityResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceOrdersQuantityResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - V
//  - Expires
type MemberServicePremiumArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  V int32 `thrift:"v,2" db:"v" json:"v"`
  Expires int64 `thrift:"expires,3" db:"expires" json:"expires"`
}

func NewMemberServicePremiumArgs() *MemberServicePremiumArgs {
  return &MemberServicePremiumArgs{}
}


func (p *MemberServicePremiumArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServicePremiumArgs) GetV() int32 {
  return p.V
}

func (p *MemberServicePremiumArgs) GetExpires() int64 {
  return p.Expires
}
func (p *MemberServicePremiumArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServicePremiumArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServicePremiumArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.V = v
}
  return nil
}

func (p *MemberServicePremiumArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Expires = v
}
  return nil
}

func (p *MemberServicePremiumArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Premium_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServicePremiumArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServicePremiumArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("v", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:v: ", p), err) }
  if err := oprot.WriteI32(int32(p.V)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.v (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:v: ", p), err) }
  return err
}

func (p *MemberServicePremiumArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expires", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expires: ", p), err) }
  if err := oprot.WriteI64(int64(p.Expires)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expires (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expires: ", p), err) }
  return err
}

func (p *MemberServicePremiumArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServicePremiumArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServicePremiumResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServicePremiumResult() *MemberServicePremiumResult {
  return &MemberServicePremiumResult{}
}

var MemberServicePremiumResult_Success_DEFAULT *ttype.Result_
func (p *MemberServicePremiumResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServicePremiumResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServicePremiumResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServicePremiumResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServicePremiumResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServicePremiumResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Premium_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServicePremiumResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServicePremiumResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServicePremiumResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Reset
type MemberServiceGetTokenArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Reset bool `thrift:"reset,2" db:"reset" json:"reset"`
}

func NewMemberServiceGetTokenArgs() *MemberServiceGetTokenArgs {
  return &MemberServiceGetTokenArgs{}
}


func (p *MemberServiceGetTokenArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceGetTokenArgs) GetReset() bool {
  return p.Reset
}
func (p *MemberServiceGetTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetTokenArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceGetTokenArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Reset = v
}
  return nil
}

func (p *MemberServiceGetTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceGetTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reset", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reset: ", p), err) }
  if err := oprot.WriteBool(bool(p.Reset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reset: ", p), err) }
  return err
}

func (p *MemberServiceGetTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetTokenResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetTokenResult() *MemberServiceGetTokenResult {
  return &MemberServiceGetTokenResult{}
}

var MemberServiceGetTokenResult_Success_DEFAULT string
func (p *MemberServiceGetTokenResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return MemberServiceGetTokenResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MemberServiceGetTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceGetTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetTokenResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MemberServiceGetTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceGetTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetTokenResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Token
type MemberServiceCheckTokenArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Token string `thrift:"token,2" db:"token" json:"token"`
}

func NewMemberServiceCheckTokenArgs() *MemberServiceCheckTokenArgs {
  return &MemberServiceCheckTokenArgs{}
}


func (p *MemberServiceCheckTokenArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceCheckTokenArgs) GetToken() string {
  return p.Token
}
func (p *MemberServiceCheckTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceCheckTokenArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceCheckTokenArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *MemberServiceCheckTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CheckToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceCheckTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceCheckTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err) }
  return err
}

func (p *MemberServiceCheckTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceCheckTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceCheckTokenResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceCheckTokenResult() *MemberServiceCheckTokenResult {
  return &MemberServiceCheckTokenResult{}
}

var MemberServiceCheckTokenResult_Success_DEFAULT bool
func (p *MemberServiceCheckTokenResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return MemberServiceCheckTokenResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MemberServiceCheckTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceCheckTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceCheckTokenResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MemberServiceCheckTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CheckToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceCheckTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceCheckTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceCheckTokenResult(%+v)", *p)
}

// Attributes:
//  - MemberId
type MemberServiceRemoveTokenArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
}

func NewMemberServiceRemoveTokenArgs() *MemberServiceRemoveTokenArgs {
  return &MemberServiceRemoveTokenArgs{}
}


func (p *MemberServiceRemoveTokenArgs) GetMemberId() int64 {
  return p.MemberId
}
func (p *MemberServiceRemoveTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceRemoveTokenArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceRemoveTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RemoveToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceRemoveTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceRemoveTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceRemoveTokenArgs(%+v)", *p)
}

type MemberServiceRemoveTokenResult struct {
}

func NewMemberServiceRemoveTokenResult() *MemberServiceRemoveTokenResult {
  return &MemberServiceRemoveTokenResult{}
}

func (p *MemberServiceRemoveTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceRemoveTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RemoveToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceRemoveTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceRemoveTokenResult(%+v)", *p)
}

// Attributes:
//  - MemberId
type MemberServiceGetAddressListArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
}

func NewMemberServiceGetAddressListArgs() *MemberServiceGetAddressListArgs {
  return &MemberServiceGetAddressListArgs{}
}


func (p *MemberServiceGetAddressListArgs) GetMemberId() int64 {
  return p.MemberId
}
func (p *MemberServiceGetAddressListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetAddressListArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceGetAddressListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAddressList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetAddressListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceGetAddressListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetAddressListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetAddressListResult struct {
  Success []*SAddress `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetAddressListResult() *MemberServiceGetAddressListResult {
  return &MemberServiceGetAddressListResult{}
}

var MemberServiceGetAddressListResult_Success_DEFAULT []*SAddress

func (p *MemberServiceGetAddressListResult) GetSuccess() []*SAddress {
  return p.Success
}
func (p *MemberServiceGetAddressListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceGetAddressListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetAddressListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SAddress, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem113 := &SAddress{}
    if err := _elem113.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem113), err)
    }
    p.Success = append(p.Success, _elem113)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MemberServiceGetAddressListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAddressList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetAddressListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceGetAddressListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetAddressListResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - AddrId
type MemberServiceGetAddressArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  AddrId int64 `thrift:"addrId,2" db:"addrId" json:"addrId"`
}

func NewMemberServiceGetAddressArgs() *MemberServiceGetAddressArgs {
  return &MemberServiceGetAddressArgs{}
}


func (p *MemberServiceGetAddressArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceGetAddressArgs) GetAddrId() int64 {
  return p.AddrId
}
func (p *MemberServiceGetAddressArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetAddressArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceGetAddressArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AddrId = v
}
  return nil
}

func (p *MemberServiceGetAddressArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAddress_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetAddressArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceGetAddressArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("addrId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:addrId: ", p), err) }
  if err := oprot.WriteI64(int64(p.AddrId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.addrId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:addrId: ", p), err) }
  return err
}

func (p *MemberServiceGetAddressArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetAddressArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetAddressResult struct {
  Success *SAddress `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetAddressResult() *MemberServiceGetAddressResult {
  return &MemberServiceGetAddressResult{}
}

var MemberServiceGetAddressResult_Success_DEFAULT *SAddress
func (p *MemberServiceGetAddressResult) GetSuccess() *SAddress {
  if !p.IsSetSuccess() {
    return MemberServiceGetAddressResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceGetAddressResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceGetAddressResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetAddressResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SAddress{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceGetAddressResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAddress_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetAddressResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceGetAddressResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetAddressResult(%+v)", *p)
}

// Attributes:
//  - MemberId
type MemberServiceGetAccountArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
}

func NewMemberServiceGetAccountArgs() *MemberServiceGetAccountArgs {
  return &MemberServiceGetAccountArgs{}
}


func (p *MemberServiceGetAccountArgs) GetMemberId() int64 {
  return p.MemberId
}
func (p *MemberServiceGetAccountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetAccountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceGetAccountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAccount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceGetAccountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetAccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetAccountResult struct {
  Success *SAccount `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetAccountResult() *MemberServiceGetAccountResult {
  return &MemberServiceGetAccountResult{}
}

var MemberServiceGetAccountResult_Success_DEFAULT *SAccount
func (p *MemberServiceGetAccountResult) GetSuccess() *SAccount {
  if !p.IsSetSuccess() {
    return MemberServiceGetAccountResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceGetAccountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceGetAccountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetAccountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SAccount{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceGetAccountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAccount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceGetAccountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetAccountResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Depth
type MemberServiceInviterArrayArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Depth int32 `thrift:"depth,2" db:"depth" json:"depth"`
}

func NewMemberServiceInviterArrayArgs() *MemberServiceInviterArrayArgs {
  return &MemberServiceInviterArrayArgs{}
}


func (p *MemberServiceInviterArrayArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceInviterArrayArgs) GetDepth() int32 {
  return p.Depth
}
func (p *MemberServiceInviterArrayArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceInviterArrayArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceInviterArrayArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Depth = v
}
  return nil
}

func (p *MemberServiceInviterArrayArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InviterArray_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceInviterArrayArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceInviterArrayArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("depth", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:depth: ", p), err) }
  if err := oprot.WriteI32(int32(p.Depth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.depth (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:depth: ", p), err) }
  return err
}

func (p *MemberServiceInviterArrayArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceInviterArrayArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceInviterArrayResult struct {
  Success []int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceInviterArrayResult() *MemberServiceInviterArrayResult {
  return &MemberServiceInviterArrayResult{}
}

var MemberServiceInviterArrayResult_Success_DEFAULT []int64

func (p *MemberServiceInviterArrayResult) GetSuccess() []int64 {
  return p.Success
}
func (p *MemberServiceInviterArrayResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceInviterArrayResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceInviterArrayResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem114 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem114 = v
}
    p.Success = append(p.Success, _elem114)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MemberServiceInviterArrayResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InviterArray_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceInviterArrayResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I64, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceInviterArrayResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceInviterArrayResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Depth
type MemberServiceInviteMembersQuantityArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Depth int32 `thrift:"depth,2" db:"depth" json:"depth"`
}

func NewMemberServiceInviteMembersQuantityArgs() *MemberServiceInviteMembersQuantityArgs {
  return &MemberServiceInviteMembersQuantityArgs{}
}


func (p *MemberServiceInviteMembersQuantityArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceInviteMembersQuantityArgs) GetDepth() int32 {
  return p.Depth
}
func (p *MemberServiceInviteMembersQuantityArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceInviteMembersQuantityArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceInviteMembersQuantityArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Depth = v
}
  return nil
}

func (p *MemberServiceInviteMembersQuantityArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InviteMembersQuantity_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceInviteMembersQuantityArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceInviteMembersQuantityArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("depth", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:depth: ", p), err) }
  if err := oprot.WriteI32(int32(p.Depth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.depth (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:depth: ", p), err) }
  return err
}

func (p *MemberServiceInviteMembersQuantityArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceInviteMembersQuantityArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceInviteMembersQuantityResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceInviteMembersQuantityResult() *MemberServiceInviteMembersQuantityResult {
  return &MemberServiceInviteMembersQuantityResult{}
}

var MemberServiceInviteMembersQuantityResult_Success_DEFAULT int32
func (p *MemberServiceInviteMembersQuantityResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return MemberServiceInviteMembersQuantityResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MemberServiceInviteMembersQuantityResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceInviteMembersQuantityResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceInviteMembersQuantityResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MemberServiceInviteMembersQuantityResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InviteMembersQuantity_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceInviteMembersQuantityResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceInviteMembersQuantityResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceInviteMembersQuantityResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Data
type MemberServiceQueryInviteQuantityArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Data map[string]string `thrift:"data,2" db:"data" json:"data"`
}

func NewMemberServiceQueryInviteQuantityArgs() *MemberServiceQueryInviteQuantityArgs {
  return &MemberServiceQueryInviteQuantityArgs{}
}


func (p *MemberServiceQueryInviteQuantityArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceQueryInviteQuantityArgs) GetData() map[string]string {
  return p.Data
}
func (p *MemberServiceQueryInviteQuantityArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceQueryInviteQuantityArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceQueryInviteQuantityArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Data =  tMap
  for i := 0; i < size; i ++ {
var _key115 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key115 = v
}
var _val116 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val116 = v
}
    p.Data[_key115] = _val116
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MemberServiceQueryInviteQuantityArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QueryInviteQuantity_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceQueryInviteQuantityArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceQueryInviteQuantityArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Data {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *MemberServiceQueryInviteQuantityArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceQueryInviteQuantityArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceQueryInviteQuantityResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceQueryInviteQuantityResult() *MemberServiceQueryInviteQuantityResult {
  return &MemberServiceQueryInviteQuantityResult{}
}

var MemberServiceQueryInviteQuantityResult_Success_DEFAULT int32
func (p *MemberServiceQueryInviteQuantityResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return MemberServiceQueryInviteQuantityResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MemberServiceQueryInviteQuantityResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceQueryInviteQuantityResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceQueryInviteQuantityResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MemberServiceQueryInviteQuantityResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QueryInviteQuantity_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceQueryInviteQuantityResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceQueryInviteQuantityResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceQueryInviteQuantityResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Data
type MemberServiceQueryInviteArrayArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Data map[string]string `thrift:"data,2" db:"data" json:"data"`
}

func NewMemberServiceQueryInviteArrayArgs() *MemberServiceQueryInviteArrayArgs {
  return &MemberServiceQueryInviteArrayArgs{}
}


func (p *MemberServiceQueryInviteArrayArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceQueryInviteArrayArgs) GetData() map[string]string {
  return p.Data
}
func (p *MemberServiceQueryInviteArrayArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceQueryInviteArrayArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceQueryInviteArrayArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Data =  tMap
  for i := 0; i < size; i ++ {
var _key117 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key117 = v
}
var _val118 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val118 = v
}
    p.Data[_key117] = _val118
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MemberServiceQueryInviteArrayArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QueryInviteArray_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceQueryInviteArrayArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceQueryInviteArrayArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Data {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *MemberServiceQueryInviteArrayArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceQueryInviteArrayArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceQueryInviteArrayResult struct {
  Success []int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceQueryInviteArrayResult() *MemberServiceQueryInviteArrayResult {
  return &MemberServiceQueryInviteArrayResult{}
}

var MemberServiceQueryInviteArrayResult_Success_DEFAULT []int64

func (p *MemberServiceQueryInviteArrayResult) GetSuccess() []int64 {
  return p.Success
}
func (p *MemberServiceQueryInviteArrayResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceQueryInviteArrayResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceQueryInviteArrayResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem119 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem119 = v
}
    p.Success = append(p.Success, _elem119)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MemberServiceQueryInviteArrayResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QueryInviteArray_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceQueryInviteArrayResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I64, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceQueryInviteArrayResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceQueryInviteArrayResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Account
//  - Title
//  - Amount
//  - OuterNo
//  - Remark
type MemberServiceAccountChargeArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Account int32 `thrift:"account,2" db:"account" json:"account"`
  Title string `thrift:"title,3" db:"title" json:"title"`
  Amount int32 `thrift:"amount,4" db:"amount" json:"amount"`
  OuterNo string `thrift:"outerNo,5" db:"outerNo" json:"outerNo"`
  Remark string `thrift:"remark,6" db:"remark" json:"remark"`
}

func NewMemberServiceAccountChargeArgs() *MemberServiceAccountChargeArgs {
  return &MemberServiceAccountChargeArgs{}
}


func (p *MemberServiceAccountChargeArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceAccountChargeArgs) GetAccount() int32 {
  return p.Account
}

func (p *MemberServiceAccountChargeArgs) GetTitle() string {
  return p.Title
}

func (p *MemberServiceAccountChargeArgs) GetAmount() int32 {
  return p.Amount
}

func (p *MemberServiceAccountChargeArgs) GetOuterNo() string {
  return p.OuterNo
}

func (p *MemberServiceAccountChargeArgs) GetRemark() string {
  return p.Remark
}
func (p *MemberServiceAccountChargeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceAccountChargeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceAccountChargeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *MemberServiceAccountChargeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *MemberServiceAccountChargeArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *MemberServiceAccountChargeArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.OuterNo = v
}
  return nil
}

func (p *MemberServiceAccountChargeArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Remark = v
}
  return nil
}

func (p *MemberServiceAccountChargeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AccountCharge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceAccountChargeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceAccountChargeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:account: ", p), err) }
  if err := oprot.WriteI32(int32(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:account: ", p), err) }
  return err
}

func (p *MemberServiceAccountChargeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err) }
  return err
}

func (p *MemberServiceAccountChargeArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:amount: ", p), err) }
  if err := oprot.WriteI32(int32(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:amount: ", p), err) }
  return err
}

func (p *MemberServiceAccountChargeArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outerNo", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:outerNo: ", p), err) }
  if err := oprot.WriteString(string(p.OuterNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.outerNo (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:outerNo: ", p), err) }
  return err
}

func (p *MemberServiceAccountChargeArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remark", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:remark: ", p), err) }
  if err := oprot.WriteString(string(p.Remark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remark (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:remark: ", p), err) }
  return err
}

func (p *MemberServiceAccountChargeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceAccountChargeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceAccountChargeResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceAccountChargeResult() *MemberServiceAccountChargeResult {
  return &MemberServiceAccountChargeResult{}
}

var MemberServiceAccountChargeResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceAccountChargeResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceAccountChargeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceAccountChargeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceAccountChargeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceAccountChargeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceAccountChargeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AccountCharge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceAccountChargeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceAccountChargeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceAccountChargeResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Account
//  - Title
//  - Amount
//  - OuterNo
//  - Remark
type MemberServiceAccountConsumeArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Account int32 `thrift:"account,2" db:"account" json:"account"`
  Title string `thrift:"title,3" db:"title" json:"title"`
  Amount int32 `thrift:"amount,4" db:"amount" json:"amount"`
  OuterNo string `thrift:"outerNo,5" db:"outerNo" json:"outerNo"`
  Remark string `thrift:"remark,6" db:"remark" json:"remark"`
}

func NewMemberServiceAccountConsumeArgs() *MemberServiceAccountConsumeArgs {
  return &MemberServiceAccountConsumeArgs{}
}


func (p *MemberServiceAccountConsumeArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceAccountConsumeArgs) GetAccount() int32 {
  return p.Account
}

func (p *MemberServiceAccountConsumeArgs) GetTitle() string {
  return p.Title
}

func (p *MemberServiceAccountConsumeArgs) GetAmount() int32 {
  return p.Amount
}

func (p *MemberServiceAccountConsumeArgs) GetOuterNo() string {
  return p.OuterNo
}

func (p *MemberServiceAccountConsumeArgs) GetRemark() string {
  return p.Remark
}
func (p *MemberServiceAccountConsumeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceAccountConsumeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceAccountConsumeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *MemberServiceAccountConsumeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *MemberServiceAccountConsumeArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *MemberServiceAccountConsumeArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.OuterNo = v
}
  return nil
}

func (p *MemberServiceAccountConsumeArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Remark = v
}
  return nil
}

func (p *MemberServiceAccountConsumeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AccountConsume_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceAccountConsumeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceAccountConsumeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:account: ", p), err) }
  if err := oprot.WriteI32(int32(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:account: ", p), err) }
  return err
}

func (p *MemberServiceAccountConsumeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err) }
  return err
}

func (p *MemberServiceAccountConsumeArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:amount: ", p), err) }
  if err := oprot.WriteI32(int32(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:amount: ", p), err) }
  return err
}

func (p *MemberServiceAccountConsumeArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outerNo", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:outerNo: ", p), err) }
  if err := oprot.WriteString(string(p.OuterNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.outerNo (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:outerNo: ", p), err) }
  return err
}

func (p *MemberServiceAccountConsumeArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remark", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:remark: ", p), err) }
  if err := oprot.WriteString(string(p.Remark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remark (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:remark: ", p), err) }
  return err
}

func (p *MemberServiceAccountConsumeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceAccountConsumeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceAccountConsumeResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceAccountConsumeResult() *MemberServiceAccountConsumeResult {
  return &MemberServiceAccountConsumeResult{}
}

var MemberServiceAccountConsumeResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceAccountConsumeResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceAccountConsumeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceAccountConsumeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceAccountConsumeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceAccountConsumeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceAccountConsumeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AccountConsume_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceAccountConsumeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceAccountConsumeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceAccountConsumeResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Account
//  - Title
//  - Amount
//  - OuterNo
//  - Remark
type MemberServiceAccountDiscountArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Account int32 `thrift:"account,2" db:"account" json:"account"`
  Title string `thrift:"title,3" db:"title" json:"title"`
  Amount int32 `thrift:"amount,4" db:"amount" json:"amount"`
  OuterNo string `thrift:"outerNo,5" db:"outerNo" json:"outerNo"`
  Remark string `thrift:"remark,6" db:"remark" json:"remark"`
}

func NewMemberServiceAccountDiscountArgs() *MemberServiceAccountDiscountArgs {
  return &MemberServiceAccountDiscountArgs{}
}


func (p *MemberServiceAccountDiscountArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceAccountDiscountArgs) GetAccount() int32 {
  return p.Account
}

func (p *MemberServiceAccountDiscountArgs) GetTitle() string {
  return p.Title
}

func (p *MemberServiceAccountDiscountArgs) GetAmount() int32 {
  return p.Amount
}

func (p *MemberServiceAccountDiscountArgs) GetOuterNo() string {
  return p.OuterNo
}

func (p *MemberServiceAccountDiscountArgs) GetRemark() string {
  return p.Remark
}
func (p *MemberServiceAccountDiscountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceAccountDiscountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceAccountDiscountArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *MemberServiceAccountDiscountArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *MemberServiceAccountDiscountArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *MemberServiceAccountDiscountArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.OuterNo = v
}
  return nil
}

func (p *MemberServiceAccountDiscountArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Remark = v
}
  return nil
}

func (p *MemberServiceAccountDiscountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AccountDiscount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceAccountDiscountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceAccountDiscountArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:account: ", p), err) }
  if err := oprot.WriteI32(int32(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:account: ", p), err) }
  return err
}

func (p *MemberServiceAccountDiscountArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err) }
  return err
}

func (p *MemberServiceAccountDiscountArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:amount: ", p), err) }
  if err := oprot.WriteI32(int32(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:amount: ", p), err) }
  return err
}

func (p *MemberServiceAccountDiscountArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outerNo", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:outerNo: ", p), err) }
  if err := oprot.WriteString(string(p.OuterNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.outerNo (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:outerNo: ", p), err) }
  return err
}

func (p *MemberServiceAccountDiscountArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remark", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:remark: ", p), err) }
  if err := oprot.WriteString(string(p.Remark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remark (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:remark: ", p), err) }
  return err
}

func (p *MemberServiceAccountDiscountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceAccountDiscountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceAccountDiscountResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceAccountDiscountResult() *MemberServiceAccountDiscountResult {
  return &MemberServiceAccountDiscountResult{}
}

var MemberServiceAccountDiscountResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceAccountDiscountResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceAccountDiscountResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceAccountDiscountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceAccountDiscountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceAccountDiscountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceAccountDiscountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AccountDiscount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceAccountDiscountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceAccountDiscountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceAccountDiscountResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Account
//  - Title
//  - Amount
//  - OuterNo
//  - Remark
type MemberServiceAccountRefundArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Account int32 `thrift:"account,2" db:"account" json:"account"`
  Title string `thrift:"title,3" db:"title" json:"title"`
  Amount int32 `thrift:"amount,4" db:"amount" json:"amount"`
  OuterNo string `thrift:"outerNo,5" db:"outerNo" json:"outerNo"`
  Remark string `thrift:"remark,6" db:"remark" json:"remark"`
}

func NewMemberServiceAccountRefundArgs() *MemberServiceAccountRefundArgs {
  return &MemberServiceAccountRefundArgs{}
}


func (p *MemberServiceAccountRefundArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceAccountRefundArgs) GetAccount() int32 {
  return p.Account
}

func (p *MemberServiceAccountRefundArgs) GetTitle() string {
  return p.Title
}

func (p *MemberServiceAccountRefundArgs) GetAmount() int32 {
  return p.Amount
}

func (p *MemberServiceAccountRefundArgs) GetOuterNo() string {
  return p.OuterNo
}

func (p *MemberServiceAccountRefundArgs) GetRemark() string {
  return p.Remark
}
func (p *MemberServiceAccountRefundArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceAccountRefundArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceAccountRefundArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *MemberServiceAccountRefundArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *MemberServiceAccountRefundArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *MemberServiceAccountRefundArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.OuterNo = v
}
  return nil
}

func (p *MemberServiceAccountRefundArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Remark = v
}
  return nil
}

func (p *MemberServiceAccountRefundArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AccountRefund_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceAccountRefundArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceAccountRefundArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:account: ", p), err) }
  if err := oprot.WriteI32(int32(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:account: ", p), err) }
  return err
}

func (p *MemberServiceAccountRefundArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err) }
  return err
}

func (p *MemberServiceAccountRefundArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:amount: ", p), err) }
  if err := oprot.WriteI32(int32(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:amount: ", p), err) }
  return err
}

func (p *MemberServiceAccountRefundArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outerNo", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:outerNo: ", p), err) }
  if err := oprot.WriteString(string(p.OuterNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.outerNo (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:outerNo: ", p), err) }
  return err
}

func (p *MemberServiceAccountRefundArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remark", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:remark: ", p), err) }
  if err := oprot.WriteString(string(p.Remark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remark (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:remark: ", p), err) }
  return err
}

func (p *MemberServiceAccountRefundArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceAccountRefundArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceAccountRefundResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceAccountRefundResult() *MemberServiceAccountRefundResult {
  return &MemberServiceAccountRefundResult{}
}

var MemberServiceAccountRefundResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceAccountRefundResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceAccountRefundResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceAccountRefundResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceAccountRefundResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceAccountRefundResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceAccountRefundResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AccountRefund_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceAccountRefundResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceAccountRefundResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceAccountRefundResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Account
//  - Value
//  - RelateUser
//  - Remark
type MemberServiceAccountAdjustArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Account int32 `thrift:"account,2" db:"account" json:"account"`
  Value int32 `thrift:"value,3" db:"value" json:"value"`
  RelateUser int64 `thrift:"relateUser,4" db:"relateUser" json:"relateUser"`
  Remark string `thrift:"remark,5" db:"remark" json:"remark"`
}

func NewMemberServiceAccountAdjustArgs() *MemberServiceAccountAdjustArgs {
  return &MemberServiceAccountAdjustArgs{}
}


func (p *MemberServiceAccountAdjustArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceAccountAdjustArgs) GetAccount() int32 {
  return p.Account
}

func (p *MemberServiceAccountAdjustArgs) GetValue() int32 {
  return p.Value
}

func (p *MemberServiceAccountAdjustArgs) GetRelateUser() int64 {
  return p.RelateUser
}

func (p *MemberServiceAccountAdjustArgs) GetRemark() string {
  return p.Remark
}
func (p *MemberServiceAccountAdjustArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceAccountAdjustArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceAccountAdjustArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *MemberServiceAccountAdjustArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *MemberServiceAccountAdjustArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RelateUser = v
}
  return nil
}

func (p *MemberServiceAccountAdjustArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Remark = v
}
  return nil
}

func (p *MemberServiceAccountAdjustArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AccountAdjust_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceAccountAdjustArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceAccountAdjustArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:account: ", p), err) }
  if err := oprot.WriteI32(int32(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:account: ", p), err) }
  return err
}

func (p *MemberServiceAccountAdjustArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteI32(int32(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *MemberServiceAccountAdjustArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("relateUser", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:relateUser: ", p), err) }
  if err := oprot.WriteI64(int64(p.RelateUser)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relateUser (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:relateUser: ", p), err) }
  return err
}

func (p *MemberServiceAccountAdjustArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remark", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:remark: ", p), err) }
  if err := oprot.WriteString(string(p.Remark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remark (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:remark: ", p), err) }
  return err
}

func (p *MemberServiceAccountAdjustArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceAccountAdjustArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceAccountAdjustResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceAccountAdjustResult() *MemberServiceAccountAdjustResult {
  return &MemberServiceAccountAdjustResult{}
}

var MemberServiceAccountAdjustResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceAccountAdjustResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceAccountAdjustResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceAccountAdjustResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceAccountAdjustResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceAccountAdjustResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceAccountAdjustResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AccountAdjust_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceAccountAdjustResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceAccountAdjustResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceAccountAdjustResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Action
//  - Data
type MemberServiceB4EAuthArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  Action string `thrift:"action,2" db:"action" json:"action"`
  Data map[string]string `thrift:"data,3" db:"data" json:"data"`
}

func NewMemberServiceB4EAuthArgs() *MemberServiceB4EAuthArgs {
  return &MemberServiceB4EAuthArgs{}
}


func (p *MemberServiceB4EAuthArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServiceB4EAuthArgs) GetAction() string {
  return p.Action
}

func (p *MemberServiceB4EAuthArgs) GetData() map[string]string {
  return p.Data
}
func (p *MemberServiceB4EAuthArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceB4EAuthArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServiceB4EAuthArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Action = v
}
  return nil
}

func (p *MemberServiceB4EAuthArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Data =  tMap
  for i := 0; i < size; i ++ {
var _key120 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key120 = v
}
var _val121 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val121 = v
}
    p.Data[_key120] = _val121
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MemberServiceB4EAuthArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("B4EAuth_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceB4EAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServiceB4EAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("action", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:action: ", p), err) }
  if err := oprot.WriteString(string(p.Action)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.action (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:action: ", p), err) }
  return err
}

func (p *MemberServiceB4EAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Data {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  return err
}

func (p *MemberServiceB4EAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceB4EAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceB4EAuthResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceB4EAuthResult() *MemberServiceB4EAuthResult {
  return &MemberServiceB4EAuthResult{}
}

var MemberServiceB4EAuthResult_Success_DEFAULT *ttype.Result_
func (p *MemberServiceB4EAuthResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return MemberServiceB4EAuthResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceB4EAuthResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceB4EAuthResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceB4EAuthResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceB4EAuthResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("B4EAuth_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceB4EAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceB4EAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceB4EAuthResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - AccountType
//  - Params
type MemberServicePagingAccountLogArgs struct {
  MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
  AccountType int32           `thrift:"accountType,2" db:"accountType" json:"accountType"`
  Params *ttype.SPagingParams `thrift:"params,3" db:"params" json:"params"`
}

func NewMemberServicePagingAccountLogArgs() *MemberServicePagingAccountLogArgs {
  return &MemberServicePagingAccountLogArgs{}
}


func (p *MemberServicePagingAccountLogArgs) GetMemberId() int64 {
  return p.MemberId
}

func (p *MemberServicePagingAccountLogArgs) GetAccountType() int32 {
  return p.AccountType
}
var MemberServicePagingAccountLogArgs_Params_DEFAULT *ttype.SPagingParams
func (p *MemberServicePagingAccountLogArgs) GetParams() *ttype.SPagingParams {
  if !p.IsSetParams() {
    return MemberServicePagingAccountLogArgs_Params_DEFAULT
  }
return p.Params
}
func (p *MemberServicePagingAccountLogArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *MemberServicePagingAccountLogArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServicePagingAccountLogArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *MemberServicePagingAccountLogArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AccountType = v
}
  return nil
}

func (p *MemberServicePagingAccountLogArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Params = &ttype.SPagingParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *MemberServicePagingAccountLogArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PagingAccountLog_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServicePagingAccountLogArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err) }
  return err
}

func (p *MemberServicePagingAccountLogArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountType: ", p), err) }
  if err := oprot.WriteI32(int32(p.AccountType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountType: ", p), err) }
  return err
}

func (p *MemberServicePagingAccountLogArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:params: ", p), err) }
  return err
}

func (p *MemberServicePagingAccountLogArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServicePagingAccountLogArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServicePagingAccountLogResult struct {
  Success *ttype.SPagingResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServicePagingAccountLogResult() *MemberServicePagingAccountLogResult {
  return &MemberServicePagingAccountLogResult{}
}

var MemberServicePagingAccountLogResult_Success_DEFAULT *ttype.SPagingResult_
func (p *MemberServicePagingAccountLogResult) GetSuccess() *ttype.SPagingResult_ {
  if !p.IsSetSuccess() {
    return MemberServicePagingAccountLogResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServicePagingAccountLogResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServicePagingAccountLogResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServicePagingAccountLogResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.SPagingResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServicePagingAccountLogResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PagingAccountLog_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServicePagingAccountLogResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServicePagingAccountLogResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServicePagingAccountLogResult(%+v)", *p)
}



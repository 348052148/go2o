// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package define

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - ID
//  - Name
//  - RequireExp
//  - ProgramSignal
//  - IsOfficial
//  - Enabled
type Level struct {
	ID            int32  `thrift:"ID,1" db:"ID" json:"ID"`
	Name          string `thrift:"Name,2" db:"Name" json:"Name"`
	RequireExp    int32  `thrift:"RequireExp,3" db:"RequireExp" json:"RequireExp"`
	ProgramSignal string `thrift:"ProgramSignal,4" db:"ProgramSignal" json:"ProgramSignal"`
	IsOfficial    int32  `thrift:"IsOfficial,5" db:"IsOfficial" json:"IsOfficial"`
	Enabled       int32  `thrift:"Enabled,6" db:"Enabled" json:"Enabled"`
}

func NewLevel() *Level {
	return &Level{}
}

func (p *Level) GetID() int32 {
	return p.ID
}

func (p *Level) GetName() string {
	return p.Name
}

func (p *Level) GetRequireExp() int32 {
	return p.RequireExp
}

func (p *Level) GetProgramSignal() string {
	return p.ProgramSignal
}

func (p *Level) GetIsOfficial() int32 {
	return p.IsOfficial
}

func (p *Level) GetEnabled() int32 {
	return p.Enabled
}
func (p *Level) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Level) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Level) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Level) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RequireExp = v
	}
	return nil
}

func (p *Level) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ProgramSignal = v
	}
	return nil
}

func (p *Level) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IsOfficial = v
	}
	return nil
}

func (p *Level) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Enabled = v
	}
	return nil
}

func (p *Level) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Level"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Level) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Level) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Name: ", p), err)
	}
	return err
}

func (p *Level) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RequireExp", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:RequireExp: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RequireExp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RequireExp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:RequireExp: ", p), err)
	}
	return err
}

func (p *Level) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProgramSignal", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ProgramSignal: ", p), err)
	}
	if err := oprot.WriteString(string(p.ProgramSignal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ProgramSignal (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ProgramSignal: ", p), err)
	}
	return err
}

func (p *Level) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IsOfficial", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:IsOfficial: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsOfficial)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IsOfficial (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:IsOfficial: ", p), err)
	}
	return err
}

func (p *Level) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Enabled", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Enabled: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Enabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Enabled (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Enabled: ", p), err)
	}
	return err
}

func (p *Level) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Level(%+v)", *p)
}

// Attributes:
//  - ID
//  - Usr
//  - Pwd
//  - TradePwd
//  - Exp
//  - Level
//  - InvitationCode
//  - PremiumUser
//  - PremiumExpires
//  - RegFrom
//  - RegIp
//  - RegTime
//  - CheckCode
//  - CheckExpires
//  - State
//  - LoginTime
//  - LastLoginTime
//  - UpdateTime
//  - DynamicToken
//  - TimeoutTime
type Member struct {
	ID             int64  `thrift:"ID,1" db:"ID" json:"ID"`
	Usr            string `thrift:"Usr,2" db:"Usr" json:"Usr"`
	Pwd            string `thrift:"Pwd,3" db:"Pwd" json:"Pwd"`
	TradePwd       string `thrift:"TradePwd,4" db:"TradePwd" json:"TradePwd"`
	Exp            int32  `thrift:"Exp,5" db:"Exp" json:"Exp"`
	Level          int32  `thrift:"Level,6" db:"Level" json:"Level"`
	InvitationCode string `thrift:"InvitationCode,7" db:"InvitationCode" json:"InvitationCode"`
	PremiumUser    int32  `thrift:"PremiumUser,8" db:"PremiumUser" json:"PremiumUser"`
	PremiumExpires int64  `thrift:"PremiumExpires,9" db:"PremiumExpires" json:"PremiumExpires"`
	RegFrom        string `thrift:"RegFrom,10" db:"RegFrom" json:"RegFrom"`
	RegIp          string `thrift:"RegIp,11" db:"RegIp" json:"RegIp"`
	RegTime        int64  `thrift:"RegTime,12" db:"RegTime" json:"RegTime"`
	CheckCode      string `thrift:"CheckCode,13" db:"CheckCode" json:"CheckCode"`
	CheckExpires   int64  `thrift:"CheckExpires,14" db:"CheckExpires" json:"CheckExpires"`
	State          int32  `thrift:"State,15" db:"State" json:"State"`
	LoginTime      int64  `thrift:"LoginTime,16" db:"LoginTime" json:"LoginTime"`
	LastLoginTime  int64  `thrift:"LastLoginTime,17" db:"LastLoginTime" json:"LastLoginTime"`
	UpdateTime     int64  `thrift:"UpdateTime,18" db:"UpdateTime" json:"UpdateTime"`
	DynamicToken   string `thrift:"DynamicToken,19" db:"DynamicToken" json:"DynamicToken"`
	TimeoutTime    int64  `thrift:"TimeoutTime,20" db:"TimeoutTime" json:"TimeoutTime"`
}

func NewMember() *Member {
	return &Member{}
}

func (p *Member) GetID() int64 {
	return p.ID
}

func (p *Member) GetUsr() string {
	return p.Usr
}

func (p *Member) GetPwd() string {
	return p.Pwd
}

func (p *Member) GetTradePwd() string {
	return p.TradePwd
}

func (p *Member) GetExp() int32 {
	return p.Exp
}

func (p *Member) GetLevel() int32 {
	return p.Level
}

func (p *Member) GetInvitationCode() string {
	return p.InvitationCode
}

func (p *Member) GetPremiumUser() int32 {
	return p.PremiumUser
}

func (p *Member) GetPremiumExpires() int64 {
	return p.PremiumExpires
}

func (p *Member) GetRegFrom() string {
	return p.RegFrom
}

func (p *Member) GetRegIp() string {
	return p.RegIp
}

func (p *Member) GetRegTime() int64 {
	return p.RegTime
}

func (p *Member) GetCheckCode() string {
	return p.CheckCode
}

func (p *Member) GetCheckExpires() int64 {
	return p.CheckExpires
}

func (p *Member) GetState() int32 {
	return p.State
}

func (p *Member) GetLoginTime() int64 {
	return p.LoginTime
}

func (p *Member) GetLastLoginTime() int64 {
	return p.LastLoginTime
}

func (p *Member) GetUpdateTime() int64 {
	return p.UpdateTime
}

func (p *Member) GetDynamicToken() string {
	return p.DynamicToken
}

func (p *Member) GetTimeoutTime() int64 {
	return p.TimeoutTime
}
func (p *Member) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.ReadField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Member) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Member) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Usr = v
	}
	return nil
}

func (p *Member) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Pwd = v
	}
	return nil
}

func (p *Member) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TradePwd = v
	}
	return nil
}

func (p *Member) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Exp = v
	}
	return nil
}

func (p *Member) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Level = v
	}
	return nil
}

func (p *Member) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.InvitationCode = v
	}
	return nil
}

func (p *Member) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.PremiumUser = v
	}
	return nil
}

func (p *Member) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.PremiumExpires = v
	}
	return nil
}

func (p *Member) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.RegFrom = v
	}
	return nil
}

func (p *Member) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.RegIp = v
	}
	return nil
}

func (p *Member) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.RegTime = v
	}
	return nil
}

func (p *Member) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.CheckCode = v
	}
	return nil
}

func (p *Member) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.CheckExpires = v
	}
	return nil
}

func (p *Member) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *Member) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.LoginTime = v
	}
	return nil
}

func (p *Member) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.LastLoginTime = v
	}
	return nil
}

func (p *Member) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *Member) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.DynamicToken = v
	}
	return nil
}

func (p *Member) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.TimeoutTime = v
	}
	return nil
}

func (p *Member) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Member"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField19(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Member) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Member) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Usr", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Usr: ", p), err)
	}
	if err := oprot.WriteString(string(p.Usr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Usr (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Usr: ", p), err)
	}
	return err
}

func (p *Member) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Pwd", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Pwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Pwd (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Pwd: ", p), err)
	}
	return err
}

func (p *Member) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TradePwd", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:TradePwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.TradePwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TradePwd (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:TradePwd: ", p), err)
	}
	return err
}

func (p *Member) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Exp", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Exp: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Exp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Exp (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Exp: ", p), err)
	}
	return err
}

func (p *Member) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Level", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Level: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Level)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Level (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Level: ", p), err)
	}
	return err
}

func (p *Member) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("InvitationCode", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:InvitationCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.InvitationCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.InvitationCode (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:InvitationCode: ", p), err)
	}
	return err
}

func (p *Member) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PremiumUser", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:PremiumUser: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PremiumUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PremiumUser (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:PremiumUser: ", p), err)
	}
	return err
}

func (p *Member) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PremiumExpires", thrift.I64, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:PremiumExpires: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PremiumExpires)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PremiumExpires (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:PremiumExpires: ", p), err)
	}
	return err
}

func (p *Member) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RegFrom", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:RegFrom: ", p), err)
	}
	if err := oprot.WriteString(string(p.RegFrom)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RegFrom (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:RegFrom: ", p), err)
	}
	return err
}

func (p *Member) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RegIp", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:RegIp: ", p), err)
	}
	if err := oprot.WriteString(string(p.RegIp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RegIp (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:RegIp: ", p), err)
	}
	return err
}

func (p *Member) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RegTime", thrift.I64, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:RegTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RegTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RegTime (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:RegTime: ", p), err)
	}
	return err
}

func (p *Member) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CheckCode", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:CheckCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.CheckCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CheckCode (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:CheckCode: ", p), err)
	}
	return err
}

func (p *Member) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CheckExpires", thrift.I64, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:CheckExpires: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CheckExpires)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CheckExpires (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:CheckExpires: ", p), err)
	}
	return err
}

func (p *Member) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("State", thrift.I32, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:State: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.State (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:State: ", p), err)
	}
	return err
}

func (p *Member) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LoginTime", thrift.I64, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:LoginTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LoginTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LoginTime (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:LoginTime: ", p), err)
	}
	return err
}

func (p *Member) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LastLoginTime", thrift.I64, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:LastLoginTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LastLoginTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LastLoginTime (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:LastLoginTime: ", p), err)
	}
	return err
}

func (p *Member) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:UpdateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:UpdateTime: ", p), err)
	}
	return err
}

func (p *Member) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DynamicToken", thrift.STRING, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:DynamicToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.DynamicToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.DynamicToken (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:DynamicToken: ", p), err)
	}
	return err
}

func (p *Member) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TimeoutTime", thrift.I64, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:TimeoutTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TimeoutTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TimeoutTime (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:TimeoutTime: ", p), err)
	}
	return err
}

func (p *Member) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Member(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Name
//  - Avatar
//  - Sex
//  - BirthDay
//  - Phone
//  - Address
//  - Im
//  - Email
//  - Province
//  - City
//  - District
//  - Remark
//  - Ext1
//  - Ext2
//  - Ext3
//  - Ext4
//  - Ext5
//  - Ext6
//  - UpdateTime
type Profile struct {
	MemberId   int64  `thrift:"MemberId,1" db:"MemberId" json:"MemberId"`
	Name       string `thrift:"Name,2" db:"Name" json:"Name"`
	Avatar     string `thrift:"Avatar,3" db:"Avatar" json:"Avatar"`
	Sex        int32  `thrift:"Sex,4" db:"Sex" json:"Sex"`
	BirthDay   string `thrift:"BirthDay,5" db:"BirthDay" json:"BirthDay"`
	Phone      string `thrift:"Phone,6" db:"Phone" json:"Phone"`
	Address    string `thrift:"Address,7" db:"Address" json:"Address"`
	Im         string `thrift:"Im,8" db:"Im" json:"Im"`
	Email      string `thrift:"Email,9" db:"Email" json:"Email"`
	Province   int32  `thrift:"Province,10" db:"Province" json:"Province"`
	City       int32  `thrift:"City,11" db:"City" json:"City"`
	District   int32  `thrift:"District,12" db:"District" json:"District"`
	Remark     string `thrift:"Remark,13" db:"Remark" json:"Remark"`
	Ext1       string `thrift:"Ext1,14" db:"Ext1" json:"Ext1"`
	Ext2       string `thrift:"Ext2,15" db:"Ext2" json:"Ext2"`
	Ext3       string `thrift:"Ext3,16" db:"Ext3" json:"Ext3"`
	Ext4       string `thrift:"Ext4,17" db:"Ext4" json:"Ext4"`
	Ext5       string `thrift:"Ext5,18" db:"Ext5" json:"Ext5"`
	Ext6       string `thrift:"Ext6,19" db:"Ext6" json:"Ext6"`
	UpdateTime int64  `thrift:"UpdateTime,20" db:"UpdateTime" json:"UpdateTime"`
}

func NewProfile() *Profile {
	return &Profile{}
}

func (p *Profile) GetMemberId() int64 {
	return p.MemberId
}

func (p *Profile) GetName() string {
	return p.Name
}

func (p *Profile) GetAvatar() string {
	return p.Avatar
}

func (p *Profile) GetSex() int32 {
	return p.Sex
}

func (p *Profile) GetBirthDay() string {
	return p.BirthDay
}

func (p *Profile) GetPhone() string {
	return p.Phone
}

func (p *Profile) GetAddress() string {
	return p.Address
}

func (p *Profile) GetIm() string {
	return p.Im
}

func (p *Profile) GetEmail() string {
	return p.Email
}

func (p *Profile) GetProvince() int32 {
	return p.Province
}

func (p *Profile) GetCity() int32 {
	return p.City
}

func (p *Profile) GetDistrict() int32 {
	return p.District
}

func (p *Profile) GetRemark() string {
	return p.Remark
}

func (p *Profile) GetExt1() string {
	return p.Ext1
}

func (p *Profile) GetExt2() string {
	return p.Ext2
}

func (p *Profile) GetExt3() string {
	return p.Ext3
}

func (p *Profile) GetExt4() string {
	return p.Ext4
}

func (p *Profile) GetExt5() string {
	return p.Ext5
}

func (p *Profile) GetExt6() string {
	return p.Ext6
}

func (p *Profile) GetUpdateTime() int64 {
	return p.UpdateTime
}
func (p *Profile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.ReadField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Profile) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *Profile) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Profile) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Avatar = v
	}
	return nil
}

func (p *Profile) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Sex = v
	}
	return nil
}

func (p *Profile) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BirthDay = v
	}
	return nil
}

func (p *Profile) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *Profile) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Address = v
	}
	return nil
}

func (p *Profile) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Im = v
	}
	return nil
}

func (p *Profile) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *Profile) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Province = v
	}
	return nil
}

func (p *Profile) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.City = v
	}
	return nil
}

func (p *Profile) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.District = v
	}
	return nil
}

func (p *Profile) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Remark = v
	}
	return nil
}

func (p *Profile) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Ext1 = v
	}
	return nil
}

func (p *Profile) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Ext2 = v
	}
	return nil
}

func (p *Profile) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.Ext3 = v
	}
	return nil
}

func (p *Profile) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.Ext4 = v
	}
	return nil
}

func (p *Profile) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.Ext5 = v
	}
	return nil
}

func (p *Profile) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.Ext6 = v
	}
	return nil
}

func (p *Profile) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *Profile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Profile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField19(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Profile) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MemberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MemberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MemberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MemberId: ", p), err)
	}
	return err
}

func (p *Profile) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Name: ", p), err)
	}
	return err
}

func (p *Profile) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Avatar", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Avatar: ", p), err)
	}
	if err := oprot.WriteString(string(p.Avatar)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Avatar (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Avatar: ", p), err)
	}
	return err
}

func (p *Profile) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Sex", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Sex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Sex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Sex (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Sex: ", p), err)
	}
	return err
}

func (p *Profile) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BirthDay", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:BirthDay: ", p), err)
	}
	if err := oprot.WriteString(string(p.BirthDay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BirthDay (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:BirthDay: ", p), err)
	}
	return err
}

func (p *Profile) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Phone", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Phone (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Phone: ", p), err)
	}
	return err
}

func (p *Profile) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Address", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Address: ", p), err)
	}
	if err := oprot.WriteString(string(p.Address)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Address (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Address: ", p), err)
	}
	return err
}

func (p *Profile) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Im", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Im: ", p), err)
	}
	if err := oprot.WriteString(string(p.Im)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Im (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Im: ", p), err)
	}
	return err
}

func (p *Profile) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Email", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:Email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Email (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:Email: ", p), err)
	}
	return err
}

func (p *Profile) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Province", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Province: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Province)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Province (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Province: ", p), err)
	}
	return err
}

func (p *Profile) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("City", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:City: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.City)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.City (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:City: ", p), err)
	}
	return err
}

func (p *Profile) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("District", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:District: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.District)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.District (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:District: ", p), err)
	}
	return err
}

func (p *Profile) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Remark", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:Remark: ", p), err)
	}
	if err := oprot.WriteString(string(p.Remark)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Remark (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:Remark: ", p), err)
	}
	return err
}

func (p *Profile) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ext1", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:Ext1: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ext1)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Ext1 (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:Ext1: ", p), err)
	}
	return err
}

func (p *Profile) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ext2", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:Ext2: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ext2)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Ext2 (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:Ext2: ", p), err)
	}
	return err
}

func (p *Profile) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ext3", thrift.STRING, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:Ext3: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ext3)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Ext3 (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:Ext3: ", p), err)
	}
	return err
}

func (p *Profile) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ext4", thrift.STRING, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:Ext4: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ext4)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Ext4 (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:Ext4: ", p), err)
	}
	return err
}

func (p *Profile) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ext5", thrift.STRING, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:Ext5: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ext5)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Ext5 (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:Ext5: ", p), err)
	}
	return err
}

func (p *Profile) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ext6", thrift.STRING, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:Ext6: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ext6)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Ext6 (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:Ext6: ", p), err)
	}
	return err
}

func (p *Profile) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:UpdateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:UpdateTime: ", p), err)
	}
	return err
}

func (p *Profile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Profile(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Integral
//  - FreezeIntegral
//  - Balance
//  - FreezeBalance
//  - ExpiredBalance
//  - WalletBalance
//  - FreezeWallet
//  - ExpiredPresent
//  - TotalPresentFee
//  - FlowBalance
//  - GrowBalance
//  - GrowAmount
//  - GrowEarnings
//  - GrowTotalEarnings
//  - TotalExpense
//  - TotalCharge
//  - TotalPay
//  - PriorityPay
//  - UpdateTime
type Account struct {
	MemberId          int64   `thrift:"MemberId,1" db:"MemberId" json:"MemberId"`
	Integral          int64   `thrift:"Integral,2" db:"Integral" json:"Integral"`
	FreezeIntegral    int64   `thrift:"FreezeIntegral,3" db:"FreezeIntegral" json:"FreezeIntegral"`
	Balance           float64 `thrift:"Balance,4" db:"Balance" json:"Balance"`
	FreezeBalance     float64 `thrift:"FreezeBalance,5" db:"FreezeBalance" json:"FreezeBalance"`
	ExpiredBalance    float64 `thrift:"ExpiredBalance,6" db:"ExpiredBalance" json:"ExpiredBalance"`
	WalletBalance     float64 `thrift:"WalletBalance,7" db:"WalletBalance" json:"WalletBalance"`
	FreezeWallet      float64 `thrift:"FreezeWallet,8" db:"FreezeWallet" json:"FreezeWallet"`
	ExpiredPresent    float64 `thrift:"ExpiredPresent,9" db:"ExpiredPresent" json:"ExpiredPresent"`
	TotalPresentFee   float64 `thrift:"TotalPresentFee,10" db:"TotalPresentFee" json:"TotalPresentFee"`
	FlowBalance       float64 `thrift:"FlowBalance,11" db:"FlowBalance" json:"FlowBalance"`
	GrowBalance       float64 `thrift:"GrowBalance,12" db:"GrowBalance" json:"GrowBalance"`
	GrowAmount        float64 `thrift:"GrowAmount,13" db:"GrowAmount" json:"GrowAmount"`
	GrowEarnings      float64 `thrift:"GrowEarnings,14" db:"GrowEarnings" json:"GrowEarnings"`
	GrowTotalEarnings float64 `thrift:"GrowTotalEarnings,15" db:"GrowTotalEarnings" json:"GrowTotalEarnings"`
	TotalExpense      float64 `thrift:"TotalExpense,16" db:"TotalExpense" json:"TotalExpense"`
	TotalCharge       float64 `thrift:"TotalCharge,17" db:"TotalCharge" json:"TotalCharge"`
	TotalPay          float64 `thrift:"TotalPay,18" db:"TotalPay" json:"TotalPay"`
	PriorityPay       int64   `thrift:"PriorityPay,19" db:"PriorityPay" json:"PriorityPay"`
	UpdateTime        int64   `thrift:"UpdateTime,20" db:"UpdateTime" json:"UpdateTime"`
}

func NewAccount() *Account {
	return &Account{}
}

func (p *Account) GetMemberId() int64 {
	return p.MemberId
}

func (p *Account) GetIntegral() int64 {
	return p.Integral
}

func (p *Account) GetFreezeIntegral() int64 {
	return p.FreezeIntegral
}

func (p *Account) GetBalance() float64 {
	return p.Balance
}

func (p *Account) GetFreezeBalance() float64 {
	return p.FreezeBalance
}

func (p *Account) GetExpiredBalance() float64 {
	return p.ExpiredBalance
}

func (p *Account) GetWalletBalance() float64 {
	return p.WalletBalance
}

func (p *Account) GetFreezeWallet() float64 {
	return p.FreezeWallet
}

func (p *Account) GetExpiredPresent() float64 {
	return p.ExpiredPresent
}

func (p *Account) GetTotalPresentFee() float64 {
	return p.TotalPresentFee
}

func (p *Account) GetFlowBalance() float64 {
	return p.FlowBalance
}

func (p *Account) GetGrowBalance() float64 {
	return p.GrowBalance
}

func (p *Account) GetGrowAmount() float64 {
	return p.GrowAmount
}

func (p *Account) GetGrowEarnings() float64 {
	return p.GrowEarnings
}

func (p *Account) GetGrowTotalEarnings() float64 {
	return p.GrowTotalEarnings
}

func (p *Account) GetTotalExpense() float64 {
	return p.TotalExpense
}

func (p *Account) GetTotalCharge() float64 {
	return p.TotalCharge
}

func (p *Account) GetTotalPay() float64 {
	return p.TotalPay
}

func (p *Account) GetPriorityPay() int64 {
	return p.PriorityPay
}

func (p *Account) GetUpdateTime() int64 {
	return p.UpdateTime
}
func (p *Account) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.ReadField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Account) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *Account) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Integral = v
	}
	return nil
}

func (p *Account) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FreezeIntegral = v
	}
	return nil
}

func (p *Account) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Balance = v
	}
	return nil
}

func (p *Account) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.FreezeBalance = v
	}
	return nil
}

func (p *Account) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ExpiredBalance = v
	}
	return nil
}

func (p *Account) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.WalletBalance = v
	}
	return nil
}

func (p *Account) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.FreezeWallet = v
	}
	return nil
}

func (p *Account) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.ExpiredPresent = v
	}
	return nil
}

func (p *Account) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.TotalPresentFee = v
	}
	return nil
}

func (p *Account) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.FlowBalance = v
	}
	return nil
}

func (p *Account) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.GrowBalance = v
	}
	return nil
}

func (p *Account) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.GrowAmount = v
	}
	return nil
}

func (p *Account) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.GrowEarnings = v
	}
	return nil
}

func (p *Account) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.GrowTotalEarnings = v
	}
	return nil
}

func (p *Account) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.TotalExpense = v
	}
	return nil
}

func (p *Account) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.TotalCharge = v
	}
	return nil
}

func (p *Account) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.TotalPay = v
	}
	return nil
}

func (p *Account) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.PriorityPay = v
	}
	return nil
}

func (p *Account) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *Account) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Account"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField19(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Account) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MemberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MemberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MemberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MemberId: ", p), err)
	}
	return err
}

func (p *Account) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Integral", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Integral: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Integral)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Integral (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Integral: ", p), err)
	}
	return err
}

func (p *Account) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FreezeIntegral", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:FreezeIntegral: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FreezeIntegral)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FreezeIntegral (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:FreezeIntegral: ", p), err)
	}
	return err
}

func (p *Account) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Balance", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Balance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Balance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Balance (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Balance: ", p), err)
	}
	return err
}

func (p *Account) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FreezeBalance", thrift.DOUBLE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:FreezeBalance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.FreezeBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FreezeBalance (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:FreezeBalance: ", p), err)
	}
	return err
}

func (p *Account) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExpiredBalance", thrift.DOUBLE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ExpiredBalance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.ExpiredBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ExpiredBalance (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ExpiredBalance: ", p), err)
	}
	return err
}

func (p *Account) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("WalletBalance", thrift.DOUBLE, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:WalletBalance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.WalletBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.WalletBalance (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:WalletBalance: ", p), err)
	}
	return err
}

func (p *Account) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FreezeWallet", thrift.DOUBLE, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:FreezeWallet: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.FreezeWallet)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FreezeWallet (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:FreezeWallet: ", p), err)
	}
	return err
}

func (p *Account) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExpiredPresent", thrift.DOUBLE, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ExpiredPresent: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.ExpiredPresent)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ExpiredPresent (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ExpiredPresent: ", p), err)
	}
	return err
}

func (p *Account) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalPresentFee", thrift.DOUBLE, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:TotalPresentFee: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.TotalPresentFee)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalPresentFee (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:TotalPresentFee: ", p), err)
	}
	return err
}

func (p *Account) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FlowBalance", thrift.DOUBLE, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:FlowBalance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.FlowBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FlowBalance (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:FlowBalance: ", p), err)
	}
	return err
}

func (p *Account) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GrowBalance", thrift.DOUBLE, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:GrowBalance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.GrowBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrowBalance (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:GrowBalance: ", p), err)
	}
	return err
}

func (p *Account) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GrowAmount", thrift.DOUBLE, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:GrowAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.GrowAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrowAmount (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:GrowAmount: ", p), err)
	}
	return err
}

func (p *Account) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GrowEarnings", thrift.DOUBLE, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:GrowEarnings: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.GrowEarnings)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrowEarnings (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:GrowEarnings: ", p), err)
	}
	return err
}

func (p *Account) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GrowTotalEarnings", thrift.DOUBLE, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:GrowTotalEarnings: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.GrowTotalEarnings)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrowTotalEarnings (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:GrowTotalEarnings: ", p), err)
	}
	return err
}

func (p *Account) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalExpense", thrift.DOUBLE, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:TotalExpense: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.TotalExpense)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalExpense (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:TotalExpense: ", p), err)
	}
	return err
}

func (p *Account) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalCharge", thrift.DOUBLE, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:TotalCharge: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.TotalCharge)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalCharge (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:TotalCharge: ", p), err)
	}
	return err
}

func (p *Account) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalPay", thrift.DOUBLE, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:TotalPay: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.TotalPay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalPay (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:TotalPay: ", p), err)
	}
	return err
}

func (p *Account) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PriorityPay", thrift.I64, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:PriorityPay: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PriorityPay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PriorityPay (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:PriorityPay: ", p), err)
	}
	return err
}

func (p *Account) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:UpdateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:UpdateTime: ", p), err)
	}
	return err
}

func (p *Account) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Account(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Usr
//  - Name
//  - Avatar
//  - Exp
//  - Level
//  - LevelName
//  - LevelSign
//  - LevelOfficial
//  - PremiumUser
//  - PremiumExpires
//  - InvitationCode
//  - TrustAuthState
//  - State
//  - Integral
//  - Balance
//  - WalletBalance
//  - GrowBalance
//  - GrowAmount
//  - GrowEarnings
//  - GrowTotalEarnings
//  - UpdateTime
type ComplexMember struct {
	MemberId          int64   `thrift:"MemberId,1" db:"MemberId" json:"MemberId"`
	Usr               string  `thrift:"Usr,2" db:"Usr" json:"Usr"`
	Name              string  `thrift:"Name,3" db:"Name" json:"Name"`
	Avatar            string  `thrift:"Avatar,4" db:"Avatar" json:"Avatar"`
	Exp               int32   `thrift:"Exp,5" db:"Exp" json:"Exp"`
	Level             int32   `thrift:"Level,6" db:"Level" json:"Level"`
	LevelName         string  `thrift:"LevelName,7" db:"LevelName" json:"LevelName"`
	LevelSign         string  `thrift:"LevelSign,8" db:"LevelSign" json:"LevelSign"`
	LevelOfficial     int32   `thrift:"LevelOfficial,9" db:"LevelOfficial" json:"LevelOfficial"`
	PremiumUser       int32   `thrift:"PremiumUser,10" db:"PremiumUser" json:"PremiumUser"`
	PremiumExpires    int64   `thrift:"PremiumExpires,11" db:"PremiumExpires" json:"PremiumExpires"`
	InvitationCode    string  `thrift:"InvitationCode,12" db:"InvitationCode" json:"InvitationCode"`
	TrustAuthState    int32   `thrift:"TrustAuthState,13" db:"TrustAuthState" json:"TrustAuthState"`
	State             int32   `thrift:"State,14" db:"State" json:"State"`
	Integral          int64   `thrift:"Integral,15" db:"Integral" json:"Integral"`
	Balance           float64 `thrift:"Balance,16" db:"Balance" json:"Balance"`
	WalletBalance     float64 `thrift:"WalletBalance,17" db:"WalletBalance" json:"WalletBalance"`
	GrowBalance       float64 `thrift:"GrowBalance,18" db:"GrowBalance" json:"GrowBalance"`
	GrowAmount        float64 `thrift:"GrowAmount,19" db:"GrowAmount" json:"GrowAmount"`
	GrowEarnings      float64 `thrift:"GrowEarnings,20" db:"GrowEarnings" json:"GrowEarnings"`
	GrowTotalEarnings float64 `thrift:"GrowTotalEarnings,21" db:"GrowTotalEarnings" json:"GrowTotalEarnings"`
	UpdateTime        int64   `thrift:"UpdateTime,22" db:"UpdateTime" json:"UpdateTime"`
}

func NewComplexMember() *ComplexMember {
	return &ComplexMember{}
}

func (p *ComplexMember) GetMemberId() int64 {
	return p.MemberId
}

func (p *ComplexMember) GetUsr() string {
	return p.Usr
}

func (p *ComplexMember) GetName() string {
	return p.Name
}

func (p *ComplexMember) GetAvatar() string {
	return p.Avatar
}

func (p *ComplexMember) GetExp() int32 {
	return p.Exp
}

func (p *ComplexMember) GetLevel() int32 {
	return p.Level
}

func (p *ComplexMember) GetLevelName() string {
	return p.LevelName
}

func (p *ComplexMember) GetLevelSign() string {
	return p.LevelSign
}

func (p *ComplexMember) GetLevelOfficial() int32 {
	return p.LevelOfficial
}

func (p *ComplexMember) GetPremiumUser() int32 {
	return p.PremiumUser
}

func (p *ComplexMember) GetPremiumExpires() int64 {
	return p.PremiumExpires
}

func (p *ComplexMember) GetInvitationCode() string {
	return p.InvitationCode
}

func (p *ComplexMember) GetTrustAuthState() int32 {
	return p.TrustAuthState
}

func (p *ComplexMember) GetState() int32 {
	return p.State
}

func (p *ComplexMember) GetIntegral() int64 {
	return p.Integral
}

func (p *ComplexMember) GetBalance() float64 {
	return p.Balance
}

func (p *ComplexMember) GetWalletBalance() float64 {
	return p.WalletBalance
}

func (p *ComplexMember) GetGrowBalance() float64 {
	return p.GrowBalance
}

func (p *ComplexMember) GetGrowAmount() float64 {
	return p.GrowAmount
}

func (p *ComplexMember) GetGrowEarnings() float64 {
	return p.GrowEarnings
}

func (p *ComplexMember) GetGrowTotalEarnings() float64 {
	return p.GrowTotalEarnings
}

func (p *ComplexMember) GetUpdateTime() int64 {
	return p.UpdateTime
}
func (p *ComplexMember) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.ReadField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ComplexMember) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *ComplexMember) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Usr = v
	}
	return nil
}

func (p *ComplexMember) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ComplexMember) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Avatar = v
	}
	return nil
}

func (p *ComplexMember) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Exp = v
	}
	return nil
}

func (p *ComplexMember) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Level = v
	}
	return nil
}

func (p *ComplexMember) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.LevelName = v
	}
	return nil
}

func (p *ComplexMember) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.LevelSign = v
	}
	return nil
}

func (p *ComplexMember) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.LevelOfficial = v
	}
	return nil
}

func (p *ComplexMember) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.PremiumUser = v
	}
	return nil
}

func (p *ComplexMember) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.PremiumExpires = v
	}
	return nil
}

func (p *ComplexMember) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.InvitationCode = v
	}
	return nil
}

func (p *ComplexMember) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.TrustAuthState = v
	}
	return nil
}

func (p *ComplexMember) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *ComplexMember) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Integral = v
	}
	return nil
}

func (p *ComplexMember) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.Balance = v
	}
	return nil
}

func (p *ComplexMember) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.WalletBalance = v
	}
	return nil
}

func (p *ComplexMember) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.GrowBalance = v
	}
	return nil
}

func (p *ComplexMember) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.GrowAmount = v
	}
	return nil
}

func (p *ComplexMember) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.GrowEarnings = v
	}
	return nil
}

func (p *ComplexMember) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.GrowTotalEarnings = v
	}
	return nil
}

func (p *ComplexMember) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *ComplexMember) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ComplexMember"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField19(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField22(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ComplexMember) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MemberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MemberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MemberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MemberId: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Usr", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Usr: ", p), err)
	}
	if err := oprot.WriteString(string(p.Usr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Usr (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Usr: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Name: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Avatar", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Avatar: ", p), err)
	}
	if err := oprot.WriteString(string(p.Avatar)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Avatar (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Avatar: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Exp", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Exp: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Exp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Exp (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Exp: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Level", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Level: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Level)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Level (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Level: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LevelName", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:LevelName: ", p), err)
	}
	if err := oprot.WriteString(string(p.LevelName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LevelName (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:LevelName: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LevelSign", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:LevelSign: ", p), err)
	}
	if err := oprot.WriteString(string(p.LevelSign)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LevelSign (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:LevelSign: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LevelOfficial", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:LevelOfficial: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LevelOfficial)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LevelOfficial (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:LevelOfficial: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PremiumUser", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:PremiumUser: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PremiumUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PremiumUser (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:PremiumUser: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PremiumExpires", thrift.I64, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:PremiumExpires: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PremiumExpires)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PremiumExpires (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:PremiumExpires: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("InvitationCode", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:InvitationCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.InvitationCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.InvitationCode (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:InvitationCode: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TrustAuthState", thrift.I32, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:TrustAuthState: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TrustAuthState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TrustAuthState (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:TrustAuthState: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("State", thrift.I32, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:State: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.State (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:State: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Integral", thrift.I64, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:Integral: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Integral)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Integral (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:Integral: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Balance", thrift.DOUBLE, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:Balance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Balance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Balance (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:Balance: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("WalletBalance", thrift.DOUBLE, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:WalletBalance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.WalletBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.WalletBalance (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:WalletBalance: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GrowBalance", thrift.DOUBLE, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:GrowBalance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.GrowBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrowBalance (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:GrowBalance: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GrowAmount", thrift.DOUBLE, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:GrowAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.GrowAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrowAmount (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:GrowAmount: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GrowEarnings", thrift.DOUBLE, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:GrowEarnings: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.GrowEarnings)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrowEarnings (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:GrowEarnings: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GrowTotalEarnings", thrift.DOUBLE, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:GrowTotalEarnings: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.GrowTotalEarnings)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrowTotalEarnings (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:GrowTotalEarnings: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:UpdateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:UpdateTime: ", p), err)
	}
	return err
}

func (p *ComplexMember) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComplexMember(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - CardId
//  - InviterId
//  - InviterStr
//  - RegisterMchId
type MemberRelation struct {
	MemberId      int64  `thrift:"MemberId,1" db:"MemberId" json:"MemberId"`
	CardId        string `thrift:"CardId,2" db:"CardId" json:"CardId"`
	InviterId     int64  `thrift:"InviterId,3" db:"InviterId" json:"InviterId"`
	InviterStr    string `thrift:"InviterStr,4" db:"InviterStr" json:"InviterStr"`
	RegisterMchId int32  `thrift:"RegisterMchId,5" db:"RegisterMchId" json:"RegisterMchId"`
}

func NewMemberRelation() *MemberRelation {
	return &MemberRelation{}
}

func (p *MemberRelation) GetMemberId() int64 {
	return p.MemberId
}

func (p *MemberRelation) GetCardId() string {
	return p.CardId
}

func (p *MemberRelation) GetInviterId() int64 {
	return p.InviterId
}

func (p *MemberRelation) GetInviterStr() string {
	return p.InviterStr
}

func (p *MemberRelation) GetRegisterMchId() int32 {
	return p.RegisterMchId
}
func (p *MemberRelation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberRelation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *MemberRelation) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CardId = v
	}
	return nil
}

func (p *MemberRelation) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.InviterId = v
	}
	return nil
}

func (p *MemberRelation) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.InviterStr = v
	}
	return nil
}

func (p *MemberRelation) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.RegisterMchId = v
	}
	return nil
}

func (p *MemberRelation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MemberRelation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberRelation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MemberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MemberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MemberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MemberId: ", p), err)
	}
	return err
}

func (p *MemberRelation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CardId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:CardId: ", p), err)
	}
	if err := oprot.WriteString(string(p.CardId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CardId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:CardId: ", p), err)
	}
	return err
}

func (p *MemberRelation) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("InviterId", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:InviterId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.InviterId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.InviterId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:InviterId: ", p), err)
	}
	return err
}

func (p *MemberRelation) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("InviterStr", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:InviterStr: ", p), err)
	}
	if err := oprot.WriteString(string(p.InviterStr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.InviterStr (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:InviterStr: ", p), err)
	}
	return err
}

func (p *MemberRelation) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RegisterMchId", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:RegisterMchId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RegisterMchId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RegisterMchId (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:RegisterMchId: ", p), err)
	}
	return err
}

func (p *MemberRelation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberRelation(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - RealName
//  - CardId
//  - TrustImage
//  - Reviewed
//  - ReviewTime
//  - Remark
//  - UpdateTime
type TrustedInfo struct {
	MemberId   int64  `thrift:"MemberId,1" db:"MemberId" json:"MemberId"`
	RealName   string `thrift:"RealName,2" db:"RealName" json:"RealName"`
	CardId     string `thrift:"CardId,3" db:"CardId" json:"CardId"`
	TrustImage string `thrift:"TrustImage,4" db:"TrustImage" json:"TrustImage"`
	Reviewed   int32  `thrift:"Reviewed,5" db:"Reviewed" json:"Reviewed"`
	ReviewTime int64  `thrift:"ReviewTime,6" db:"ReviewTime" json:"ReviewTime"`
	Remark     string `thrift:"Remark,7" db:"Remark" json:"Remark"`
	UpdateTime int64  `thrift:"UpdateTime,8" db:"UpdateTime" json:"UpdateTime"`
}

func NewTrustedInfo() *TrustedInfo {
	return &TrustedInfo{}
}

func (p *TrustedInfo) GetMemberId() int64 {
	return p.MemberId
}

func (p *TrustedInfo) GetRealName() string {
	return p.RealName
}

func (p *TrustedInfo) GetCardId() string {
	return p.CardId
}

func (p *TrustedInfo) GetTrustImage() string {
	return p.TrustImage
}

func (p *TrustedInfo) GetReviewed() int32 {
	return p.Reviewed
}

func (p *TrustedInfo) GetReviewTime() int64 {
	return p.ReviewTime
}

func (p *TrustedInfo) GetRemark() string {
	return p.Remark
}

func (p *TrustedInfo) GetUpdateTime() int64 {
	return p.UpdateTime
}
func (p *TrustedInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TrustedInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *TrustedInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RealName = v
	}
	return nil
}

func (p *TrustedInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CardId = v
	}
	return nil
}

func (p *TrustedInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TrustImage = v
	}
	return nil
}

func (p *TrustedInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Reviewed = v
	}
	return nil
}

func (p *TrustedInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ReviewTime = v
	}
	return nil
}

func (p *TrustedInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Remark = v
	}
	return nil
}

func (p *TrustedInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *TrustedInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TrustedInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TrustedInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MemberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MemberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MemberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MemberId: ", p), err)
	}
	return err
}

func (p *TrustedInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RealName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RealName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RealName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RealName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RealName: ", p), err)
	}
	return err
}

func (p *TrustedInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CardId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:CardId: ", p), err)
	}
	if err := oprot.WriteString(string(p.CardId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CardId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:CardId: ", p), err)
	}
	return err
}

func (p *TrustedInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TrustImage", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:TrustImage: ", p), err)
	}
	if err := oprot.WriteString(string(p.TrustImage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TrustImage (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:TrustImage: ", p), err)
	}
	return err
}

func (p *TrustedInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Reviewed", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Reviewed: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Reviewed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Reviewed (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Reviewed: ", p), err)
	}
	return err
}

func (p *TrustedInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ReviewTime", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ReviewTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ReviewTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ReviewTime (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ReviewTime: ", p), err)
	}
	return err
}

func (p *TrustedInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Remark", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Remark: ", p), err)
	}
	if err := oprot.WriteString(string(p.Remark)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Remark (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Remark: ", p), err)
	}
	return err
}

func (p *TrustedInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:UpdateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:UpdateTime: ", p), err)
	}
	return err
}

func (p *TrustedInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrustedInfo(%+v)", *p)
}

// Attributes:
//  - ID
//  - MemberId
//  - RealName
//  - Phone
//  - Province
//  - City
//  - District
//  - Area
//  - Address
//  - IsDefault
type Address struct {
	ID        int64  `thrift:"ID,1" db:"ID" json:"ID"`
	MemberId  int64  `thrift:"MemberId,2" db:"MemberId" json:"MemberId"`
	RealName  string `thrift:"RealName,3" db:"RealName" json:"RealName"`
	Phone     string `thrift:"Phone,4" db:"Phone" json:"Phone"`
	Province  int32  `thrift:"Province,5" db:"Province" json:"Province"`
	City      int32  `thrift:"City,6" db:"City" json:"City"`
	District  int32  `thrift:"District,7" db:"District" json:"District"`
	Area      string `thrift:"Area,8" db:"Area" json:"Area"`
	Address   string `thrift:"Address,9" db:"Address" json:"Address"`
	IsDefault int32  `thrift:"IsDefault,10" db:"IsDefault" json:"IsDefault"`
}

func NewAddress() *Address {
	return &Address{}
}

func (p *Address) GetID() int64 {
	return p.ID
}

func (p *Address) GetMemberId() int64 {
	return p.MemberId
}

func (p *Address) GetRealName() string {
	return p.RealName
}

func (p *Address) GetPhone() string {
	return p.Phone
}

func (p *Address) GetProvince() int32 {
	return p.Province
}

func (p *Address) GetCity() int32 {
	return p.City
}

func (p *Address) GetDistrict() int32 {
	return p.District
}

func (p *Address) GetArea() string {
	return p.Area
}

func (p *Address) GetAddress() string {
	return p.Address
}

func (p *Address) GetIsDefault() int32 {
	return p.IsDefault
}
func (p *Address) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Address) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Address) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *Address) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RealName = v
	}
	return nil
}

func (p *Address) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *Address) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Province = v
	}
	return nil
}

func (p *Address) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.City = v
	}
	return nil
}

func (p *Address) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.District = v
	}
	return nil
}

func (p *Address) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Area = v
	}
	return nil
}

func (p *Address) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Address = v
	}
	return nil
}

func (p *Address) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.IsDefault = v
	}
	return nil
}

func (p *Address) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Address"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Address) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Address) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MemberId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:MemberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MemberId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:MemberId: ", p), err)
	}
	return err
}

func (p *Address) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RealName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:RealName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RealName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RealName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:RealName: ", p), err)
	}
	return err
}

func (p *Address) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Phone", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Phone (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Phone: ", p), err)
	}
	return err
}

func (p *Address) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Province", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Province: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Province)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Province (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Province: ", p), err)
	}
	return err
}

func (p *Address) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("City", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:City: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.City)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.City (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:City: ", p), err)
	}
	return err
}

func (p *Address) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("District", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:District: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.District)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.District (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:District: ", p), err)
	}
	return err
}

func (p *Address) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Area", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Area: ", p), err)
	}
	if err := oprot.WriteString(string(p.Area)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Area (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Area: ", p), err)
	}
	return err
}

func (p *Address) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Address", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:Address: ", p), err)
	}
	if err := oprot.WriteString(string(p.Address)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Address (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:Address: ", p), err)
	}
	return err
}

func (p *Address) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IsDefault", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:IsDefault: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsDefault)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IsDefault (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:IsDefault: ", p), err)
	}
	return err
}

func (p *Address) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Address(%+v)", *p)
}

type MemberService interface {
	// Parameters:
	//  - User
	//  - Pwd
	//  - Update
	CheckLogin(user string, pwd string, update bool) (r *Result64, err error)
	// Parameters:
	//  - ID
	//  - TradePwd
	CheckTradePwd(id int64, tradePwd string) (r *Result_, err error)
	LevelList() (r []*Level, err error)
	// Parameters:
	//  - ID
	GetTrustInfo(id int64) (r *TrustedInfo, err error)
	// Parameters:
	//  - ID
	GetLevel(id int32) (r *Level, err error)
	// Parameters:
	//  - ID
	GetMember(id int64) (r *Member, err error)
	// Parameters:
	//  - User
	GetMemberByUser(user string) (r *Member, err error)
	// Parameters:
	//  - ID
	GetProfile(id int64) (r *Profile, err error)
	// Parameters:
	//  - MemberId
	Complex(memberId int64) (r *ComplexMember, err error)
	// Parameters:
	//  - MemberId
	//  - Level
	//  - Review
	//  - PaymentOrderId
	UpdateLevel(memberId int64, level int32, review bool, paymentOrderId int64) (r *Result_, err error)
	// Parameters:
	//  - MemberId
	//  - V
	//  - Expires
	Premium(memberId int64, v int32, expires int64) (r *Result_, err error)
	// Parameters:
	//  - MemberId
	//  - Reset
	GetToken(memberId int64, reset bool) (r string, err error)
	// Parameters:
	//  - MemberId
	//  - Token
	CheckToken(memberId int64, token string) (r bool, err error)
	// Parameters:
	//  - MemberId
	RemoveToken(memberId int64) (err error)
	// Parameters:
	//  - MemberId
	//  - AddrId
	GetAddress(memberId int64, addrId int64) (r *Address, err error)
	// Parameters:
	//  - MemberId
	GetAccount(memberId int64) (r *Account, err error)
	// Parameters:
	//  - MemberId
	//  - Depth
	InviterArray(memberId int64, depth int32) (r []int64, err error)
	// Parameters:
	//  - MemberId
	//  - Data
	GetInviterQuantity(memberId int64, data map[string]string) (r int32, err error)
	// Parameters:
	//  - MemberId
	//  - Account
	//  - Kind
	//  - Title
	//  - OuterNo
	//  - Amount
	//  - RelateUser
	ChargeAccount(memberId int64, account int32, kind int32, title string, outerNo string, amount float64, relateUser int64) (r *Result_, err error)
	// Parameters:
	//  - MemberId
	//  - Account
	//  - Title
	//  - OuterNo
	//  - Amount
	//  - RelateUser
	//  - MustLargeZero
	DiscountAccount(memberId int64, account int32, title string, outerNo string, amount float64, relateUser int64, mustLargeZero bool) (r *Result_, err error)
	// Parameters:
	//  - MemberId
	//  - Action
	//  - Data
	B4EAuth(memberId int64, action string, data map[string]string) (r *Result_, err error)
}

type MemberServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewMemberServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MemberServiceClient {
	return &MemberServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewMemberServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MemberServiceClient {
	return &MemberServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - User
//  - Pwd
//  - Update
func (p *MemberServiceClient) CheckLogin(user string, pwd string, update bool) (r *Result64, err error) {
	if err = p.sendCheckLogin(user, pwd, update); err != nil {
		return
	}
	return p.recvCheckLogin()
}

func (p *MemberServiceClient) sendCheckLogin(user string, pwd string, update bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("CheckLogin", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceCheckLoginArgs{
		User:   user,
		Pwd:    pwd,
		Update: update,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvCheckLogin() (value *Result64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "CheckLogin" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "CheckLogin failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CheckLogin failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "CheckLogin failed: invalid message type")
		return
	}
	result := MemberServiceCheckLoginResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
//  - TradePwd
func (p *MemberServiceClient) CheckTradePwd(id int64, tradePwd string) (r *Result_, err error) {
	if err = p.sendCheckTradePwd(id, tradePwd); err != nil {
		return
	}
	return p.recvCheckTradePwd()
}

func (p *MemberServiceClient) sendCheckTradePwd(id int64, tradePwd string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("CheckTradePwd", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceCheckTradePwdArgs{
		ID:       id,
		TradePwd: tradePwd,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvCheckTradePwd() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "CheckTradePwd" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "CheckTradePwd failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CheckTradePwd failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "CheckTradePwd failed: invalid message type")
		return
	}
	result := MemberServiceCheckTradePwdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

func (p *MemberServiceClient) LevelList() (r []*Level, err error) {
	if err = p.sendLevelList(); err != nil {
		return
	}
	return p.recvLevelList()
}

func (p *MemberServiceClient) sendLevelList() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("LevelList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceLevelListArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvLevelList() (value []*Level, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "LevelList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "LevelList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "LevelList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "LevelList failed: invalid message type")
		return
	}
	result := MemberServiceLevelListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
func (p *MemberServiceClient) GetTrustInfo(id int64) (r *TrustedInfo, err error) {
	if err = p.sendGetTrustInfo(id); err != nil {
		return
	}
	return p.recvGetTrustInfo()
}

func (p *MemberServiceClient) sendGetTrustInfo(id int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetTrustInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceGetTrustInfoArgs{
		ID: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvGetTrustInfo() (value *TrustedInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetTrustInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetTrustInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetTrustInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetTrustInfo failed: invalid message type")
		return
	}
	result := MemberServiceGetTrustInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
func (p *MemberServiceClient) GetLevel(id int32) (r *Level, err error) {
	if err = p.sendGetLevel(id); err != nil {
		return
	}
	return p.recvGetLevel()
}

func (p *MemberServiceClient) sendGetLevel(id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetLevel", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceGetLevelArgs{
		ID: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvGetLevel() (value *Level, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetLevel" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetLevel failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetLevel failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetLevel failed: invalid message type")
		return
	}
	result := MemberServiceGetLevelResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
func (p *MemberServiceClient) GetMember(id int64) (r *Member, err error) {
	if err = p.sendGetMember(id); err != nil {
		return
	}
	return p.recvGetMember()
}

func (p *MemberServiceClient) sendGetMember(id int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetMember", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceGetMemberArgs{
		ID: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvGetMember() (value *Member, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetMember" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetMember failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetMember failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetMember failed: invalid message type")
		return
	}
	result := MemberServiceGetMemberResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - User
func (p *MemberServiceClient) GetMemberByUser(user string) (r *Member, err error) {
	if err = p.sendGetMemberByUser(user); err != nil {
		return
	}
	return p.recvGetMemberByUser()
}

func (p *MemberServiceClient) sendGetMemberByUser(user string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetMemberByUser", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceGetMemberByUserArgs{
		User: user,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvGetMemberByUser() (value *Member, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetMemberByUser" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetMemberByUser failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetMemberByUser failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetMemberByUser failed: invalid message type")
		return
	}
	result := MemberServiceGetMemberByUserResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
func (p *MemberServiceClient) GetProfile(id int64) (r *Profile, err error) {
	if err = p.sendGetProfile(id); err != nil {
		return
	}
	return p.recvGetProfile()
}

func (p *MemberServiceClient) sendGetProfile(id int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetProfile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceGetProfileArgs{
		ID: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvGetProfile() (value *Profile, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetProfile" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetProfile failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetProfile failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetProfile failed: invalid message type")
		return
	}
	result := MemberServiceGetProfileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MemberId
func (p *MemberServiceClient) Complex(memberId int64) (r *ComplexMember, err error) {
	if err = p.sendComplex(memberId); err != nil {
		return
	}
	return p.recvComplex()
}

func (p *MemberServiceClient) sendComplex(memberId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("Complex", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceComplexArgs{
		MemberId: memberId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvComplex() (value *ComplexMember, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "Complex" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "Complex failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "Complex failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "Complex failed: invalid message type")
		return
	}
	result := MemberServiceComplexResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MemberId
//  - Level
//  - Review
//  - PaymentOrderId
func (p *MemberServiceClient) UpdateLevel(memberId int64, level int32, review bool, paymentOrderId int64) (r *Result_, err error) {
	if err = p.sendUpdateLevel(memberId, level, review, paymentOrderId); err != nil {
		return
	}
	return p.recvUpdateLevel()
}

func (p *MemberServiceClient) sendUpdateLevel(memberId int64, level int32, review bool, paymentOrderId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("UpdateLevel", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceUpdateLevelArgs{
		MemberId:       memberId,
		Level:          level,
		Review:         review,
		PaymentOrderId: paymentOrderId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvUpdateLevel() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "UpdateLevel" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "UpdateLevel failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "UpdateLevel failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "UpdateLevel failed: invalid message type")
		return
	}
	result := MemberServiceUpdateLevelResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MemberId
//  - V
//  - Expires
func (p *MemberServiceClient) Premium(memberId int64, v int32, expires int64) (r *Result_, err error) {
	if err = p.sendPremium(memberId, v, expires); err != nil {
		return
	}
	return p.recvPremium()
}

func (p *MemberServiceClient) sendPremium(memberId int64, v int32, expires int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("Premium", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServicePremiumArgs{
		MemberId: memberId,
		V:        v,
		Expires:  expires,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvPremium() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "Premium" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "Premium failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "Premium failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "Premium failed: invalid message type")
		return
	}
	result := MemberServicePremiumResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MemberId
//  - Reset
func (p *MemberServiceClient) GetToken(memberId int64, reset bool) (r string, err error) {
	if err = p.sendGetToken(memberId, reset); err != nil {
		return
	}
	return p.recvGetToken()
}

func (p *MemberServiceClient) sendGetToken(memberId int64, reset bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceGetTokenArgs{
		MemberId: memberId,
		Reset:    reset,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvGetToken() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetToken" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetToken failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetToken failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetToken failed: invalid message type")
		return
	}
	result := MemberServiceGetTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MemberId
//  - Token
func (p *MemberServiceClient) CheckToken(memberId int64, token string) (r bool, err error) {
	if err = p.sendCheckToken(memberId, token); err != nil {
		return
	}
	return p.recvCheckToken()
}

func (p *MemberServiceClient) sendCheckToken(memberId int64, token string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("CheckToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceCheckTokenArgs{
		MemberId: memberId,
		Token:    token,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvCheckToken() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "CheckToken" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "CheckToken failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CheckToken failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "CheckToken failed: invalid message type")
		return
	}
	result := MemberServiceCheckTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MemberId
func (p *MemberServiceClient) RemoveToken(memberId int64) (err error) {
	if err = p.sendRemoveToken(memberId); err != nil {
		return
	}
	return p.recvRemoveToken()
}

func (p *MemberServiceClient) sendRemoveToken(memberId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RemoveToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceRemoveTokenArgs{
		MemberId: memberId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvRemoveToken() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RemoveToken" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RemoveToken failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RemoveToken failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RemoveToken failed: invalid message type")
		return
	}
	result := MemberServiceRemoveTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - MemberId
//  - AddrId
func (p *MemberServiceClient) GetAddress(memberId int64, addrId int64) (r *Address, err error) {
	if err = p.sendGetAddress(memberId, addrId); err != nil {
		return
	}
	return p.recvGetAddress()
}

func (p *MemberServiceClient) sendGetAddress(memberId int64, addrId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetAddress", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceGetAddressArgs{
		MemberId: memberId,
		AddrId:   addrId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvGetAddress() (value *Address, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetAddress" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetAddress failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetAddress failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetAddress failed: invalid message type")
		return
	}
	result := MemberServiceGetAddressResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MemberId
func (p *MemberServiceClient) GetAccount(memberId int64) (r *Account, err error) {
	if err = p.sendGetAccount(memberId); err != nil {
		return
	}
	return p.recvGetAccount()
}

func (p *MemberServiceClient) sendGetAccount(memberId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetAccount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceGetAccountArgs{
		MemberId: memberId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvGetAccount() (value *Account, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetAccount" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetAccount failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetAccount failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetAccount failed: invalid message type")
		return
	}
	result := MemberServiceGetAccountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MemberId
//  - Depth
func (p *MemberServiceClient) InviterArray(memberId int64, depth int32) (r []int64, err error) {
	if err = p.sendInviterArray(memberId, depth); err != nil {
		return
	}
	return p.recvInviterArray()
}

func (p *MemberServiceClient) sendInviterArray(memberId int64, depth int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("InviterArray", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceInviterArrayArgs{
		MemberId: memberId,
		Depth:    depth,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvInviterArray() (value []int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "InviterArray" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "InviterArray failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "InviterArray failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "InviterArray failed: invalid message type")
		return
	}
	result := MemberServiceInviterArrayResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MemberId
//  - Data
func (p *MemberServiceClient) GetInviterQuantity(memberId int64, data map[string]string) (r int32, err error) {
	if err = p.sendGetInviterQuantity(memberId, data); err != nil {
		return
	}
	return p.recvGetInviterQuantity()
}

func (p *MemberServiceClient) sendGetInviterQuantity(memberId int64, data map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetInviterQuantity", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceGetInviterQuantityArgs{
		MemberId: memberId,
		Data:     data,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvGetInviterQuantity() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetInviterQuantity" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetInviterQuantity failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetInviterQuantity failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetInviterQuantity failed: invalid message type")
		return
	}
	result := MemberServiceGetInviterQuantityResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MemberId
//  - Account
//  - Kind
//  - Title
//  - OuterNo
//  - Amount
//  - RelateUser
func (p *MemberServiceClient) ChargeAccount(memberId int64, account int32, kind int32, title string, outerNo string, amount float64, relateUser int64) (r *Result_, err error) {
	if err = p.sendChargeAccount(memberId, account, kind, title, outerNo, amount, relateUser); err != nil {
		return
	}
	return p.recvChargeAccount()
}

func (p *MemberServiceClient) sendChargeAccount(memberId int64, account int32, kind int32, title string, outerNo string, amount float64, relateUser int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ChargeAccount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceChargeAccountArgs{
		MemberId:   memberId,
		Account:    account,
		Kind:       kind,
		Title:      title,
		OuterNo:    outerNo,
		Amount:     amount,
		RelateUser: relateUser,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvChargeAccount() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ChargeAccount" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ChargeAccount failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ChargeAccount failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ChargeAccount failed: invalid message type")
		return
	}
	result := MemberServiceChargeAccountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MemberId
//  - Account
//  - Title
//  - OuterNo
//  - Amount
//  - RelateUser
//  - MustLargeZero
func (p *MemberServiceClient) DiscountAccount(memberId int64, account int32, title string, outerNo string, amount float64, relateUser int64, mustLargeZero bool) (r *Result_, err error) {
	if err = p.sendDiscountAccount(memberId, account, title, outerNo, amount, relateUser, mustLargeZero); err != nil {
		return
	}
	return p.recvDiscountAccount()
}

func (p *MemberServiceClient) sendDiscountAccount(memberId int64, account int32, title string, outerNo string, amount float64, relateUser int64, mustLargeZero bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("DiscountAccount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceDiscountAccountArgs{
		MemberId:      memberId,
		Account:       account,
		Title:         title,
		OuterNo:       outerNo,
		Amount:        amount,
		RelateUser:    relateUser,
		MustLargeZero: mustLargeZero,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvDiscountAccount() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "DiscountAccount" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "DiscountAccount failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "DiscountAccount failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "DiscountAccount failed: invalid message type")
		return
	}
	result := MemberServiceDiscountAccountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MemberId
//  - Action
//  - Data
func (p *MemberServiceClient) B4EAuth(memberId int64, action string, data map[string]string) (r *Result_, err error) {
	if err = p.sendB4EAuth(memberId, action, data); err != nil {
		return
	}
	return p.recvB4EAuth()
}

func (p *MemberServiceClient) sendB4EAuth(memberId int64, action string, data map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("B4EAuth", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberServiceB4EAuthArgs{
		MemberId: memberId,
		Action:   action,
		Data:     data,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberServiceClient) recvB4EAuth() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "B4EAuth" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "B4EAuth failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "B4EAuth failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "B4EAuth failed: invalid message type")
		return
	}
	result := MemberServiceB4EAuthResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type MemberServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MemberService
}

func (p *MemberServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MemberServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MemberServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMemberServiceProcessor(handler MemberService) *MemberServiceProcessor {

	self42 := &MemberServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self42.processorMap["CheckLogin"] = &memberServiceProcessorCheckLogin{handler: handler}
	self42.processorMap["CheckTradePwd"] = &memberServiceProcessorCheckTradePwd{handler: handler}
	self42.processorMap["LevelList"] = &memberServiceProcessorLevelList{handler: handler}
	self42.processorMap["GetTrustInfo"] = &memberServiceProcessorGetTrustInfo{handler: handler}
	self42.processorMap["GetLevel"] = &memberServiceProcessorGetLevel{handler: handler}
	self42.processorMap["GetMember"] = &memberServiceProcessorGetMember{handler: handler}
	self42.processorMap["GetMemberByUser"] = &memberServiceProcessorGetMemberByUser{handler: handler}
	self42.processorMap["GetProfile"] = &memberServiceProcessorGetProfile{handler: handler}
	self42.processorMap["Complex"] = &memberServiceProcessorComplex{handler: handler}
	self42.processorMap["UpdateLevel"] = &memberServiceProcessorUpdateLevel{handler: handler}
	self42.processorMap["Premium"] = &memberServiceProcessorPremium{handler: handler}
	self42.processorMap["GetToken"] = &memberServiceProcessorGetToken{handler: handler}
	self42.processorMap["CheckToken"] = &memberServiceProcessorCheckToken{handler: handler}
	self42.processorMap["RemoveToken"] = &memberServiceProcessorRemoveToken{handler: handler}
	self42.processorMap["GetAddress"] = &memberServiceProcessorGetAddress{handler: handler}
	self42.processorMap["GetAccount"] = &memberServiceProcessorGetAccount{handler: handler}
	self42.processorMap["InviterArray"] = &memberServiceProcessorInviterArray{handler: handler}
	self42.processorMap["GetInviterQuantity"] = &memberServiceProcessorGetInviterQuantity{handler: handler}
	self42.processorMap["ChargeAccount"] = &memberServiceProcessorChargeAccount{handler: handler}
	self42.processorMap["DiscountAccount"] = &memberServiceProcessorDiscountAccount{handler: handler}
	self42.processorMap["B4EAuth"] = &memberServiceProcessorB4EAuth{handler: handler}
	return self42
}

func (p *MemberServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x43 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x43.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x43

}

type memberServiceProcessorCheckLogin struct {
	handler MemberService
}

func (p *memberServiceProcessorCheckLogin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceCheckLoginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CheckLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceCheckLoginResult{}
	var retval *Result64
	var err2 error
	if retval, err2 = p.handler.CheckLogin(args.User, args.Pwd, args.Update); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CheckLogin: "+err2.Error())
		oprot.WriteMessageBegin("CheckLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CheckLogin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorCheckTradePwd struct {
	handler MemberService
}

func (p *memberServiceProcessorCheckTradePwd) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceCheckTradePwdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CheckTradePwd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceCheckTradePwdResult{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.CheckTradePwd(args.ID, args.TradePwd); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CheckTradePwd: "+err2.Error())
		oprot.WriteMessageBegin("CheckTradePwd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CheckTradePwd", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorLevelList struct {
	handler MemberService
}

func (p *memberServiceProcessorLevelList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceLevelListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("LevelList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceLevelListResult{}
	var retval []*Level
	var err2 error
	if retval, err2 = p.handler.LevelList(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing LevelList: "+err2.Error())
		oprot.WriteMessageBegin("LevelList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("LevelList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorGetTrustInfo struct {
	handler MemberService
}

func (p *memberServiceProcessorGetTrustInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceGetTrustInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetTrustInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceGetTrustInfoResult{}
	var retval *TrustedInfo
	var err2 error
	if retval, err2 = p.handler.GetTrustInfo(args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTrustInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetTrustInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetTrustInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorGetLevel struct {
	handler MemberService
}

func (p *memberServiceProcessorGetLevel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceGetLevelArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetLevel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceGetLevelResult{}
	var retval *Level
	var err2 error
	if retval, err2 = p.handler.GetLevel(args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLevel: "+err2.Error())
		oprot.WriteMessageBegin("GetLevel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetLevel", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorGetMember struct {
	handler MemberService
}

func (p *memberServiceProcessorGetMember) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceGetMemberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceGetMemberResult{}
	var retval *Member
	var err2 error
	if retval, err2 = p.handler.GetMember(args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetMember: "+err2.Error())
		oprot.WriteMessageBegin("GetMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetMember", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorGetMemberByUser struct {
	handler MemberService
}

func (p *memberServiceProcessorGetMemberByUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceGetMemberByUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetMemberByUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceGetMemberByUserResult{}
	var retval *Member
	var err2 error
	if retval, err2 = p.handler.GetMemberByUser(args.User); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetMemberByUser: "+err2.Error())
		oprot.WriteMessageBegin("GetMemberByUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetMemberByUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorGetProfile struct {
	handler MemberService
}

func (p *memberServiceProcessorGetProfile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceGetProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceGetProfileResult{}
	var retval *Profile
	var err2 error
	if retval, err2 = p.handler.GetProfile(args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProfile: "+err2.Error())
		oprot.WriteMessageBegin("GetProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetProfile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorComplex struct {
	handler MemberService
}

func (p *memberServiceProcessorComplex) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceComplexArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Complex", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceComplexResult{}
	var retval *ComplexMember
	var err2 error
	if retval, err2 = p.handler.Complex(args.MemberId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Complex: "+err2.Error())
		oprot.WriteMessageBegin("Complex", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Complex", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorUpdateLevel struct {
	handler MemberService
}

func (p *memberServiceProcessorUpdateLevel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceUpdateLevelArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateLevel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceUpdateLevelResult{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.UpdateLevel(args.MemberId, args.Level, args.Review, args.PaymentOrderId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateLevel: "+err2.Error())
		oprot.WriteMessageBegin("UpdateLevel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateLevel", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorPremium struct {
	handler MemberService
}

func (p *memberServiceProcessorPremium) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServicePremiumArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Premium", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServicePremiumResult{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.Premium(args.MemberId, args.V, args.Expires); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Premium: "+err2.Error())
		oprot.WriteMessageBegin("Premium", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Premium", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorGetToken struct {
	handler MemberService
}

func (p *memberServiceProcessorGetToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceGetTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceGetTokenResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetToken(args.MemberId, args.Reset); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetToken: "+err2.Error())
		oprot.WriteMessageBegin("GetToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorCheckToken struct {
	handler MemberService
}

func (p *memberServiceProcessorCheckToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceCheckTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CheckToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceCheckTokenResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.CheckToken(args.MemberId, args.Token); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CheckToken: "+err2.Error())
		oprot.WriteMessageBegin("CheckToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("CheckToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorRemoveToken struct {
	handler MemberService
}

func (p *memberServiceProcessorRemoveToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceRemoveTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RemoveToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceRemoveTokenResult{}
	var err2 error
	if err2 = p.handler.RemoveToken(args.MemberId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RemoveToken: "+err2.Error())
		oprot.WriteMessageBegin("RemoveToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("RemoveToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorGetAddress struct {
	handler MemberService
}

func (p *memberServiceProcessorGetAddress) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceGetAddressArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAddress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceGetAddressResult{}
	var retval *Address
	var err2 error
	if retval, err2 = p.handler.GetAddress(args.MemberId, args.AddrId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAddress: "+err2.Error())
		oprot.WriteMessageBegin("GetAddress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAddress", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorGetAccount struct {
	handler MemberService
}

func (p *memberServiceProcessorGetAccount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceGetAccountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceGetAccountResult{}
	var retval *Account
	var err2 error
	if retval, err2 = p.handler.GetAccount(args.MemberId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAccount: "+err2.Error())
		oprot.WriteMessageBegin("GetAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAccount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorInviterArray struct {
	handler MemberService
}

func (p *memberServiceProcessorInviterArray) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceInviterArrayArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("InviterArray", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceInviterArrayResult{}
	var retval []int64
	var err2 error
	if retval, err2 = p.handler.InviterArray(args.MemberId, args.Depth); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InviterArray: "+err2.Error())
		oprot.WriteMessageBegin("InviterArray", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("InviterArray", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorGetInviterQuantity struct {
	handler MemberService
}

func (p *memberServiceProcessorGetInviterQuantity) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceGetInviterQuantityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetInviterQuantity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceGetInviterQuantityResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.GetInviterQuantity(args.MemberId, args.Data); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetInviterQuantity: "+err2.Error())
		oprot.WriteMessageBegin("GetInviterQuantity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetInviterQuantity", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorChargeAccount struct {
	handler MemberService
}

func (p *memberServiceProcessorChargeAccount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceChargeAccountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ChargeAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceChargeAccountResult{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.ChargeAccount(args.MemberId, args.Account, args.Kind, args.Title, args.OuterNo, args.Amount, args.RelateUser); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ChargeAccount: "+err2.Error())
		oprot.WriteMessageBegin("ChargeAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ChargeAccount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorDiscountAccount struct {
	handler MemberService
}

func (p *memberServiceProcessorDiscountAccount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceDiscountAccountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DiscountAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceDiscountAccountResult{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.DiscountAccount(args.MemberId, args.Account, args.Title, args.OuterNo, args.Amount, args.RelateUser, args.MustLargeZero); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DiscountAccount: "+err2.Error())
		oprot.WriteMessageBegin("DiscountAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DiscountAccount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorB4EAuth struct {
	handler MemberService
}

func (p *memberServiceProcessorB4EAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceB4EAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("B4EAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberServiceB4EAuthResult{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.B4EAuth(args.MemberId, args.Action, args.Data); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing B4EAuth: "+err2.Error())
		oprot.WriteMessageBegin("B4EAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("B4EAuth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - User
//  - Pwd
//  - Update
type MemberServiceCheckLoginArgs struct {
	User   string `thrift:"user,1" db:"user" json:"user"`
	Pwd    string `thrift:"pwd,2" db:"pwd" json:"pwd"`
	Update bool   `thrift:"update,3" db:"update" json:"update"`
}

func NewMemberServiceCheckLoginArgs() *MemberServiceCheckLoginArgs {
	return &MemberServiceCheckLoginArgs{}
}

func (p *MemberServiceCheckLoginArgs) GetUser() string {
	return p.User
}

func (p *MemberServiceCheckLoginArgs) GetPwd() string {
	return p.Pwd
}

func (p *MemberServiceCheckLoginArgs) GetUpdate() bool {
	return p.Update
}
func (p *MemberServiceCheckLoginArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceCheckLoginArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *MemberServiceCheckLoginArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Pwd = v
	}
	return nil
}

func (p *MemberServiceCheckLoginArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Update = v
	}
	return nil
}

func (p *MemberServiceCheckLoginArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CheckLogin_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceCheckLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err)
	}
	return err
}

func (p *MemberServiceCheckLoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err)
	}
	return err
}

func (p *MemberServiceCheckLoginArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("update", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:update: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Update)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.update (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:update: ", p), err)
	}
	return err
}

func (p *MemberServiceCheckLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceCheckLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceCheckLoginResult struct {
	Success *Result64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceCheckLoginResult() *MemberServiceCheckLoginResult {
	return &MemberServiceCheckLoginResult{}
}

var MemberServiceCheckLoginResult_Success_DEFAULT *Result64

func (p *MemberServiceCheckLoginResult) GetSuccess() *Result64 {
	if !p.IsSetSuccess() {
		return MemberServiceCheckLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MemberServiceCheckLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceCheckLoginResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceCheckLoginResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result64{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MemberServiceCheckLoginResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CheckLogin_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceCheckLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceCheckLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceCheckLoginResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - TradePwd
type MemberServiceCheckTradePwdArgs struct {
	ID       int64  `thrift:"id,1" db:"id" json:"id"`
	TradePwd string `thrift:"tradePwd,2" db:"tradePwd" json:"tradePwd"`
}

func NewMemberServiceCheckTradePwdArgs() *MemberServiceCheckTradePwdArgs {
	return &MemberServiceCheckTradePwdArgs{}
}

func (p *MemberServiceCheckTradePwdArgs) GetID() int64 {
	return p.ID
}

func (p *MemberServiceCheckTradePwdArgs) GetTradePwd() string {
	return p.TradePwd
}
func (p *MemberServiceCheckTradePwdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceCheckTradePwdArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *MemberServiceCheckTradePwdArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TradePwd = v
	}
	return nil
}

func (p *MemberServiceCheckTradePwdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CheckTradePwd_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceCheckTradePwdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *MemberServiceCheckTradePwdArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tradePwd", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tradePwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.TradePwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tradePwd (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tradePwd: ", p), err)
	}
	return err
}

func (p *MemberServiceCheckTradePwdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceCheckTradePwdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceCheckTradePwdResult struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceCheckTradePwdResult() *MemberServiceCheckTradePwdResult {
	return &MemberServiceCheckTradePwdResult{}
}

var MemberServiceCheckTradePwdResult_Success_DEFAULT *Result_

func (p *MemberServiceCheckTradePwdResult) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return MemberServiceCheckTradePwdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MemberServiceCheckTradePwdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceCheckTradePwdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceCheckTradePwdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MemberServiceCheckTradePwdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CheckTradePwd_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceCheckTradePwdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceCheckTradePwdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceCheckTradePwdResult(%+v)", *p)
}

type MemberServiceLevelListArgs struct {
}

func NewMemberServiceLevelListArgs() *MemberServiceLevelListArgs {
	return &MemberServiceLevelListArgs{}
}

func (p *MemberServiceLevelListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceLevelListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LevelList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceLevelListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceLevelListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceLevelListResult struct {
	Success []*Level `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceLevelListResult() *MemberServiceLevelListResult {
	return &MemberServiceLevelListResult{}
}

var MemberServiceLevelListResult_Success_DEFAULT []*Level

func (p *MemberServiceLevelListResult) GetSuccess() []*Level {
	return p.Success
}
func (p *MemberServiceLevelListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceLevelListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceLevelListResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Level, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem44 := &Level{}
		if err := _elem44.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem44), err)
		}
		p.Success = append(p.Success, _elem44)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MemberServiceLevelListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LevelList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceLevelListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceLevelListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceLevelListResult(%+v)", *p)
}

// Attributes:
//  - ID
type MemberServiceGetTrustInfoArgs struct {
	ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewMemberServiceGetTrustInfoArgs() *MemberServiceGetTrustInfoArgs {
	return &MemberServiceGetTrustInfoArgs{}
}

func (p *MemberServiceGetTrustInfoArgs) GetID() int64 {
	return p.ID
}
func (p *MemberServiceGetTrustInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetTrustInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *MemberServiceGetTrustInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTrustInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetTrustInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *MemberServiceGetTrustInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetTrustInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetTrustInfoResult struct {
	Success *TrustedInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetTrustInfoResult() *MemberServiceGetTrustInfoResult {
	return &MemberServiceGetTrustInfoResult{}
}

var MemberServiceGetTrustInfoResult_Success_DEFAULT *TrustedInfo

func (p *MemberServiceGetTrustInfoResult) GetSuccess() *TrustedInfo {
	if !p.IsSetSuccess() {
		return MemberServiceGetTrustInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MemberServiceGetTrustInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceGetTrustInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetTrustInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TrustedInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MemberServiceGetTrustInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTrustInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetTrustInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceGetTrustInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetTrustInfoResult(%+v)", *p)
}

// Attributes:
//  - ID
type MemberServiceGetLevelArgs struct {
	ID int32 `thrift:"id,1" db:"id" json:"id"`
}

func NewMemberServiceGetLevelArgs() *MemberServiceGetLevelArgs {
	return &MemberServiceGetLevelArgs{}
}

func (p *MemberServiceGetLevelArgs) GetID() int32 {
	return p.ID
}
func (p *MemberServiceGetLevelArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetLevelArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *MemberServiceGetLevelArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetLevel_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetLevelArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *MemberServiceGetLevelArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetLevelArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetLevelResult struct {
	Success *Level `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetLevelResult() *MemberServiceGetLevelResult {
	return &MemberServiceGetLevelResult{}
}

var MemberServiceGetLevelResult_Success_DEFAULT *Level

func (p *MemberServiceGetLevelResult) GetSuccess() *Level {
	if !p.IsSetSuccess() {
		return MemberServiceGetLevelResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MemberServiceGetLevelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceGetLevelResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetLevelResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Level{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MemberServiceGetLevelResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetLevel_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetLevelResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceGetLevelResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetLevelResult(%+v)", *p)
}

// Attributes:
//  - ID
type MemberServiceGetMemberArgs struct {
	ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewMemberServiceGetMemberArgs() *MemberServiceGetMemberArgs {
	return &MemberServiceGetMemberArgs{}
}

func (p *MemberServiceGetMemberArgs) GetID() int64 {
	return p.ID
}
func (p *MemberServiceGetMemberArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetMemberArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *MemberServiceGetMemberArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetMember_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *MemberServiceGetMemberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetMemberArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetMemberResult struct {
	Success *Member `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetMemberResult() *MemberServiceGetMemberResult {
	return &MemberServiceGetMemberResult{}
}

var MemberServiceGetMemberResult_Success_DEFAULT *Member

func (p *MemberServiceGetMemberResult) GetSuccess() *Member {
	if !p.IsSetSuccess() {
		return MemberServiceGetMemberResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MemberServiceGetMemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceGetMemberResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetMemberResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Member{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MemberServiceGetMemberResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetMember_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceGetMemberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetMemberResult(%+v)", *p)
}

// Attributes:
//  - User
type MemberServiceGetMemberByUserArgs struct {
	User string `thrift:"user,1" db:"user" json:"user"`
}

func NewMemberServiceGetMemberByUserArgs() *MemberServiceGetMemberByUserArgs {
	return &MemberServiceGetMemberByUserArgs{}
}

func (p *MemberServiceGetMemberByUserArgs) GetUser() string {
	return p.User
}
func (p *MemberServiceGetMemberByUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetMemberByUserArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *MemberServiceGetMemberByUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetMemberByUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetMemberByUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err)
	}
	return err
}

func (p *MemberServiceGetMemberByUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetMemberByUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetMemberByUserResult struct {
	Success *Member `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetMemberByUserResult() *MemberServiceGetMemberByUserResult {
	return &MemberServiceGetMemberByUserResult{}
}

var MemberServiceGetMemberByUserResult_Success_DEFAULT *Member

func (p *MemberServiceGetMemberByUserResult) GetSuccess() *Member {
	if !p.IsSetSuccess() {
		return MemberServiceGetMemberByUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MemberServiceGetMemberByUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceGetMemberByUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetMemberByUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Member{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MemberServiceGetMemberByUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetMemberByUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetMemberByUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceGetMemberByUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetMemberByUserResult(%+v)", *p)
}

// Attributes:
//  - ID
type MemberServiceGetProfileArgs struct {
	ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewMemberServiceGetProfileArgs() *MemberServiceGetProfileArgs {
	return &MemberServiceGetProfileArgs{}
}

func (p *MemberServiceGetProfileArgs) GetID() int64 {
	return p.ID
}
func (p *MemberServiceGetProfileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetProfileArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *MemberServiceGetProfileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProfile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *MemberServiceGetProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetProfileResult struct {
	Success *Profile `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetProfileResult() *MemberServiceGetProfileResult {
	return &MemberServiceGetProfileResult{}
}

var MemberServiceGetProfileResult_Success_DEFAULT *Profile

func (p *MemberServiceGetProfileResult) GetSuccess() *Profile {
	if !p.IsSetSuccess() {
		return MemberServiceGetProfileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MemberServiceGetProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceGetProfileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetProfileResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Profile{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MemberServiceGetProfileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProfile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceGetProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetProfileResult(%+v)", *p)
}

// Attributes:
//  - MemberId
type MemberServiceComplexArgs struct {
	MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
}

func NewMemberServiceComplexArgs() *MemberServiceComplexArgs {
	return &MemberServiceComplexArgs{}
}

func (p *MemberServiceComplexArgs) GetMemberId() int64 {
	return p.MemberId
}
func (p *MemberServiceComplexArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceComplexArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *MemberServiceComplexArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Complex_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceComplexArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err)
	}
	return err
}

func (p *MemberServiceComplexArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceComplexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceComplexResult struct {
	Success *ComplexMember `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceComplexResult() *MemberServiceComplexResult {
	return &MemberServiceComplexResult{}
}

var MemberServiceComplexResult_Success_DEFAULT *ComplexMember

func (p *MemberServiceComplexResult) GetSuccess() *ComplexMember {
	if !p.IsSetSuccess() {
		return MemberServiceComplexResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MemberServiceComplexResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceComplexResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceComplexResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ComplexMember{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MemberServiceComplexResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Complex_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceComplexResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceComplexResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceComplexResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Level
//  - Review
//  - PaymentOrderId
type MemberServiceUpdateLevelArgs struct {
	MemberId       int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
	Level          int32 `thrift:"level,2" db:"level" json:"level"`
	Review         bool  `thrift:"review,3" db:"review" json:"review"`
	PaymentOrderId int64 `thrift:"paymentOrderId,4" db:"paymentOrderId" json:"paymentOrderId"`
}

func NewMemberServiceUpdateLevelArgs() *MemberServiceUpdateLevelArgs {
	return &MemberServiceUpdateLevelArgs{}
}

func (p *MemberServiceUpdateLevelArgs) GetMemberId() int64 {
	return p.MemberId
}

func (p *MemberServiceUpdateLevelArgs) GetLevel() int32 {
	return p.Level
}

func (p *MemberServiceUpdateLevelArgs) GetReview() bool {
	return p.Review
}

func (p *MemberServiceUpdateLevelArgs) GetPaymentOrderId() int64 {
	return p.PaymentOrderId
}
func (p *MemberServiceUpdateLevelArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceUpdateLevelArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *MemberServiceUpdateLevelArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Level = v
	}
	return nil
}

func (p *MemberServiceUpdateLevelArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Review = v
	}
	return nil
}

func (p *MemberServiceUpdateLevelArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PaymentOrderId = v
	}
	return nil
}

func (p *MemberServiceUpdateLevelArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateLevel_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceUpdateLevelArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err)
	}
	return err
}

func (p *MemberServiceUpdateLevelArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("level", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:level: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Level)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.level (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:level: ", p), err)
	}
	return err
}

func (p *MemberServiceUpdateLevelArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("review", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:review: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Review)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.review (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:review: ", p), err)
	}
	return err
}

func (p *MemberServiceUpdateLevelArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paymentOrderId", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:paymentOrderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PaymentOrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.paymentOrderId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:paymentOrderId: ", p), err)
	}
	return err
}

func (p *MemberServiceUpdateLevelArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceUpdateLevelArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceUpdateLevelResult struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceUpdateLevelResult() *MemberServiceUpdateLevelResult {
	return &MemberServiceUpdateLevelResult{}
}

var MemberServiceUpdateLevelResult_Success_DEFAULT *Result_

func (p *MemberServiceUpdateLevelResult) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return MemberServiceUpdateLevelResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MemberServiceUpdateLevelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceUpdateLevelResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceUpdateLevelResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MemberServiceUpdateLevelResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateLevel_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceUpdateLevelResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceUpdateLevelResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceUpdateLevelResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - V
//  - Expires
type MemberServicePremiumArgs struct {
	MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
	V        int32 `thrift:"v,2" db:"v" json:"v"`
	Expires  int64 `thrift:"expires,3" db:"expires" json:"expires"`
}

func NewMemberServicePremiumArgs() *MemberServicePremiumArgs {
	return &MemberServicePremiumArgs{}
}

func (p *MemberServicePremiumArgs) GetMemberId() int64 {
	return p.MemberId
}

func (p *MemberServicePremiumArgs) GetV() int32 {
	return p.V
}

func (p *MemberServicePremiumArgs) GetExpires() int64 {
	return p.Expires
}
func (p *MemberServicePremiumArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServicePremiumArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *MemberServicePremiumArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.V = v
	}
	return nil
}

func (p *MemberServicePremiumArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Expires = v
	}
	return nil
}

func (p *MemberServicePremiumArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Premium_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServicePremiumArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err)
	}
	return err
}

func (p *MemberServicePremiumArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("v", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:v: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.V)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:v: ", p), err)
	}
	return err
}

func (p *MemberServicePremiumArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expires", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expires: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Expires)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expires (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expires: ", p), err)
	}
	return err
}

func (p *MemberServicePremiumArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServicePremiumArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServicePremiumResult struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServicePremiumResult() *MemberServicePremiumResult {
	return &MemberServicePremiumResult{}
}

var MemberServicePremiumResult_Success_DEFAULT *Result_

func (p *MemberServicePremiumResult) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return MemberServicePremiumResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MemberServicePremiumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServicePremiumResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServicePremiumResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MemberServicePremiumResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Premium_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServicePremiumResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServicePremiumResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServicePremiumResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Reset
type MemberServiceGetTokenArgs struct {
	MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
	Reset    bool  `thrift:"reset,2" db:"reset" json:"reset"`
}

func NewMemberServiceGetTokenArgs() *MemberServiceGetTokenArgs {
	return &MemberServiceGetTokenArgs{}
}

func (p *MemberServiceGetTokenArgs) GetMemberId() int64 {
	return p.MemberId
}

func (p *MemberServiceGetTokenArgs) GetReset() bool {
	return p.Reset
}
func (p *MemberServiceGetTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *MemberServiceGetTokenArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Reset = v
	}
	return nil
}

func (p *MemberServiceGetTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err)
	}
	return err
}

func (p *MemberServiceGetTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reset", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reset: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Reset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reset (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reset: ", p), err)
	}
	return err
}

func (p *MemberServiceGetTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetTokenResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetTokenResult() *MemberServiceGetTokenResult {
	return &MemberServiceGetTokenResult{}
}

var MemberServiceGetTokenResult_Success_DEFAULT string

func (p *MemberServiceGetTokenResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return MemberServiceGetTokenResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *MemberServiceGetTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceGetTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetTokenResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MemberServiceGetTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceGetTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetTokenResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Token
type MemberServiceCheckTokenArgs struct {
	MemberId int64  `thrift:"memberId,1" db:"memberId" json:"memberId"`
	Token    string `thrift:"token,2" db:"token" json:"token"`
}

func NewMemberServiceCheckTokenArgs() *MemberServiceCheckTokenArgs {
	return &MemberServiceCheckTokenArgs{}
}

func (p *MemberServiceCheckTokenArgs) GetMemberId() int64 {
	return p.MemberId
}

func (p *MemberServiceCheckTokenArgs) GetToken() string {
	return p.Token
}
func (p *MemberServiceCheckTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceCheckTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *MemberServiceCheckTokenArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *MemberServiceCheckTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CheckToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceCheckTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err)
	}
	return err
}

func (p *MemberServiceCheckTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err)
	}
	return err
}

func (p *MemberServiceCheckTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceCheckTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceCheckTokenResult struct {
	Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceCheckTokenResult() *MemberServiceCheckTokenResult {
	return &MemberServiceCheckTokenResult{}
}

var MemberServiceCheckTokenResult_Success_DEFAULT bool

func (p *MemberServiceCheckTokenResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return MemberServiceCheckTokenResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *MemberServiceCheckTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceCheckTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceCheckTokenResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MemberServiceCheckTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CheckToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceCheckTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceCheckTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceCheckTokenResult(%+v)", *p)
}

// Attributes:
//  - MemberId
type MemberServiceRemoveTokenArgs struct {
	MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
}

func NewMemberServiceRemoveTokenArgs() *MemberServiceRemoveTokenArgs {
	return &MemberServiceRemoveTokenArgs{}
}

func (p *MemberServiceRemoveTokenArgs) GetMemberId() int64 {
	return p.MemberId
}
func (p *MemberServiceRemoveTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceRemoveTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *MemberServiceRemoveTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RemoveToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceRemoveTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err)
	}
	return err
}

func (p *MemberServiceRemoveTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceRemoveTokenArgs(%+v)", *p)
}

type MemberServiceRemoveTokenResult struct {
}

func NewMemberServiceRemoveTokenResult() *MemberServiceRemoveTokenResult {
	return &MemberServiceRemoveTokenResult{}
}

func (p *MemberServiceRemoveTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceRemoveTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RemoveToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceRemoveTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceRemoveTokenResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - AddrId
type MemberServiceGetAddressArgs struct {
	MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
	AddrId   int64 `thrift:"addrId,2" db:"addrId" json:"addrId"`
}

func NewMemberServiceGetAddressArgs() *MemberServiceGetAddressArgs {
	return &MemberServiceGetAddressArgs{}
}

func (p *MemberServiceGetAddressArgs) GetMemberId() int64 {
	return p.MemberId
}

func (p *MemberServiceGetAddressArgs) GetAddrId() int64 {
	return p.AddrId
}
func (p *MemberServiceGetAddressArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetAddressArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *MemberServiceGetAddressArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AddrId = v
	}
	return nil
}

func (p *MemberServiceGetAddressArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAddress_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetAddressArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err)
	}
	return err
}

func (p *MemberServiceGetAddressArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addrId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:addrId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AddrId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addrId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:addrId: ", p), err)
	}
	return err
}

func (p *MemberServiceGetAddressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetAddressArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetAddressResult struct {
	Success *Address `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetAddressResult() *MemberServiceGetAddressResult {
	return &MemberServiceGetAddressResult{}
}

var MemberServiceGetAddressResult_Success_DEFAULT *Address

func (p *MemberServiceGetAddressResult) GetSuccess() *Address {
	if !p.IsSetSuccess() {
		return MemberServiceGetAddressResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MemberServiceGetAddressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceGetAddressResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetAddressResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Address{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MemberServiceGetAddressResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAddress_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetAddressResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceGetAddressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetAddressResult(%+v)", *p)
}

// Attributes:
//  - MemberId
type MemberServiceGetAccountArgs struct {
	MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
}

func NewMemberServiceGetAccountArgs() *MemberServiceGetAccountArgs {
	return &MemberServiceGetAccountArgs{}
}

func (p *MemberServiceGetAccountArgs) GetMemberId() int64 {
	return p.MemberId
}
func (p *MemberServiceGetAccountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetAccountArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *MemberServiceGetAccountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAccount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err)
	}
	return err
}

func (p *MemberServiceGetAccountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetAccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetAccountResult struct {
	Success *Account `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetAccountResult() *MemberServiceGetAccountResult {
	return &MemberServiceGetAccountResult{}
}

var MemberServiceGetAccountResult_Success_DEFAULT *Account

func (p *MemberServiceGetAccountResult) GetSuccess() *Account {
	if !p.IsSetSuccess() {
		return MemberServiceGetAccountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MemberServiceGetAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceGetAccountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetAccountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Account{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MemberServiceGetAccountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAccount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceGetAccountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetAccountResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Depth
type MemberServiceInviterArrayArgs struct {
	MemberId int64 `thrift:"memberId,1" db:"memberId" json:"memberId"`
	Depth    int32 `thrift:"depth,2" db:"depth" json:"depth"`
}

func NewMemberServiceInviterArrayArgs() *MemberServiceInviterArrayArgs {
	return &MemberServiceInviterArrayArgs{}
}

func (p *MemberServiceInviterArrayArgs) GetMemberId() int64 {
	return p.MemberId
}

func (p *MemberServiceInviterArrayArgs) GetDepth() int32 {
	return p.Depth
}
func (p *MemberServiceInviterArrayArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceInviterArrayArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *MemberServiceInviterArrayArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Depth = v
	}
	return nil
}

func (p *MemberServiceInviterArrayArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InviterArray_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceInviterArrayArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err)
	}
	return err
}

func (p *MemberServiceInviterArrayArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("depth", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:depth: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Depth)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.depth (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:depth: ", p), err)
	}
	return err
}

func (p *MemberServiceInviterArrayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceInviterArrayArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceInviterArrayResult struct {
	Success []int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceInviterArrayResult() *MemberServiceInviterArrayResult {
	return &MemberServiceInviterArrayResult{}
}

var MemberServiceInviterArrayResult_Success_DEFAULT []int64

func (p *MemberServiceInviterArrayResult) GetSuccess() []int64 {
	return p.Success
}
func (p *MemberServiceInviterArrayResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceInviterArrayResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceInviterArrayResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem45 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem45 = v
		}
		p.Success = append(p.Success, _elem45)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MemberServiceInviterArrayResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InviterArray_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceInviterArrayResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceInviterArrayResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceInviterArrayResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Data
type MemberServiceGetInviterQuantityArgs struct {
	MemberId int64             `thrift:"memberId,1" db:"memberId" json:"memberId"`
	Data     map[string]string `thrift:"data,2" db:"data" json:"data"`
}

func NewMemberServiceGetInviterQuantityArgs() *MemberServiceGetInviterQuantityArgs {
	return &MemberServiceGetInviterQuantityArgs{}
}

func (p *MemberServiceGetInviterQuantityArgs) GetMemberId() int64 {
	return p.MemberId
}

func (p *MemberServiceGetInviterQuantityArgs) GetData() map[string]string {
	return p.Data
}
func (p *MemberServiceGetInviterQuantityArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetInviterQuantityArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *MemberServiceGetInviterQuantityArgs) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Data = tMap
	for i := 0; i < size; i++ {
		var _key46 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key46 = v
		}
		var _val47 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val47 = v
		}
		p.Data[_key46] = _val47
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *MemberServiceGetInviterQuantityArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetInviterQuantity_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetInviterQuantityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err)
	}
	return err
}

func (p *MemberServiceGetInviterQuantityArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Data {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err)
	}
	return err
}

func (p *MemberServiceGetInviterQuantityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetInviterQuantityArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetInviterQuantityResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetInviterQuantityResult() *MemberServiceGetInviterQuantityResult {
	return &MemberServiceGetInviterQuantityResult{}
}

var MemberServiceGetInviterQuantityResult_Success_DEFAULT int32

func (p *MemberServiceGetInviterQuantityResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return MemberServiceGetInviterQuantityResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *MemberServiceGetInviterQuantityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceGetInviterQuantityResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceGetInviterQuantityResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MemberServiceGetInviterQuantityResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetInviterQuantity_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceGetInviterQuantityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceGetInviterQuantityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetInviterQuantityResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Account
//  - Kind
//  - Title
//  - OuterNo
//  - Amount
//  - RelateUser
type MemberServiceChargeAccountArgs struct {
	MemberId   int64   `thrift:"memberId,1" db:"memberId" json:"memberId"`
	Account    int32   `thrift:"account,2" db:"account" json:"account"`
	Kind       int32   `thrift:"kind,3" db:"kind" json:"kind"`
	Title      string  `thrift:"title,4" db:"title" json:"title"`
	OuterNo    string  `thrift:"outerNo,5" db:"outerNo" json:"outerNo"`
	Amount     float64 `thrift:"amount,6" db:"amount" json:"amount"`
	RelateUser int64   `thrift:"relateUser,7" db:"relateUser" json:"relateUser"`
}

func NewMemberServiceChargeAccountArgs() *MemberServiceChargeAccountArgs {
	return &MemberServiceChargeAccountArgs{}
}

func (p *MemberServiceChargeAccountArgs) GetMemberId() int64 {
	return p.MemberId
}

func (p *MemberServiceChargeAccountArgs) GetAccount() int32 {
	return p.Account
}

func (p *MemberServiceChargeAccountArgs) GetKind() int32 {
	return p.Kind
}

func (p *MemberServiceChargeAccountArgs) GetTitle() string {
	return p.Title
}

func (p *MemberServiceChargeAccountArgs) GetOuterNo() string {
	return p.OuterNo
}

func (p *MemberServiceChargeAccountArgs) GetAmount() float64 {
	return p.Amount
}

func (p *MemberServiceChargeAccountArgs) GetRelateUser() int64 {
	return p.RelateUser
}
func (p *MemberServiceChargeAccountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceChargeAccountArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *MemberServiceChargeAccountArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Account = v
	}
	return nil
}

func (p *MemberServiceChargeAccountArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Kind = v
	}
	return nil
}

func (p *MemberServiceChargeAccountArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *MemberServiceChargeAccountArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.OuterNo = v
	}
	return nil
}

func (p *MemberServiceChargeAccountArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *MemberServiceChargeAccountArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.RelateUser = v
	}
	return nil
}

func (p *MemberServiceChargeAccountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChargeAccount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceChargeAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err)
	}
	return err
}

func (p *MemberServiceChargeAccountArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("account", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:account: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Account)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.account (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:account: ", p), err)
	}
	return err
}

func (p *MemberServiceChargeAccountArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("kind", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:kind: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Kind)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.kind (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:kind: ", p), err)
	}
	return err
}

func (p *MemberServiceChargeAccountArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:title: ", p), err)
	}
	return err
}

func (p *MemberServiceChargeAccountArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("outerNo", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:outerNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.OuterNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.outerNo (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:outerNo: ", p), err)
	}
	return err
}

func (p *MemberServiceChargeAccountArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.DOUBLE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:amount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:amount: ", p), err)
	}
	return err
}

func (p *MemberServiceChargeAccountArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("relateUser", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:relateUser: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RelateUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.relateUser (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:relateUser: ", p), err)
	}
	return err
}

func (p *MemberServiceChargeAccountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceChargeAccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceChargeAccountResult struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceChargeAccountResult() *MemberServiceChargeAccountResult {
	return &MemberServiceChargeAccountResult{}
}

var MemberServiceChargeAccountResult_Success_DEFAULT *Result_

func (p *MemberServiceChargeAccountResult) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return MemberServiceChargeAccountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MemberServiceChargeAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceChargeAccountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceChargeAccountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MemberServiceChargeAccountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChargeAccount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceChargeAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceChargeAccountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceChargeAccountResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Account
//  - Title
//  - OuterNo
//  - Amount
//  - RelateUser
//  - MustLargeZero
type MemberServiceDiscountAccountArgs struct {
	MemberId      int64   `thrift:"memberId,1" db:"memberId" json:"memberId"`
	Account       int32   `thrift:"account,2" db:"account" json:"account"`
	Title         string  `thrift:"title,3" db:"title" json:"title"`
	OuterNo       string  `thrift:"outerNo,4" db:"outerNo" json:"outerNo"`
	Amount        float64 `thrift:"amount,5" db:"amount" json:"amount"`
	RelateUser    int64   `thrift:"relateUser,6" db:"relateUser" json:"relateUser"`
	MustLargeZero bool    `thrift:"mustLargeZero,7" db:"mustLargeZero" json:"mustLargeZero"`
}

func NewMemberServiceDiscountAccountArgs() *MemberServiceDiscountAccountArgs {
	return &MemberServiceDiscountAccountArgs{}
}

func (p *MemberServiceDiscountAccountArgs) GetMemberId() int64 {
	return p.MemberId
}

func (p *MemberServiceDiscountAccountArgs) GetAccount() int32 {
	return p.Account
}

func (p *MemberServiceDiscountAccountArgs) GetTitle() string {
	return p.Title
}

func (p *MemberServiceDiscountAccountArgs) GetOuterNo() string {
	return p.OuterNo
}

func (p *MemberServiceDiscountAccountArgs) GetAmount() float64 {
	return p.Amount
}

func (p *MemberServiceDiscountAccountArgs) GetRelateUser() int64 {
	return p.RelateUser
}

func (p *MemberServiceDiscountAccountArgs) GetMustLargeZero() bool {
	return p.MustLargeZero
}
func (p *MemberServiceDiscountAccountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceDiscountAccountArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *MemberServiceDiscountAccountArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Account = v
	}
	return nil
}

func (p *MemberServiceDiscountAccountArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *MemberServiceDiscountAccountArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.OuterNo = v
	}
	return nil
}

func (p *MemberServiceDiscountAccountArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *MemberServiceDiscountAccountArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.RelateUser = v
	}
	return nil
}

func (p *MemberServiceDiscountAccountArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.MustLargeZero = v
	}
	return nil
}

func (p *MemberServiceDiscountAccountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DiscountAccount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceDiscountAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err)
	}
	return err
}

func (p *MemberServiceDiscountAccountArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("account", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:account: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Account)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.account (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:account: ", p), err)
	}
	return err
}

func (p *MemberServiceDiscountAccountArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err)
	}
	return err
}

func (p *MemberServiceDiscountAccountArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("outerNo", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:outerNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.OuterNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.outerNo (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:outerNo: ", p), err)
	}
	return err
}

func (p *MemberServiceDiscountAccountArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.DOUBLE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:amount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:amount: ", p), err)
	}
	return err
}

func (p *MemberServiceDiscountAccountArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("relateUser", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:relateUser: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RelateUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.relateUser (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:relateUser: ", p), err)
	}
	return err
}

func (p *MemberServiceDiscountAccountArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mustLargeZero", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:mustLargeZero: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.MustLargeZero)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mustLargeZero (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:mustLargeZero: ", p), err)
	}
	return err
}

func (p *MemberServiceDiscountAccountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceDiscountAccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceDiscountAccountResult struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceDiscountAccountResult() *MemberServiceDiscountAccountResult {
	return &MemberServiceDiscountAccountResult{}
}

var MemberServiceDiscountAccountResult_Success_DEFAULT *Result_

func (p *MemberServiceDiscountAccountResult) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return MemberServiceDiscountAccountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MemberServiceDiscountAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceDiscountAccountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceDiscountAccountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MemberServiceDiscountAccountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DiscountAccount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceDiscountAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceDiscountAccountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceDiscountAccountResult(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Action
//  - Data
type MemberServiceB4EAuthArgs struct {
	MemberId int64             `thrift:"memberId,1" db:"memberId" json:"memberId"`
	Action   string            `thrift:"action,2" db:"action" json:"action"`
	Data     map[string]string `thrift:"data,3" db:"data" json:"data"`
}

func NewMemberServiceB4EAuthArgs() *MemberServiceB4EAuthArgs {
	return &MemberServiceB4EAuthArgs{}
}

func (p *MemberServiceB4EAuthArgs) GetMemberId() int64 {
	return p.MemberId
}

func (p *MemberServiceB4EAuthArgs) GetAction() string {
	return p.Action
}

func (p *MemberServiceB4EAuthArgs) GetData() map[string]string {
	return p.Data
}
func (p *MemberServiceB4EAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceB4EAuthArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *MemberServiceB4EAuthArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Action = v
	}
	return nil
}

func (p *MemberServiceB4EAuthArgs) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Data = tMap
	for i := 0; i < size; i++ {
		var _key48 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key48 = v
		}
		var _val49 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val49 = v
		}
		p.Data[_key48] = _val49
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *MemberServiceB4EAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("B4EAuth_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceB4EAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err)
	}
	return err
}

func (p *MemberServiceB4EAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("action", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:action: ", p), err)
	}
	if err := oprot.WriteString(string(p.Action)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.action (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:action: ", p), err)
	}
	return err
}

func (p *MemberServiceB4EAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Data {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err)
	}
	return err
}

func (p *MemberServiceB4EAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceB4EAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceB4EAuthResult struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceB4EAuthResult() *MemberServiceB4EAuthResult {
	return &MemberServiceB4EAuthResult{}
}

var MemberServiceB4EAuthResult_Success_DEFAULT *Result_

func (p *MemberServiceB4EAuthResult) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return MemberServiceB4EAuthResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MemberServiceB4EAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceB4EAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberServiceB4EAuthResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MemberServiceB4EAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("B4EAuth_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberServiceB4EAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberServiceB4EAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceB4EAuthResult(%+v)", *p)
}

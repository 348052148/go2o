// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package define

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - ID
//  - VendorId
//  - ShopType
//  - Name
//  - State
//  - OpeningState
//  - Data
type Shop struct {
	ID           int32             `thrift:"ID,1" db:"ID" json:"ID"`
	VendorId     int32             `thrift:"VendorId,2" db:"VendorId" json:"VendorId"`
	ShopType     int32             `thrift:"ShopType,3" db:"ShopType" json:"ShopType"`
	Name         string            `thrift:"Name,4" db:"Name" json:"Name"`
	State        int32             `thrift:"State,5" db:"State" json:"State"`
	OpeningState int32             `thrift:"OpeningState,6" db:"OpeningState" json:"OpeningState"`
	Data         map[string]string `thrift:"Data,7" db:"Data" json:"Data"`
}

func NewShop() *Shop {
	return &Shop{}
}

func (p *Shop) GetID() int32 {
	return p.ID
}

func (p *Shop) GetVendorId() int32 {
	return p.VendorId
}

func (p *Shop) GetShopType() int32 {
	return p.ShopType
}

func (p *Shop) GetName() string {
	return p.Name
}

func (p *Shop) GetState() int32 {
	return p.State
}

func (p *Shop) GetOpeningState() int32 {
	return p.OpeningState
}

func (p *Shop) GetData() map[string]string {
	return p.Data
}
func (p *Shop) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Shop) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Shop) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.VendorId = v
	}
	return nil
}

func (p *Shop) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ShopType = v
	}
	return nil
}

func (p *Shop) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Shop) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *Shop) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.OpeningState = v
	}
	return nil
}

func (p *Shop) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Data = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val1 = v
		}
		p.Data[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Shop) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Shop"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Shop) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Shop) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VendorId", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:VendorId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VendorId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.VendorId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:VendorId: ", p), err)
	}
	return err
}

func (p *Shop) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ShopType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ShopType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ShopType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ShopType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ShopType: ", p), err)
	}
	return err
}

func (p *Shop) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Name: ", p), err)
	}
	return err
}

func (p *Shop) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("State", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:State: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.State (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:State: ", p), err)
	}
	return err
}

func (p *Shop) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OpeningState", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:OpeningState: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OpeningState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OpeningState (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:OpeningState: ", p), err)
	}
	return err
}

func (p *Shop) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Data", thrift.MAP, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Data {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Data: ", p), err)
	}
	return err
}

func (p *Shop) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Shop(%+v)", *p)
}

// Attributes:
//  - ID
//  - VendorId
//  - Name
//  - Alias
//  - Host
//  - Logo
//  - State
//  - OpeningState
//  - StorePhone
//  - StoreTitle
//  - StoreNotice
type Store struct {
	ID           int32  `thrift:"ID,1" db:"ID" json:"ID"`
	VendorId     int32  `thrift:"VendorId,2" db:"VendorId" json:"VendorId"`
	Name         string `thrift:"Name,3" db:"Name" json:"Name"`
	Alias        string `thrift:"Alias,4" db:"Alias" json:"Alias"`
	Host         string `thrift:"Host,5" db:"Host" json:"Host"`
	Logo         string `thrift:"Logo,6" db:"Logo" json:"Logo"`
	State        int32  `thrift:"State,7" db:"State" json:"State"`
	OpeningState int32  `thrift:"OpeningState,8" db:"OpeningState" json:"OpeningState"`
	StorePhone   string `thrift:"StorePhone,9" db:"StorePhone" json:"StorePhone"`
	StoreTitle   string `thrift:"StoreTitle,10" db:"StoreTitle" json:"StoreTitle"`
	StoreNotice  string `thrift:"StoreNotice,11" db:"StoreNotice" json:"StoreNotice"`
}

func NewStore() *Store {
	return &Store{}
}

func (p *Store) GetID() int32 {
	return p.ID
}

func (p *Store) GetVendorId() int32 {
	return p.VendorId
}

func (p *Store) GetName() string {
	return p.Name
}

func (p *Store) GetAlias() string {
	return p.Alias
}

func (p *Store) GetHost() string {
	return p.Host
}

func (p *Store) GetLogo() string {
	return p.Logo
}

func (p *Store) GetState() int32 {
	return p.State
}

func (p *Store) GetOpeningState() int32 {
	return p.OpeningState
}

func (p *Store) GetStorePhone() string {
	return p.StorePhone
}

func (p *Store) GetStoreTitle() string {
	return p.StoreTitle
}

func (p *Store) GetStoreNotice() string {
	return p.StoreNotice
}
func (p *Store) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Store) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Store) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.VendorId = v
	}
	return nil
}

func (p *Store) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Store) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Alias = v
	}
	return nil
}

func (p *Store) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Host = v
	}
	return nil
}

func (p *Store) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Logo = v
	}
	return nil
}

func (p *Store) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *Store) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.OpeningState = v
	}
	return nil
}

func (p *Store) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.StorePhone = v
	}
	return nil
}

func (p *Store) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.StoreTitle = v
	}
	return nil
}

func (p *Store) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.StoreNotice = v
	}
	return nil
}

func (p *Store) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Store"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Store) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Store) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VendorId", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:VendorId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VendorId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.VendorId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:VendorId: ", p), err)
	}
	return err
}

func (p *Store) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Name: ", p), err)
	}
	return err
}

func (p *Store) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Alias", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Alias: ", p), err)
	}
	if err := oprot.WriteString(string(p.Alias)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Alias (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Alias: ", p), err)
	}
	return err
}

func (p *Store) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Host", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Host: ", p), err)
	}
	if err := oprot.WriteString(string(p.Host)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Host (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Host: ", p), err)
	}
	return err
}

func (p *Store) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Logo", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Logo: ", p), err)
	}
	if err := oprot.WriteString(string(p.Logo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Logo (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Logo: ", p), err)
	}
	return err
}

func (p *Store) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("State", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:State: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.State (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:State: ", p), err)
	}
	return err
}

func (p *Store) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OpeningState", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:OpeningState: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OpeningState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OpeningState (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:OpeningState: ", p), err)
	}
	return err
}

func (p *Store) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("StorePhone", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:StorePhone: ", p), err)
	}
	if err := oprot.WriteString(string(p.StorePhone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.StorePhone (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:StorePhone: ", p), err)
	}
	return err
}

func (p *Store) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("StoreTitle", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:StoreTitle: ", p), err)
	}
	if err := oprot.WriteString(string(p.StoreTitle)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.StoreTitle (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:StoreTitle: ", p), err)
	}
	return err
}

func (p *Store) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("StoreNotice", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:StoreNotice: ", p), err)
	}
	if err := oprot.WriteString(string(p.StoreNotice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.StoreNotice (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:StoreNotice: ", p), err)
	}
	return err
}

func (p *Store) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Store(%+v)", *p)
}

type ShopService interface {
	// Parameters:
	//  - VenderId
	GetStore(venderId int32) (r *Store, err error)
	// Parameters:
	//  - ShopId
	GetStoreById(shopId int32) (r *Store, err error)
	// Parameters:
	//  - ShopId
	//  - On
	//  - Reason
	TurnShop(shopId int32, on bool, reason string) (r *Result_, err error)
	// Parameters:
	//  - ShopId
	//  - Opening
	//  - Reason
	OpenShop(shopId int32, opening bool, reason string) (r *Result_, err error)
}

type ShopServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewShopServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ShopServiceClient {
	return &ShopServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewShopServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ShopServiceClient {
	return &ShopServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - VenderId
func (p *ShopServiceClient) GetStore(venderId int32) (r *Store, err error) {
	if err = p.sendGetStore(venderId); err != nil {
		return
	}
	return p.recvGetStore()
}

func (p *ShopServiceClient) sendGetStore(venderId int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetStore", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ShopServiceGetStoreArgs{
		VenderId: venderId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetStore() (value *Store, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetStore" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetStore failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetStore failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetStore failed: invalid message type")
		return
	}
	result := ShopServiceGetStoreResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ShopId
func (p *ShopServiceClient) GetStoreById(shopId int32) (r *Store, err error) {
	if err = p.sendGetStoreById(shopId); err != nil {
		return
	}
	return p.recvGetStoreById()
}

func (p *ShopServiceClient) sendGetStoreById(shopId int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetStoreById", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ShopServiceGetStoreByIdArgs{
		ShopId: shopId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetStoreById() (value *Store, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetStoreById" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetStoreById failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetStoreById failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetStoreById failed: invalid message type")
		return
	}
	result := ShopServiceGetStoreByIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ShopId
//  - On
//  - Reason
func (p *ShopServiceClient) TurnShop(shopId int32, on bool, reason string) (r *Result_, err error) {
	if err = p.sendTurnShop(shopId, on, reason); err != nil {
		return
	}
	return p.recvTurnShop()
}

func (p *ShopServiceClient) sendTurnShop(shopId int32, on bool, reason string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("TurnShop", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ShopServiceTurnShopArgs{
		ShopId: shopId,
		On:     on,
		Reason: reason,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvTurnShop() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "TurnShop" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "TurnShop failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "TurnShop failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "TurnShop failed: invalid message type")
		return
	}
	result := ShopServiceTurnShopResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ShopId
//  - Opening
//  - Reason
func (p *ShopServiceClient) OpenShop(shopId int32, opening bool, reason string) (r *Result_, err error) {
	if err = p.sendOpenShop(shopId, opening, reason); err != nil {
		return
	}
	return p.recvOpenShop()
}

func (p *ShopServiceClient) sendOpenShop(shopId int32, opening bool, reason string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("OpenShop", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ShopServiceOpenShopArgs{
		ShopId:  shopId,
		Opening: opening,
		Reason:  reason,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvOpenShop() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "OpenShop" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "OpenShop failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "OpenShop failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "OpenShop failed: invalid message type")
		return
	}
	result := ShopServiceOpenShopResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type ShopServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ShopService
}

func (p *ShopServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ShopServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ShopServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewShopServiceProcessor(handler ShopService) *ShopServiceProcessor {

	self10 := &ShopServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self10.processorMap["GetStore"] = &shopServiceProcessorGetStore{handler: handler}
	self10.processorMap["GetStoreById"] = &shopServiceProcessorGetStoreById{handler: handler}
	self10.processorMap["TurnShop"] = &shopServiceProcessorTurnShop{handler: handler}
	self10.processorMap["OpenShop"] = &shopServiceProcessorOpenShop{handler: handler}
	return self10
}

func (p *ShopServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x11.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x11

}

type shopServiceProcessorGetStore struct {
	handler ShopService
}

func (p *shopServiceProcessorGetStore) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ShopServiceGetStoreArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetStore", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ShopServiceGetStoreResult{}
	var retval *Store
	var err2 error
	if retval, err2 = p.handler.GetStore(args.VenderId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetStore: "+err2.Error())
		oprot.WriteMessageBegin("GetStore", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetStore", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetStoreById struct {
	handler ShopService
}

func (p *shopServiceProcessorGetStoreById) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ShopServiceGetStoreByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetStoreById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ShopServiceGetStoreByIdResult{}
	var retval *Store
	var err2 error
	if retval, err2 = p.handler.GetStoreById(args.ShopId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetStoreById: "+err2.Error())
		oprot.WriteMessageBegin("GetStoreById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetStoreById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorTurnShop struct {
	handler ShopService
}

func (p *shopServiceProcessorTurnShop) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ShopServiceTurnShopArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("TurnShop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ShopServiceTurnShopResult{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.TurnShop(args.ShopId, args.On, args.Reason); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TurnShop: "+err2.Error())
		oprot.WriteMessageBegin("TurnShop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("TurnShop", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorOpenShop struct {
	handler ShopService
}

func (p *shopServiceProcessorOpenShop) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ShopServiceOpenShopArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("OpenShop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ShopServiceOpenShopResult{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.OpenShop(args.ShopId, args.Opening, args.Reason); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OpenShop: "+err2.Error())
		oprot.WriteMessageBegin("OpenShop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("OpenShop", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - VenderId
type ShopServiceGetStoreArgs struct {
	VenderId int32 `thrift:"venderId,1" db:"venderId" json:"venderId"`
}

func NewShopServiceGetStoreArgs() *ShopServiceGetStoreArgs {
	return &ShopServiceGetStoreArgs{}
}

func (p *ShopServiceGetStoreArgs) GetVenderId() int32 {
	return p.VenderId
}
func (p *ShopServiceGetStoreArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ShopServiceGetStoreArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.VenderId = v
	}
	return nil
}

func (p *ShopServiceGetStoreArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetStore_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShopServiceGetStoreArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("venderId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:venderId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VenderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.venderId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:venderId: ", p), err)
	}
	return err
}

func (p *ShopServiceGetStoreArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShopServiceGetStoreArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ShopServiceGetStoreResult struct {
	Success *Store `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewShopServiceGetStoreResult() *ShopServiceGetStoreResult {
	return &ShopServiceGetStoreResult{}
}

var ShopServiceGetStoreResult_Success_DEFAULT *Store

func (p *ShopServiceGetStoreResult) GetSuccess() *Store {
	if !p.IsSetSuccess() {
		return ShopServiceGetStoreResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ShopServiceGetStoreResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ShopServiceGetStoreResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ShopServiceGetStoreResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Store{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ShopServiceGetStoreResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetStore_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShopServiceGetStoreResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ShopServiceGetStoreResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShopServiceGetStoreResult(%+v)", *p)
}

// Attributes:
//  - ShopId
type ShopServiceGetStoreByIdArgs struct {
	ShopId int32 `thrift:"shopId,1" db:"shopId" json:"shopId"`
}

func NewShopServiceGetStoreByIdArgs() *ShopServiceGetStoreByIdArgs {
	return &ShopServiceGetStoreByIdArgs{}
}

func (p *ShopServiceGetStoreByIdArgs) GetShopId() int32 {
	return p.ShopId
}
func (p *ShopServiceGetStoreByIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ShopServiceGetStoreByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ShopId = v
	}
	return nil
}

func (p *ShopServiceGetStoreByIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetStoreById_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShopServiceGetStoreByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shopId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:shopId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ShopId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.shopId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:shopId: ", p), err)
	}
	return err
}

func (p *ShopServiceGetStoreByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShopServiceGetStoreByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ShopServiceGetStoreByIdResult struct {
	Success *Store `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewShopServiceGetStoreByIdResult() *ShopServiceGetStoreByIdResult {
	return &ShopServiceGetStoreByIdResult{}
}

var ShopServiceGetStoreByIdResult_Success_DEFAULT *Store

func (p *ShopServiceGetStoreByIdResult) GetSuccess() *Store {
	if !p.IsSetSuccess() {
		return ShopServiceGetStoreByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ShopServiceGetStoreByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ShopServiceGetStoreByIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ShopServiceGetStoreByIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Store{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ShopServiceGetStoreByIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetStoreById_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShopServiceGetStoreByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ShopServiceGetStoreByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShopServiceGetStoreByIdResult(%+v)", *p)
}

// Attributes:
//  - ShopId
//  - On
//  - Reason
type ShopServiceTurnShopArgs struct {
	ShopId int32  `thrift:"shopId,1" db:"shopId" json:"shopId"`
	On     bool   `thrift:"on,2" db:"on" json:"on"`
	Reason string `thrift:"reason,3" db:"reason" json:"reason"`
}

func NewShopServiceTurnShopArgs() *ShopServiceTurnShopArgs {
	return &ShopServiceTurnShopArgs{}
}

func (p *ShopServiceTurnShopArgs) GetShopId() int32 {
	return p.ShopId
}

func (p *ShopServiceTurnShopArgs) GetOn() bool {
	return p.On
}

func (p *ShopServiceTurnShopArgs) GetReason() string {
	return p.Reason
}
func (p *ShopServiceTurnShopArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ShopServiceTurnShopArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ShopId = v
	}
	return nil
}

func (p *ShopServiceTurnShopArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.On = v
	}
	return nil
}

func (p *ShopServiceTurnShopArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Reason = v
	}
	return nil
}

func (p *ShopServiceTurnShopArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TurnShop_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShopServiceTurnShopArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shopId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:shopId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ShopId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.shopId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:shopId: ", p), err)
	}
	return err
}

func (p *ShopServiceTurnShopArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("on", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:on: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.On)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.on (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:on: ", p), err)
	}
	return err
}

func (p *ShopServiceTurnShopArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reason", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reason: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reason (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reason: ", p), err)
	}
	return err
}

func (p *ShopServiceTurnShopArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShopServiceTurnShopArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ShopServiceTurnShopResult struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewShopServiceTurnShopResult() *ShopServiceTurnShopResult {
	return &ShopServiceTurnShopResult{}
}

var ShopServiceTurnShopResult_Success_DEFAULT *Result_

func (p *ShopServiceTurnShopResult) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return ShopServiceTurnShopResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ShopServiceTurnShopResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ShopServiceTurnShopResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ShopServiceTurnShopResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ShopServiceTurnShopResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TurnShop_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShopServiceTurnShopResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ShopServiceTurnShopResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShopServiceTurnShopResult(%+v)", *p)
}

// Attributes:
//  - ShopId
//  - Opening
//  - Reason
type ShopServiceOpenShopArgs struct {
	ShopId  int32  `thrift:"shopId,1" db:"shopId" json:"shopId"`
	Opening bool   `thrift:"opening,2" db:"opening" json:"opening"`
	Reason  string `thrift:"reason,3" db:"reason" json:"reason"`
}

func NewShopServiceOpenShopArgs() *ShopServiceOpenShopArgs {
	return &ShopServiceOpenShopArgs{}
}

func (p *ShopServiceOpenShopArgs) GetShopId() int32 {
	return p.ShopId
}

func (p *ShopServiceOpenShopArgs) GetOpening() bool {
	return p.Opening
}

func (p *ShopServiceOpenShopArgs) GetReason() string {
	return p.Reason
}
func (p *ShopServiceOpenShopArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ShopServiceOpenShopArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ShopId = v
	}
	return nil
}

func (p *ShopServiceOpenShopArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Opening = v
	}
	return nil
}

func (p *ShopServiceOpenShopArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Reason = v
	}
	return nil
}

func (p *ShopServiceOpenShopArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OpenShop_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShopServiceOpenShopArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shopId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:shopId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ShopId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.shopId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:shopId: ", p), err)
	}
	return err
}

func (p *ShopServiceOpenShopArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("opening", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:opening: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Opening)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.opening (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:opening: ", p), err)
	}
	return err
}

func (p *ShopServiceOpenShopArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reason", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reason: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reason (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reason: ", p), err)
	}
	return err
}

func (p *ShopServiceOpenShopArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShopServiceOpenShopArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ShopServiceOpenShopResult struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewShopServiceOpenShopResult() *ShopServiceOpenShopResult {
	return &ShopServiceOpenShopResult{}
}

var ShopServiceOpenShopResult_Success_DEFAULT *Result_

func (p *ShopServiceOpenShopResult) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return ShopServiceOpenShopResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ShopServiceOpenShopResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ShopServiceOpenShopResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ShopServiceOpenShopResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ShopServiceOpenShopResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OpenShop_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShopServiceOpenShopResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ShopServiceOpenShopResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShopServiceOpenShopResult(%+v)", *p)
}

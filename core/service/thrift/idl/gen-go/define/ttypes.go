// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package define

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - ID
//  - Result_
//  - Code
//  - Message
type Result_ struct {
	ID      int32  `thrift:"ID,1" json:"ID"`
	Result_ bool   `thrift:"Result,2" json:"Result"`
	Code    string `thrift:"Code,3" json:"Code"`
	Message string `thrift:"Message,4" json:"Message"`
}

func NewResult_() *Result_ {
	return &Result_{}
}

func (p *Result_) GetID() int32 {
	return p.ID
}

func (p *Result_) GetResult_() bool {
	return p.Result_
}

func (p *Result_) GetCode() string {
	return p.Code
}

func (p *Result_) GetMessage() string {
	return p.Message
}
func (p *Result_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Result_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Result_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *Result_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *Result_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *Result_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Result_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Result_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Result", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Result: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Result_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Result (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Result: ", p), err)
	}
	return err
}

func (p *Result_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Code", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Code: ", p), err)
	}
	if err := oprot.WriteString(string(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Code (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Code: ", p), err)
	}
	return err
}

func (p *Result_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Message", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Message (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Message: ", p), err)
	}
	return err
}

func (p *Result_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Result_(%+v)", *p)
}

// Attributes:
//  - ID
//  - Result_
//  - Code
//  - Message
type Result64 struct {
	ID      int64  `thrift:"ID,1" json:"ID"`
	Result_ bool   `thrift:"Result,2" json:"Result"`
	Code    string `thrift:"Code,3" json:"Code"`
	Message string `thrift:"Message,4" json:"Message"`
}

func NewResult64() *Result64 {
	return &Result64{}
}

func (p *Result64) GetID() int64 {
	return p.ID
}

func (p *Result64) GetResult_() bool {
	return p.Result_
}

func (p *Result64) GetCode() string {
	return p.Code
}

func (p *Result64) GetMessage() string {
	return p.Message
}
func (p *Result64) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Result64) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Result64) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *Result64) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *Result64) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *Result64) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Result64"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Result64) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Result64) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Result", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Result: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Result_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Result (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Result: ", p), err)
	}
	return err
}

func (p *Result64) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Code", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Code: ", p), err)
	}
	if err := oprot.WriteString(string(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Code (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Code: ", p), err)
	}
	return err
}

func (p *Result64) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Message", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Message (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Message: ", p), err)
	}
	return err
}

func (p *Result64) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Result64(%+v)", *p)
}

// Attributes:
//  - Data
//  - Result_
//  - Code
//  - Message
type DResult_ struct {
	Data    float64 `thrift:"Data,1" json:"Data"`
	Result_ bool    `thrift:"Result,2" json:"Result"`
	Code    string  `thrift:"Code,3" json:"Code"`
	Message string  `thrift:"Message,4" json:"Message"`
}

func NewDResult_() *DResult_ {
	return &DResult_{}
}

func (p *DResult_) GetData() float64 {
	return p.Data
}

func (p *DResult_) GetResult_() bool {
	return p.Result_
}

func (p *DResult_) GetCode() string {
	return p.Code
}

func (p *DResult_) GetMessage() string {
	return p.Message
}
func (p *DResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *DResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *DResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *DResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *DResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Data", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Data: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Data)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Data (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Data: ", p), err)
	}
	return err
}

func (p *DResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Result", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Result: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Result_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Result (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Result: ", p), err)
	}
	return err
}

func (p *DResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Code", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Code: ", p), err)
	}
	if err := oprot.WriteString(string(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Code (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Code: ", p), err)
	}
	return err
}

func (p *DResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Message", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Message (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Message: ", p), err)
	}
	return err
}

func (p *DResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DResult_(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type Pair struct {
	Key   string `thrift:"Key,1" json:"Key"`
	Value string `thrift:"Value,2" json:"Value"`
}

func NewPair() *Pair {
	return &Pair{}
}

func (p *Pair) GetKey() string {
	return p.Key
}

func (p *Pair) GetValue() string {
	return p.Value
}
func (p *Pair) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Pair) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *Pair) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *Pair) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Pair"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Pair) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Key: ", p), err)
	}
	return err
}

func (p *Pair) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Value: ", p), err)
	}
	return err
}

func (p *Pair) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Pair(%+v)", *p)
}

// Attributes:
//  - ID
//  - MemberId
//  - Usr
//  - Pwd
//  - Name
//  - SelfSales
//  - Level
//  - Logo
//  - CompanyName
//  - Province
//  - City
//  - District
//  - Enabled
//  - ExpiresTime
//  - JoinTime
//  - UpdateTime
//  - LoginTime
//  - LastLoginTime
type ComplexMerchant struct {
	ID            int32  `thrift:"ID,1" json:"ID"`
	MemberId      int64  `thrift:"MemberId,2" json:"MemberId"`
	Usr           string `thrift:"Usr,3" json:"Usr"`
	Pwd           string `thrift:"Pwd,4" json:"Pwd"`
	Name          string `thrift:"Name,5" json:"Name"`
	SelfSales     int32  `thrift:"SelfSales,6" json:"SelfSales"`
	Level         int32  `thrift:"Level,7" json:"Level"`
	Logo          string `thrift:"Logo,8" json:"Logo"`
	CompanyName   string `thrift:"CompanyName,9" json:"CompanyName"`
	Province      int32  `thrift:"Province,10" json:"Province"`
	City          int32  `thrift:"City,11" json:"City"`
	District      int32  `thrift:"District,12" json:"District"`
	Enabled       int32  `thrift:"Enabled,13" json:"Enabled"`
	ExpiresTime   int64  `thrift:"ExpiresTime,14" json:"ExpiresTime"`
	JoinTime      int64  `thrift:"JoinTime,15" json:"JoinTime"`
	UpdateTime    int64  `thrift:"UpdateTime,16" json:"UpdateTime"`
	LoginTime     int64  `thrift:"LoginTime,17" json:"LoginTime"`
	LastLoginTime int64  `thrift:"LastLoginTime,18" json:"LastLoginTime"`
}

func NewComplexMerchant() *ComplexMerchant {
	return &ComplexMerchant{}
}

func (p *ComplexMerchant) GetID() int32 {
	return p.ID
}

func (p *ComplexMerchant) GetMemberId() int64 {
	return p.MemberId
}

func (p *ComplexMerchant) GetUsr() string {
	return p.Usr
}

func (p *ComplexMerchant) GetPwd() string {
	return p.Pwd
}

func (p *ComplexMerchant) GetName() string {
	return p.Name
}

func (p *ComplexMerchant) GetSelfSales() int32 {
	return p.SelfSales
}

func (p *ComplexMerchant) GetLevel() int32 {
	return p.Level
}

func (p *ComplexMerchant) GetLogo() string {
	return p.Logo
}

func (p *ComplexMerchant) GetCompanyName() string {
	return p.CompanyName
}

func (p *ComplexMerchant) GetProvince() int32 {
	return p.Province
}

func (p *ComplexMerchant) GetCity() int32 {
	return p.City
}

func (p *ComplexMerchant) GetDistrict() int32 {
	return p.District
}

func (p *ComplexMerchant) GetEnabled() int32 {
	return p.Enabled
}

func (p *ComplexMerchant) GetExpiresTime() int64 {
	return p.ExpiresTime
}

func (p *ComplexMerchant) GetJoinTime() int64 {
	return p.JoinTime
}

func (p *ComplexMerchant) GetUpdateTime() int64 {
	return p.UpdateTime
}

func (p *ComplexMerchant) GetLoginTime() int64 {
	return p.LoginTime
}

func (p *ComplexMerchant) GetLastLoginTime() int64 {
	return p.LastLoginTime
}
func (p *ComplexMerchant) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ComplexMerchant) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ComplexMerchant) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *ComplexMerchant) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Usr = v
	}
	return nil
}

func (p *ComplexMerchant) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Pwd = v
	}
	return nil
}

func (p *ComplexMerchant) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ComplexMerchant) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SelfSales = v
	}
	return nil
}

func (p *ComplexMerchant) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Level = v
	}
	return nil
}

func (p *ComplexMerchant) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Logo = v
	}
	return nil
}

func (p *ComplexMerchant) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.CompanyName = v
	}
	return nil
}

func (p *ComplexMerchant) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Province = v
	}
	return nil
}

func (p *ComplexMerchant) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.City = v
	}
	return nil
}

func (p *ComplexMerchant) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.District = v
	}
	return nil
}

func (p *ComplexMerchant) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Enabled = v
	}
	return nil
}

func (p *ComplexMerchant) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.ExpiresTime = v
	}
	return nil
}

func (p *ComplexMerchant) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.JoinTime = v
	}
	return nil
}

func (p *ComplexMerchant) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *ComplexMerchant) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.LoginTime = v
	}
	return nil
}

func (p *ComplexMerchant) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.LastLoginTime = v
	}
	return nil
}

func (p *ComplexMerchant) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ComplexMerchant"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ComplexMerchant) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MemberId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:MemberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MemberId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:MemberId: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Usr", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Usr: ", p), err)
	}
	if err := oprot.WriteString(string(p.Usr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Usr (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Usr: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Pwd", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Pwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Pwd (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Pwd: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Name: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SelfSales", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:SelfSales: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SelfSales)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SelfSales (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:SelfSales: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Level", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Level: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Level)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Level (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Level: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Logo", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Logo: ", p), err)
	}
	if err := oprot.WriteString(string(p.Logo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Logo (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Logo: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CompanyName", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:CompanyName: ", p), err)
	}
	if err := oprot.WriteString(string(p.CompanyName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CompanyName (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:CompanyName: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Province", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Province: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Province)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Province (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Province: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("City", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:City: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.City)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.City (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:City: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("District", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:District: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.District)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.District (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:District: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Enabled", thrift.I32, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:Enabled: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Enabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Enabled (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:Enabled: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExpiresTime", thrift.I64, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:ExpiresTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ExpiresTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ExpiresTime (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:ExpiresTime: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("JoinTime", thrift.I64, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:JoinTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.JoinTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.JoinTime (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:JoinTime: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:UpdateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:UpdateTime: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LoginTime", thrift.I64, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:LoginTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LoginTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LoginTime (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:LoginTime: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LastLoginTime", thrift.I64, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:LastLoginTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LastLoginTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LastLoginTime (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:LastLoginTime: ", p), err)
	}
	return err
}

func (p *ComplexMerchant) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComplexMerchant(%+v)", *p)
}

// Attributes:
//  - ID
//  - VendorId
//  - ShopType
//  - Name
//  - State
//  - OpeningState
//  - Data
type Shop struct {
	ID           int32             `thrift:"ID,1" json:"ID"`
	VendorId     int32             `thrift:"VendorId,2" json:"VendorId"`
	ShopType     int32             `thrift:"ShopType,3" json:"ShopType"`
	Name         string            `thrift:"Name,4" json:"Name"`
	State        int32             `thrift:"State,5" json:"State"`
	OpeningState int32             `thrift:"OpeningState,6" json:"OpeningState"`
	Data         map[string]string `thrift:"Data,7" json:"Data"`
}

func NewShop() *Shop {
	return &Shop{}
}

func (p *Shop) GetID() int32 {
	return p.ID
}

func (p *Shop) GetVendorId() int32 {
	return p.VendorId
}

func (p *Shop) GetShopType() int32 {
	return p.ShopType
}

func (p *Shop) GetName() string {
	return p.Name
}

func (p *Shop) GetState() int32 {
	return p.State
}

func (p *Shop) GetOpeningState() int32 {
	return p.OpeningState
}

func (p *Shop) GetData() map[string]string {
	return p.Data
}
func (p *Shop) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Shop) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Shop) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.VendorId = v
	}
	return nil
}

func (p *Shop) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ShopType = v
	}
	return nil
}

func (p *Shop) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Shop) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *Shop) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.OpeningState = v
	}
	return nil
}

func (p *Shop) readField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Data = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val1 = v
		}
		p.Data[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Shop) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Shop"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Shop) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Shop) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VendorId", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:VendorId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VendorId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.VendorId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:VendorId: ", p), err)
	}
	return err
}

func (p *Shop) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ShopType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ShopType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ShopType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ShopType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ShopType: ", p), err)
	}
	return err
}

func (p *Shop) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Name: ", p), err)
	}
	return err
}

func (p *Shop) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("State", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:State: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.State (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:State: ", p), err)
	}
	return err
}

func (p *Shop) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OpeningState", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:OpeningState: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OpeningState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OpeningState (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:OpeningState: ", p), err)
	}
	return err
}

func (p *Shop) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Data", thrift.MAP, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Data {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Data: ", p), err)
	}
	return err
}

func (p *Shop) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Shop(%+v)", *p)
}

// Attributes:
//  - ID
//  - VendorId
//  - Name
//  - Alias
//  - Host
//  - Logo
//  - State
//  - OpeningState
//  - StorePhone
//  - StoreTitle
//  - StoreNotice
type Store struct {
	ID           int32  `thrift:"ID,1" json:"ID"`
	VendorId     int32  `thrift:"VendorId,2" json:"VendorId"`
	Name         string `thrift:"Name,3" json:"Name"`
	Alias        string `thrift:"Alias,4" json:"Alias"`
	Host         string `thrift:"Host,5" json:"Host"`
	Logo         string `thrift:"Logo,6" json:"Logo"`
	State        int32  `thrift:"State,7" json:"State"`
	OpeningState int32  `thrift:"OpeningState,8" json:"OpeningState"`
	StorePhone   string `thrift:"StorePhone,9" json:"StorePhone"`
	StoreTitle   string `thrift:"StoreTitle,10" json:"StoreTitle"`
	StoreNotice  string `thrift:"StoreNotice,11" json:"StoreNotice"`
}

func NewStore() *Store {
	return &Store{}
}

func (p *Store) GetID() int32 {
	return p.ID
}

func (p *Store) GetVendorId() int32 {
	return p.VendorId
}

func (p *Store) GetName() string {
	return p.Name
}

func (p *Store) GetAlias() string {
	return p.Alias
}

func (p *Store) GetHost() string {
	return p.Host
}

func (p *Store) GetLogo() string {
	return p.Logo
}

func (p *Store) GetState() int32 {
	return p.State
}

func (p *Store) GetOpeningState() int32 {
	return p.OpeningState
}

func (p *Store) GetStorePhone() string {
	return p.StorePhone
}

func (p *Store) GetStoreTitle() string {
	return p.StoreTitle
}

func (p *Store) GetStoreNotice() string {
	return p.StoreNotice
}
func (p *Store) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Store) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Store) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.VendorId = v
	}
	return nil
}

func (p *Store) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Store) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Alias = v
	}
	return nil
}

func (p *Store) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Host = v
	}
	return nil
}

func (p *Store) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Logo = v
	}
	return nil
}

func (p *Store) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *Store) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.OpeningState = v
	}
	return nil
}

func (p *Store) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.StorePhone = v
	}
	return nil
}

func (p *Store) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.StoreTitle = v
	}
	return nil
}

func (p *Store) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.StoreNotice = v
	}
	return nil
}

func (p *Store) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Store"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Store) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Store) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VendorId", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:VendorId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VendorId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.VendorId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:VendorId: ", p), err)
	}
	return err
}

func (p *Store) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Name: ", p), err)
	}
	return err
}

func (p *Store) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Alias", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Alias: ", p), err)
	}
	if err := oprot.WriteString(string(p.Alias)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Alias (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Alias: ", p), err)
	}
	return err
}

func (p *Store) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Host", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Host: ", p), err)
	}
	if err := oprot.WriteString(string(p.Host)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Host (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Host: ", p), err)
	}
	return err
}

func (p *Store) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Logo", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Logo: ", p), err)
	}
	if err := oprot.WriteString(string(p.Logo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Logo (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Logo: ", p), err)
	}
	return err
}

func (p *Store) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("State", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:State: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.State (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:State: ", p), err)
	}
	return err
}

func (p *Store) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OpeningState", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:OpeningState: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OpeningState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OpeningState (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:OpeningState: ", p), err)
	}
	return err
}

func (p *Store) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("StorePhone", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:StorePhone: ", p), err)
	}
	if err := oprot.WriteString(string(p.StorePhone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.StorePhone (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:StorePhone: ", p), err)
	}
	return err
}

func (p *Store) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("StoreTitle", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:StoreTitle: ", p), err)
	}
	if err := oprot.WriteString(string(p.StoreTitle)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.StoreTitle (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:StoreTitle: ", p), err)
	}
	return err
}

func (p *Store) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("StoreNotice", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:StoreNotice: ", p), err)
	}
	if err := oprot.WriteString(string(p.StoreNotice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.StoreNotice (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:StoreNotice: ", p), err)
	}
	return err
}

func (p *Store) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Store(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - RequireExp
//  - ProgramSignal
//  - IsOfficial
//  - Enabled
type Level struct {
	ID            int32  `thrift:"ID,1" json:"ID"`
	Name          string `thrift:"Name,2" json:"Name"`
	RequireExp    int32  `thrift:"RequireExp,3" json:"RequireExp"`
	ProgramSignal string `thrift:"ProgramSignal,4" json:"ProgramSignal"`
	IsOfficial    int32  `thrift:"IsOfficial,5" json:"IsOfficial"`
	Enabled       int32  `thrift:"Enabled,6" json:"Enabled"`
}

func NewLevel() *Level {
	return &Level{}
}

func (p *Level) GetID() int32 {
	return p.ID
}

func (p *Level) GetName() string {
	return p.Name
}

func (p *Level) GetRequireExp() int32 {
	return p.RequireExp
}

func (p *Level) GetProgramSignal() string {
	return p.ProgramSignal
}

func (p *Level) GetIsOfficial() int32 {
	return p.IsOfficial
}

func (p *Level) GetEnabled() int32 {
	return p.Enabled
}
func (p *Level) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Level) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Level) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Level) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RequireExp = v
	}
	return nil
}

func (p *Level) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ProgramSignal = v
	}
	return nil
}

func (p *Level) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IsOfficial = v
	}
	return nil
}

func (p *Level) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Enabled = v
	}
	return nil
}

func (p *Level) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Level"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Level) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Level) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Name: ", p), err)
	}
	return err
}

func (p *Level) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RequireExp", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:RequireExp: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RequireExp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RequireExp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:RequireExp: ", p), err)
	}
	return err
}

func (p *Level) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProgramSignal", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ProgramSignal: ", p), err)
	}
	if err := oprot.WriteString(string(p.ProgramSignal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ProgramSignal (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ProgramSignal: ", p), err)
	}
	return err
}

func (p *Level) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IsOfficial", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:IsOfficial: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsOfficial)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IsOfficial (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:IsOfficial: ", p), err)
	}
	return err
}

func (p *Level) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Enabled", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Enabled: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Enabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Enabled (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Enabled: ", p), err)
	}
	return err
}

func (p *Level) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Level(%+v)", *p)
}

// Attributes:
//  - ID
//  - Usr
//  - Pwd
//  - TradePwd
//  - Exp
//  - Level
//  - InvitationCode
//  - PremiumUser
//  - PremiumExpires
//  - RegFrom
//  - RegIp
//  - RegTime
//  - CheckCode
//  - CheckExpires
//  - State
//  - LoginTime
//  - LastLoginTime
//  - UpdateTime
//  - DynamicToken
//  - TimeoutTime
type Member struct {
	ID             int64  `thrift:"ID,1" json:"ID"`
	Usr            string `thrift:"Usr,2" json:"Usr"`
	Pwd            string `thrift:"Pwd,3" json:"Pwd"`
	TradePwd       string `thrift:"TradePwd,4" json:"TradePwd"`
	Exp            int32  `thrift:"Exp,5" json:"Exp"`
	Level          int32  `thrift:"Level,6" json:"Level"`
	InvitationCode string `thrift:"InvitationCode,7" json:"InvitationCode"`
	PremiumUser    int32  `thrift:"PremiumUser,8" json:"PremiumUser"`
	PremiumExpires int64  `thrift:"PremiumExpires,9" json:"PremiumExpires"`
	RegFrom        string `thrift:"RegFrom,10" json:"RegFrom"`
	RegIp          string `thrift:"RegIp,11" json:"RegIp"`
	RegTime        int64  `thrift:"RegTime,12" json:"RegTime"`
	CheckCode      string `thrift:"CheckCode,13" json:"CheckCode"`
	CheckExpires   int64  `thrift:"CheckExpires,14" json:"CheckExpires"`
	State          int32  `thrift:"State,15" json:"State"`
	LoginTime      int64  `thrift:"LoginTime,16" json:"LoginTime"`
	LastLoginTime  int64  `thrift:"LastLoginTime,17" json:"LastLoginTime"`
	UpdateTime     int64  `thrift:"UpdateTime,18" json:"UpdateTime"`
	DynamicToken   string `thrift:"DynamicToken,19" json:"DynamicToken"`
	TimeoutTime    int64  `thrift:"TimeoutTime,20" json:"TimeoutTime"`
}

func NewMember() *Member {
	return &Member{}
}

func (p *Member) GetID() int64 {
	return p.ID
}

func (p *Member) GetUsr() string {
	return p.Usr
}

func (p *Member) GetPwd() string {
	return p.Pwd
}

func (p *Member) GetTradePwd() string {
	return p.TradePwd
}

func (p *Member) GetExp() int32 {
	return p.Exp
}

func (p *Member) GetLevel() int32 {
	return p.Level
}

func (p *Member) GetInvitationCode() string {
	return p.InvitationCode
}

func (p *Member) GetPremiumUser() int32 {
	return p.PremiumUser
}

func (p *Member) GetPremiumExpires() int64 {
	return p.PremiumExpires
}

func (p *Member) GetRegFrom() string {
	return p.RegFrom
}

func (p *Member) GetRegIp() string {
	return p.RegIp
}

func (p *Member) GetRegTime() int64 {
	return p.RegTime
}

func (p *Member) GetCheckCode() string {
	return p.CheckCode
}

func (p *Member) GetCheckExpires() int64 {
	return p.CheckExpires
}

func (p *Member) GetState() int32 {
	return p.State
}

func (p *Member) GetLoginTime() int64 {
	return p.LoginTime
}

func (p *Member) GetLastLoginTime() int64 {
	return p.LastLoginTime
}

func (p *Member) GetUpdateTime() int64 {
	return p.UpdateTime
}

func (p *Member) GetDynamicToken() string {
	return p.DynamicToken
}

func (p *Member) GetTimeoutTime() int64 {
	return p.TimeoutTime
}
func (p *Member) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Member) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Member) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Usr = v
	}
	return nil
}

func (p *Member) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Pwd = v
	}
	return nil
}

func (p *Member) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TradePwd = v
	}
	return nil
}

func (p *Member) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Exp = v
	}
	return nil
}

func (p *Member) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Level = v
	}
	return nil
}

func (p *Member) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.InvitationCode = v
	}
	return nil
}

func (p *Member) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.PremiumUser = v
	}
	return nil
}

func (p *Member) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.PremiumExpires = v
	}
	return nil
}

func (p *Member) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.RegFrom = v
	}
	return nil
}

func (p *Member) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.RegIp = v
	}
	return nil
}

func (p *Member) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.RegTime = v
	}
	return nil
}

func (p *Member) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.CheckCode = v
	}
	return nil
}

func (p *Member) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.CheckExpires = v
	}
	return nil
}

func (p *Member) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *Member) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.LoginTime = v
	}
	return nil
}

func (p *Member) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.LastLoginTime = v
	}
	return nil
}

func (p *Member) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *Member) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.DynamicToken = v
	}
	return nil
}

func (p *Member) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.TimeoutTime = v
	}
	return nil
}

func (p *Member) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Member"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Member) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Member) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Usr", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Usr: ", p), err)
	}
	if err := oprot.WriteString(string(p.Usr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Usr (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Usr: ", p), err)
	}
	return err
}

func (p *Member) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Pwd", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Pwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Pwd (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Pwd: ", p), err)
	}
	return err
}

func (p *Member) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TradePwd", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:TradePwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.TradePwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TradePwd (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:TradePwd: ", p), err)
	}
	return err
}

func (p *Member) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Exp", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Exp: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Exp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Exp (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Exp: ", p), err)
	}
	return err
}

func (p *Member) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Level", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Level: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Level)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Level (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Level: ", p), err)
	}
	return err
}

func (p *Member) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("InvitationCode", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:InvitationCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.InvitationCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.InvitationCode (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:InvitationCode: ", p), err)
	}
	return err
}

func (p *Member) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PremiumUser", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:PremiumUser: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PremiumUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PremiumUser (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:PremiumUser: ", p), err)
	}
	return err
}

func (p *Member) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PremiumExpires", thrift.I64, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:PremiumExpires: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PremiumExpires)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PremiumExpires (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:PremiumExpires: ", p), err)
	}
	return err
}

func (p *Member) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RegFrom", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:RegFrom: ", p), err)
	}
	if err := oprot.WriteString(string(p.RegFrom)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RegFrom (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:RegFrom: ", p), err)
	}
	return err
}

func (p *Member) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RegIp", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:RegIp: ", p), err)
	}
	if err := oprot.WriteString(string(p.RegIp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RegIp (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:RegIp: ", p), err)
	}
	return err
}

func (p *Member) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RegTime", thrift.I64, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:RegTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RegTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RegTime (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:RegTime: ", p), err)
	}
	return err
}

func (p *Member) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CheckCode", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:CheckCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.CheckCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CheckCode (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:CheckCode: ", p), err)
	}
	return err
}

func (p *Member) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CheckExpires", thrift.I64, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:CheckExpires: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CheckExpires)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CheckExpires (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:CheckExpires: ", p), err)
	}
	return err
}

func (p *Member) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("State", thrift.I32, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:State: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.State (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:State: ", p), err)
	}
	return err
}

func (p *Member) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LoginTime", thrift.I64, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:LoginTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LoginTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LoginTime (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:LoginTime: ", p), err)
	}
	return err
}

func (p *Member) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LastLoginTime", thrift.I64, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:LastLoginTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LastLoginTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LastLoginTime (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:LastLoginTime: ", p), err)
	}
	return err
}

func (p *Member) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:UpdateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:UpdateTime: ", p), err)
	}
	return err
}

func (p *Member) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DynamicToken", thrift.STRING, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:DynamicToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.DynamicToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.DynamicToken (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:DynamicToken: ", p), err)
	}
	return err
}

func (p *Member) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TimeoutTime", thrift.I64, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:TimeoutTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TimeoutTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TimeoutTime (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:TimeoutTime: ", p), err)
	}
	return err
}

func (p *Member) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Member(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Name
//  - Avatar
//  - Sex
//  - BirthDay
//  - Phone
//  - Address
//  - Im
//  - Email
//  - Province
//  - City
//  - District
//  - Remark
//  - Ext1
//  - Ext2
//  - Ext3
//  - Ext4
//  - Ext5
//  - Ext6
//  - UpdateTime
type Profile struct {
	MemberId   int64  `thrift:"MemberId,1" json:"MemberId"`
	Name       string `thrift:"Name,2" json:"Name"`
	Avatar     string `thrift:"Avatar,3" json:"Avatar"`
	Sex        int32  `thrift:"Sex,4" json:"Sex"`
	BirthDay   string `thrift:"BirthDay,5" json:"BirthDay"`
	Phone      string `thrift:"Phone,6" json:"Phone"`
	Address    string `thrift:"Address,7" json:"Address"`
	Im         string `thrift:"Im,8" json:"Im"`
	Email      string `thrift:"Email,9" json:"Email"`
	Province   int32  `thrift:"Province,10" json:"Province"`
	City       int32  `thrift:"City,11" json:"City"`
	District   int32  `thrift:"District,12" json:"District"`
	Remark     string `thrift:"Remark,13" json:"Remark"`
	Ext1       string `thrift:"Ext1,14" json:"Ext1"`
	Ext2       string `thrift:"Ext2,15" json:"Ext2"`
	Ext3       string `thrift:"Ext3,16" json:"Ext3"`
	Ext4       string `thrift:"Ext4,17" json:"Ext4"`
	Ext5       string `thrift:"Ext5,18" json:"Ext5"`
	Ext6       string `thrift:"Ext6,19" json:"Ext6"`
	UpdateTime int64  `thrift:"UpdateTime,20" json:"UpdateTime"`
}

func NewProfile() *Profile {
	return &Profile{}
}

func (p *Profile) GetMemberId() int64 {
	return p.MemberId
}

func (p *Profile) GetName() string {
	return p.Name
}

func (p *Profile) GetAvatar() string {
	return p.Avatar
}

func (p *Profile) GetSex() int32 {
	return p.Sex
}

func (p *Profile) GetBirthDay() string {
	return p.BirthDay
}

func (p *Profile) GetPhone() string {
	return p.Phone
}

func (p *Profile) GetAddress() string {
	return p.Address
}

func (p *Profile) GetIm() string {
	return p.Im
}

func (p *Profile) GetEmail() string {
	return p.Email
}

func (p *Profile) GetProvince() int32 {
	return p.Province
}

func (p *Profile) GetCity() int32 {
	return p.City
}

func (p *Profile) GetDistrict() int32 {
	return p.District
}

func (p *Profile) GetRemark() string {
	return p.Remark
}

func (p *Profile) GetExt1() string {
	return p.Ext1
}

func (p *Profile) GetExt2() string {
	return p.Ext2
}

func (p *Profile) GetExt3() string {
	return p.Ext3
}

func (p *Profile) GetExt4() string {
	return p.Ext4
}

func (p *Profile) GetExt5() string {
	return p.Ext5
}

func (p *Profile) GetExt6() string {
	return p.Ext6
}

func (p *Profile) GetUpdateTime() int64 {
	return p.UpdateTime
}
func (p *Profile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Profile) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *Profile) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Profile) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Avatar = v
	}
	return nil
}

func (p *Profile) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Sex = v
	}
	return nil
}

func (p *Profile) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BirthDay = v
	}
	return nil
}

func (p *Profile) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *Profile) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Address = v
	}
	return nil
}

func (p *Profile) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Im = v
	}
	return nil
}

func (p *Profile) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *Profile) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Province = v
	}
	return nil
}

func (p *Profile) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.City = v
	}
	return nil
}

func (p *Profile) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.District = v
	}
	return nil
}

func (p *Profile) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Remark = v
	}
	return nil
}

func (p *Profile) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Ext1 = v
	}
	return nil
}

func (p *Profile) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Ext2 = v
	}
	return nil
}

func (p *Profile) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.Ext3 = v
	}
	return nil
}

func (p *Profile) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.Ext4 = v
	}
	return nil
}

func (p *Profile) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.Ext5 = v
	}
	return nil
}

func (p *Profile) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.Ext6 = v
	}
	return nil
}

func (p *Profile) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *Profile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Profile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Profile) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MemberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MemberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MemberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MemberId: ", p), err)
	}
	return err
}

func (p *Profile) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Name: ", p), err)
	}
	return err
}

func (p *Profile) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Avatar", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Avatar: ", p), err)
	}
	if err := oprot.WriteString(string(p.Avatar)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Avatar (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Avatar: ", p), err)
	}
	return err
}

func (p *Profile) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Sex", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Sex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Sex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Sex (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Sex: ", p), err)
	}
	return err
}

func (p *Profile) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BirthDay", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:BirthDay: ", p), err)
	}
	if err := oprot.WriteString(string(p.BirthDay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BirthDay (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:BirthDay: ", p), err)
	}
	return err
}

func (p *Profile) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Phone", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Phone (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Phone: ", p), err)
	}
	return err
}

func (p *Profile) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Address", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Address: ", p), err)
	}
	if err := oprot.WriteString(string(p.Address)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Address (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Address: ", p), err)
	}
	return err
}

func (p *Profile) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Im", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Im: ", p), err)
	}
	if err := oprot.WriteString(string(p.Im)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Im (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Im: ", p), err)
	}
	return err
}

func (p *Profile) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Email", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:Email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Email (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:Email: ", p), err)
	}
	return err
}

func (p *Profile) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Province", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Province: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Province)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Province (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Province: ", p), err)
	}
	return err
}

func (p *Profile) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("City", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:City: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.City)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.City (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:City: ", p), err)
	}
	return err
}

func (p *Profile) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("District", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:District: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.District)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.District (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:District: ", p), err)
	}
	return err
}

func (p *Profile) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Remark", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:Remark: ", p), err)
	}
	if err := oprot.WriteString(string(p.Remark)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Remark (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:Remark: ", p), err)
	}
	return err
}

func (p *Profile) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ext1", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:Ext1: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ext1)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Ext1 (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:Ext1: ", p), err)
	}
	return err
}

func (p *Profile) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ext2", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:Ext2: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ext2)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Ext2 (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:Ext2: ", p), err)
	}
	return err
}

func (p *Profile) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ext3", thrift.STRING, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:Ext3: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ext3)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Ext3 (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:Ext3: ", p), err)
	}
	return err
}

func (p *Profile) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ext4", thrift.STRING, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:Ext4: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ext4)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Ext4 (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:Ext4: ", p), err)
	}
	return err
}

func (p *Profile) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ext5", thrift.STRING, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:Ext5: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ext5)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Ext5 (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:Ext5: ", p), err)
	}
	return err
}

func (p *Profile) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ext6", thrift.STRING, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:Ext6: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ext6)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Ext6 (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:Ext6: ", p), err)
	}
	return err
}

func (p *Profile) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:UpdateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:UpdateTime: ", p), err)
	}
	return err
}

func (p *Profile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Profile(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Integral
//  - FreezeIntegral
//  - Balance
//  - FreezeBalance
//  - ExpiredBalance
//  - WalletBalance
//  - FreezeWallet
//  - ExpiredPresent
//  - TotalPresentFee
//  - FlowBalance
//  - GrowBalance
//  - GrowAmount
//  - GrowEarnings
//  - GrowTotalEarnings
//  - TotalExpense
//  - TotalCharge
//  - TotalPay
//  - PriorityPay
//  - UpdateTime
type Account struct {
	MemberId          int64   `thrift:"MemberId,1" json:"MemberId"`
	Integral          int64   `thrift:"Integral,2" json:"Integral"`
	FreezeIntegral    int64   `thrift:"FreezeIntegral,3" json:"FreezeIntegral"`
	Balance           float64 `thrift:"Balance,4" json:"Balance"`
	FreezeBalance     float64 `thrift:"FreezeBalance,5" json:"FreezeBalance"`
	ExpiredBalance    float64 `thrift:"ExpiredBalance,6" json:"ExpiredBalance"`
	WalletBalance     float64 `thrift:"WalletBalance,7" json:"WalletBalance"`
	FreezeWallet      float64 `thrift:"FreezeWallet,8" json:"FreezeWallet"`
	ExpiredPresent    float64 `thrift:"ExpiredPresent,9" json:"ExpiredPresent"`
	TotalPresentFee   float64 `thrift:"TotalPresentFee,10" json:"TotalPresentFee"`
	FlowBalance       float64 `thrift:"FlowBalance,11" json:"FlowBalance"`
	GrowBalance       float64 `thrift:"GrowBalance,12" json:"GrowBalance"`
	GrowAmount        float64 `thrift:"GrowAmount,13" json:"GrowAmount"`
	GrowEarnings      float64 `thrift:"GrowEarnings,14" json:"GrowEarnings"`
	GrowTotalEarnings float64 `thrift:"GrowTotalEarnings,15" json:"GrowTotalEarnings"`
	TotalExpense      float64 `thrift:"TotalExpense,16" json:"TotalExpense"`
	TotalCharge       float64 `thrift:"TotalCharge,17" json:"TotalCharge"`
	TotalPay          float64 `thrift:"TotalPay,18" json:"TotalPay"`
	PriorityPay       int64   `thrift:"PriorityPay,19" json:"PriorityPay"`
	UpdateTime        int64   `thrift:"UpdateTime,20" json:"UpdateTime"`
}

func NewAccount() *Account {
	return &Account{}
}

func (p *Account) GetMemberId() int64 {
	return p.MemberId
}

func (p *Account) GetIntegral() int64 {
	return p.Integral
}

func (p *Account) GetFreezeIntegral() int64 {
	return p.FreezeIntegral
}

func (p *Account) GetBalance() float64 {
	return p.Balance
}

func (p *Account) GetFreezeBalance() float64 {
	return p.FreezeBalance
}

func (p *Account) GetExpiredBalance() float64 {
	return p.ExpiredBalance
}

func (p *Account) GetWalletBalance() float64 {
	return p.WalletBalance
}

func (p *Account) GetFreezeWallet() float64 {
	return p.FreezeWallet
}

func (p *Account) GetExpiredPresent() float64 {
	return p.ExpiredPresent
}

func (p *Account) GetTotalPresentFee() float64 {
	return p.TotalPresentFee
}

func (p *Account) GetFlowBalance() float64 {
	return p.FlowBalance
}

func (p *Account) GetGrowBalance() float64 {
	return p.GrowBalance
}

func (p *Account) GetGrowAmount() float64 {
	return p.GrowAmount
}

func (p *Account) GetGrowEarnings() float64 {
	return p.GrowEarnings
}

func (p *Account) GetGrowTotalEarnings() float64 {
	return p.GrowTotalEarnings
}

func (p *Account) GetTotalExpense() float64 {
	return p.TotalExpense
}

func (p *Account) GetTotalCharge() float64 {
	return p.TotalCharge
}

func (p *Account) GetTotalPay() float64 {
	return p.TotalPay
}

func (p *Account) GetPriorityPay() int64 {
	return p.PriorityPay
}

func (p *Account) GetUpdateTime() int64 {
	return p.UpdateTime
}
func (p *Account) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Account) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *Account) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Integral = v
	}
	return nil
}

func (p *Account) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FreezeIntegral = v
	}
	return nil
}

func (p *Account) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Balance = v
	}
	return nil
}

func (p *Account) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.FreezeBalance = v
	}
	return nil
}

func (p *Account) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ExpiredBalance = v
	}
	return nil
}

func (p *Account) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.WalletBalance = v
	}
	return nil
}

func (p *Account) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.FreezeWallet = v
	}
	return nil
}

func (p *Account) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.ExpiredPresent = v
	}
	return nil
}

func (p *Account) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.TotalPresentFee = v
	}
	return nil
}

func (p *Account) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.FlowBalance = v
	}
	return nil
}

func (p *Account) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.GrowBalance = v
	}
	return nil
}

func (p *Account) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.GrowAmount = v
	}
	return nil
}

func (p *Account) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.GrowEarnings = v
	}
	return nil
}

func (p *Account) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.GrowTotalEarnings = v
	}
	return nil
}

func (p *Account) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.TotalExpense = v
	}
	return nil
}

func (p *Account) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.TotalCharge = v
	}
	return nil
}

func (p *Account) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.TotalPay = v
	}
	return nil
}

func (p *Account) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.PriorityPay = v
	}
	return nil
}

func (p *Account) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *Account) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Account"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Account) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MemberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MemberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MemberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MemberId: ", p), err)
	}
	return err
}

func (p *Account) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Integral", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Integral: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Integral)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Integral (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Integral: ", p), err)
	}
	return err
}

func (p *Account) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FreezeIntegral", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:FreezeIntegral: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FreezeIntegral)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FreezeIntegral (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:FreezeIntegral: ", p), err)
	}
	return err
}

func (p *Account) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Balance", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Balance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Balance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Balance (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Balance: ", p), err)
	}
	return err
}

func (p *Account) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FreezeBalance", thrift.DOUBLE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:FreezeBalance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.FreezeBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FreezeBalance (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:FreezeBalance: ", p), err)
	}
	return err
}

func (p *Account) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExpiredBalance", thrift.DOUBLE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ExpiredBalance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.ExpiredBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ExpiredBalance (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ExpiredBalance: ", p), err)
	}
	return err
}

func (p *Account) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("WalletBalance", thrift.DOUBLE, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:WalletBalance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.WalletBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.WalletBalance (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:WalletBalance: ", p), err)
	}
	return err
}

func (p *Account) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FreezeWallet", thrift.DOUBLE, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:FreezeWallet: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.FreezeWallet)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FreezeWallet (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:FreezeWallet: ", p), err)
	}
	return err
}

func (p *Account) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExpiredPresent", thrift.DOUBLE, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ExpiredPresent: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.ExpiredPresent)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ExpiredPresent (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ExpiredPresent: ", p), err)
	}
	return err
}

func (p *Account) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalPresentFee", thrift.DOUBLE, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:TotalPresentFee: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.TotalPresentFee)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalPresentFee (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:TotalPresentFee: ", p), err)
	}
	return err
}

func (p *Account) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FlowBalance", thrift.DOUBLE, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:FlowBalance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.FlowBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FlowBalance (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:FlowBalance: ", p), err)
	}
	return err
}

func (p *Account) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GrowBalance", thrift.DOUBLE, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:GrowBalance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.GrowBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrowBalance (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:GrowBalance: ", p), err)
	}
	return err
}

func (p *Account) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GrowAmount", thrift.DOUBLE, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:GrowAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.GrowAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrowAmount (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:GrowAmount: ", p), err)
	}
	return err
}

func (p *Account) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GrowEarnings", thrift.DOUBLE, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:GrowEarnings: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.GrowEarnings)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrowEarnings (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:GrowEarnings: ", p), err)
	}
	return err
}

func (p *Account) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GrowTotalEarnings", thrift.DOUBLE, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:GrowTotalEarnings: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.GrowTotalEarnings)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrowTotalEarnings (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:GrowTotalEarnings: ", p), err)
	}
	return err
}

func (p *Account) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalExpense", thrift.DOUBLE, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:TotalExpense: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.TotalExpense)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalExpense (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:TotalExpense: ", p), err)
	}
	return err
}

func (p *Account) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalCharge", thrift.DOUBLE, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:TotalCharge: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.TotalCharge)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalCharge (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:TotalCharge: ", p), err)
	}
	return err
}

func (p *Account) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalPay", thrift.DOUBLE, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:TotalPay: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.TotalPay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalPay (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:TotalPay: ", p), err)
	}
	return err
}

func (p *Account) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PriorityPay", thrift.I64, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:PriorityPay: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PriorityPay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PriorityPay (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:PriorityPay: ", p), err)
	}
	return err
}

func (p *Account) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:UpdateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:UpdateTime: ", p), err)
	}
	return err
}

func (p *Account) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Account(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Usr
//  - Name
//  - Avatar
//  - Exp
//  - Level
//  - LevelName
//  - LevelSign
//  - LevelOfficial
//  - PremiumUser
//  - PremiumExpires
//  - InvitationCode
//  - TrustAuthState
//  - State
//  - Integral
//  - Balance
//  - WalletBalance
//  - GrowBalance
//  - GrowAmount
//  - GrowEarnings
//  - GrowTotalEarnings
//  - UpdateTime
type ComplexMember struct {
	MemberId          int64   `thrift:"MemberId,1" json:"MemberId"`
	Usr               string  `thrift:"Usr,2" json:"Usr"`
	Name              string  `thrift:"Name,3" json:"Name"`
	Avatar            string  `thrift:"Avatar,4" json:"Avatar"`
	Exp               int32   `thrift:"Exp,5" json:"Exp"`
	Level             int32   `thrift:"Level,6" json:"Level"`
	LevelName         string  `thrift:"LevelName,7" json:"LevelName"`
	LevelSign         string  `thrift:"LevelSign,8" json:"LevelSign"`
	LevelOfficial     int32   `thrift:"LevelOfficial,9" json:"LevelOfficial"`
	PremiumUser       int32   `thrift:"PremiumUser,10" json:"PremiumUser"`
	PremiumExpires    int64   `thrift:"PremiumExpires,11" json:"PremiumExpires"`
	InvitationCode    string  `thrift:"InvitationCode,12" json:"InvitationCode"`
	TrustAuthState    int32   `thrift:"TrustAuthState,13" json:"TrustAuthState"`
	State             int32   `thrift:"State,14" json:"State"`
	Integral          int64   `thrift:"Integral,15" json:"Integral"`
	Balance           float64 `thrift:"Balance,16" json:"Balance"`
	WalletBalance     float64 `thrift:"WalletBalance,17" json:"WalletBalance"`
	GrowBalance       float64 `thrift:"GrowBalance,18" json:"GrowBalance"`
	GrowAmount        float64 `thrift:"GrowAmount,19" json:"GrowAmount"`
	GrowEarnings      float64 `thrift:"GrowEarnings,20" json:"GrowEarnings"`
	GrowTotalEarnings float64 `thrift:"GrowTotalEarnings,21" json:"GrowTotalEarnings"`
	UpdateTime        int64   `thrift:"UpdateTime,22" json:"UpdateTime"`
}

func NewComplexMember() *ComplexMember {
	return &ComplexMember{}
}

func (p *ComplexMember) GetMemberId() int64 {
	return p.MemberId
}

func (p *ComplexMember) GetUsr() string {
	return p.Usr
}

func (p *ComplexMember) GetName() string {
	return p.Name
}

func (p *ComplexMember) GetAvatar() string {
	return p.Avatar
}

func (p *ComplexMember) GetExp() int32 {
	return p.Exp
}

func (p *ComplexMember) GetLevel() int32 {
	return p.Level
}

func (p *ComplexMember) GetLevelName() string {
	return p.LevelName
}

func (p *ComplexMember) GetLevelSign() string {
	return p.LevelSign
}

func (p *ComplexMember) GetLevelOfficial() int32 {
	return p.LevelOfficial
}

func (p *ComplexMember) GetPremiumUser() int32 {
	return p.PremiumUser
}

func (p *ComplexMember) GetPremiumExpires() int64 {
	return p.PremiumExpires
}

func (p *ComplexMember) GetInvitationCode() string {
	return p.InvitationCode
}

func (p *ComplexMember) GetTrustAuthState() int32 {
	return p.TrustAuthState
}

func (p *ComplexMember) GetState() int32 {
	return p.State
}

func (p *ComplexMember) GetIntegral() int64 {
	return p.Integral
}

func (p *ComplexMember) GetBalance() float64 {
	return p.Balance
}

func (p *ComplexMember) GetWalletBalance() float64 {
	return p.WalletBalance
}

func (p *ComplexMember) GetGrowBalance() float64 {
	return p.GrowBalance
}

func (p *ComplexMember) GetGrowAmount() float64 {
	return p.GrowAmount
}

func (p *ComplexMember) GetGrowEarnings() float64 {
	return p.GrowEarnings
}

func (p *ComplexMember) GetGrowTotalEarnings() float64 {
	return p.GrowTotalEarnings
}

func (p *ComplexMember) GetUpdateTime() int64 {
	return p.UpdateTime
}
func (p *ComplexMember) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ComplexMember) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *ComplexMember) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Usr = v
	}
	return nil
}

func (p *ComplexMember) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ComplexMember) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Avatar = v
	}
	return nil
}

func (p *ComplexMember) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Exp = v
	}
	return nil
}

func (p *ComplexMember) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Level = v
	}
	return nil
}

func (p *ComplexMember) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.LevelName = v
	}
	return nil
}

func (p *ComplexMember) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.LevelSign = v
	}
	return nil
}

func (p *ComplexMember) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.LevelOfficial = v
	}
	return nil
}

func (p *ComplexMember) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.PremiumUser = v
	}
	return nil
}

func (p *ComplexMember) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.PremiumExpires = v
	}
	return nil
}

func (p *ComplexMember) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.InvitationCode = v
	}
	return nil
}

func (p *ComplexMember) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.TrustAuthState = v
	}
	return nil
}

func (p *ComplexMember) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *ComplexMember) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Integral = v
	}
	return nil
}

func (p *ComplexMember) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.Balance = v
	}
	return nil
}

func (p *ComplexMember) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.WalletBalance = v
	}
	return nil
}

func (p *ComplexMember) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.GrowBalance = v
	}
	return nil
}

func (p *ComplexMember) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.GrowAmount = v
	}
	return nil
}

func (p *ComplexMember) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.GrowEarnings = v
	}
	return nil
}

func (p *ComplexMember) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.GrowTotalEarnings = v
	}
	return nil
}

func (p *ComplexMember) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *ComplexMember) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ComplexMember"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ComplexMember) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MemberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MemberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MemberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MemberId: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Usr", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Usr: ", p), err)
	}
	if err := oprot.WriteString(string(p.Usr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Usr (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Usr: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Name: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Avatar", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Avatar: ", p), err)
	}
	if err := oprot.WriteString(string(p.Avatar)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Avatar (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Avatar: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Exp", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Exp: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Exp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Exp (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Exp: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Level", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Level: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Level)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Level (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Level: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LevelName", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:LevelName: ", p), err)
	}
	if err := oprot.WriteString(string(p.LevelName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LevelName (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:LevelName: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LevelSign", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:LevelSign: ", p), err)
	}
	if err := oprot.WriteString(string(p.LevelSign)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LevelSign (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:LevelSign: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LevelOfficial", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:LevelOfficial: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LevelOfficial)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LevelOfficial (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:LevelOfficial: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PremiumUser", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:PremiumUser: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PremiumUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PremiumUser (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:PremiumUser: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PremiumExpires", thrift.I64, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:PremiumExpires: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PremiumExpires)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PremiumExpires (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:PremiumExpires: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("InvitationCode", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:InvitationCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.InvitationCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.InvitationCode (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:InvitationCode: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TrustAuthState", thrift.I32, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:TrustAuthState: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TrustAuthState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TrustAuthState (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:TrustAuthState: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("State", thrift.I32, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:State: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.State (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:State: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Integral", thrift.I64, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:Integral: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Integral)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Integral (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:Integral: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Balance", thrift.DOUBLE, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:Balance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Balance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Balance (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:Balance: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("WalletBalance", thrift.DOUBLE, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:WalletBalance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.WalletBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.WalletBalance (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:WalletBalance: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GrowBalance", thrift.DOUBLE, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:GrowBalance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.GrowBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrowBalance (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:GrowBalance: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GrowAmount", thrift.DOUBLE, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:GrowAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.GrowAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrowAmount (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:GrowAmount: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GrowEarnings", thrift.DOUBLE, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:GrowEarnings: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.GrowEarnings)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrowEarnings (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:GrowEarnings: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GrowTotalEarnings", thrift.DOUBLE, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:GrowTotalEarnings: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.GrowTotalEarnings)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrowTotalEarnings (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:GrowTotalEarnings: ", p), err)
	}
	return err
}

func (p *ComplexMember) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:UpdateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:UpdateTime: ", p), err)
	}
	return err
}

func (p *ComplexMember) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComplexMember(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - CardId
//  - InviterId
//  - InviterStr
//  - RegisterMchId
type MemberRelation struct {
	MemberId      int64  `thrift:"MemberId,1" json:"MemberId"`
	CardId        string `thrift:"CardId,2" json:"CardId"`
	InviterId     int64  `thrift:"InviterId,3" json:"InviterId"`
	InviterStr    string `thrift:"InviterStr,4" json:"InviterStr"`
	RegisterMchId int32  `thrift:"RegisterMchId,5" json:"RegisterMchId"`
}

func NewMemberRelation() *MemberRelation {
	return &MemberRelation{}
}

func (p *MemberRelation) GetMemberId() int64 {
	return p.MemberId
}

func (p *MemberRelation) GetCardId() string {
	return p.CardId
}

func (p *MemberRelation) GetInviterId() int64 {
	return p.InviterId
}

func (p *MemberRelation) GetInviterStr() string {
	return p.InviterStr
}

func (p *MemberRelation) GetRegisterMchId() int32 {
	return p.RegisterMchId
}
func (p *MemberRelation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberRelation) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *MemberRelation) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CardId = v
	}
	return nil
}

func (p *MemberRelation) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.InviterId = v
	}
	return nil
}

func (p *MemberRelation) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.InviterStr = v
	}
	return nil
}

func (p *MemberRelation) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.RegisterMchId = v
	}
	return nil
}

func (p *MemberRelation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MemberRelation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberRelation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MemberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MemberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MemberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MemberId: ", p), err)
	}
	return err
}

func (p *MemberRelation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CardId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:CardId: ", p), err)
	}
	if err := oprot.WriteString(string(p.CardId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CardId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:CardId: ", p), err)
	}
	return err
}

func (p *MemberRelation) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("InviterId", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:InviterId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.InviterId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.InviterId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:InviterId: ", p), err)
	}
	return err
}

func (p *MemberRelation) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("InviterStr", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:InviterStr: ", p), err)
	}
	if err := oprot.WriteString(string(p.InviterStr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.InviterStr (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:InviterStr: ", p), err)
	}
	return err
}

func (p *MemberRelation) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RegisterMchId", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:RegisterMchId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RegisterMchId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RegisterMchId (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:RegisterMchId: ", p), err)
	}
	return err
}

func (p *MemberRelation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberRelation(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - RealName
//  - CardId
//  - TrustImage
//  - Reviewed
//  - ReviewTime
//  - Remark
//  - UpdateTime
type TrustedInfo struct {
	MemberId   int64  `thrift:"MemberId,1" json:"MemberId"`
	RealName   string `thrift:"RealName,2" json:"RealName"`
	CardId     string `thrift:"CardId,3" json:"CardId"`
	TrustImage string `thrift:"TrustImage,4" json:"TrustImage"`
	Reviewed   int32  `thrift:"Reviewed,5" json:"Reviewed"`
	ReviewTime int64  `thrift:"ReviewTime,6" json:"ReviewTime"`
	Remark     string `thrift:"Remark,7" json:"Remark"`
	UpdateTime int64  `thrift:"UpdateTime,8" json:"UpdateTime"`
}

func NewTrustedInfo() *TrustedInfo {
	return &TrustedInfo{}
}

func (p *TrustedInfo) GetMemberId() int64 {
	return p.MemberId
}

func (p *TrustedInfo) GetRealName() string {
	return p.RealName
}

func (p *TrustedInfo) GetCardId() string {
	return p.CardId
}

func (p *TrustedInfo) GetTrustImage() string {
	return p.TrustImage
}

func (p *TrustedInfo) GetReviewed() int32 {
	return p.Reviewed
}

func (p *TrustedInfo) GetReviewTime() int64 {
	return p.ReviewTime
}

func (p *TrustedInfo) GetRemark() string {
	return p.Remark
}

func (p *TrustedInfo) GetUpdateTime() int64 {
	return p.UpdateTime
}
func (p *TrustedInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TrustedInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *TrustedInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RealName = v
	}
	return nil
}

func (p *TrustedInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CardId = v
	}
	return nil
}

func (p *TrustedInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TrustImage = v
	}
	return nil
}

func (p *TrustedInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Reviewed = v
	}
	return nil
}

func (p *TrustedInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ReviewTime = v
	}
	return nil
}

func (p *TrustedInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Remark = v
	}
	return nil
}

func (p *TrustedInfo) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *TrustedInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TrustedInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TrustedInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MemberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MemberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MemberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MemberId: ", p), err)
	}
	return err
}

func (p *TrustedInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RealName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RealName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RealName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RealName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RealName: ", p), err)
	}
	return err
}

func (p *TrustedInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CardId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:CardId: ", p), err)
	}
	if err := oprot.WriteString(string(p.CardId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CardId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:CardId: ", p), err)
	}
	return err
}

func (p *TrustedInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TrustImage", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:TrustImage: ", p), err)
	}
	if err := oprot.WriteString(string(p.TrustImage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TrustImage (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:TrustImage: ", p), err)
	}
	return err
}

func (p *TrustedInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Reviewed", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Reviewed: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Reviewed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Reviewed (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Reviewed: ", p), err)
	}
	return err
}

func (p *TrustedInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ReviewTime", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ReviewTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ReviewTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ReviewTime (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ReviewTime: ", p), err)
	}
	return err
}

func (p *TrustedInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Remark", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Remark: ", p), err)
	}
	if err := oprot.WriteString(string(p.Remark)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Remark (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Remark: ", p), err)
	}
	return err
}

func (p *TrustedInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:UpdateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:UpdateTime: ", p), err)
	}
	return err
}

func (p *TrustedInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrustedInfo(%+v)", *p)
}

// Attributes:
//  - ID
//  - MemberId
//  - RealName
//  - Phone
//  - Province
//  - City
//  - District
//  - Area
//  - Address
//  - IsDefault
type Address struct {
	ID        int64  `thrift:"ID,1" json:"ID"`
	MemberId  int64  `thrift:"MemberId,2" json:"MemberId"`
	RealName  string `thrift:"RealName,3" json:"RealName"`
	Phone     string `thrift:"Phone,4" json:"Phone"`
	Province  int32  `thrift:"Province,5" json:"Province"`
	City      int32  `thrift:"City,6" json:"City"`
	District  int32  `thrift:"District,7" json:"District"`
	Area      string `thrift:"Area,8" json:"Area"`
	Address   string `thrift:"Address,9" json:"Address"`
	IsDefault int32  `thrift:"IsDefault,10" json:"IsDefault"`
}

func NewAddress() *Address {
	return &Address{}
}

func (p *Address) GetID() int64 {
	return p.ID
}

func (p *Address) GetMemberId() int64 {
	return p.MemberId
}

func (p *Address) GetRealName() string {
	return p.RealName
}

func (p *Address) GetPhone() string {
	return p.Phone
}

func (p *Address) GetProvince() int32 {
	return p.Province
}

func (p *Address) GetCity() int32 {
	return p.City
}

func (p *Address) GetDistrict() int32 {
	return p.District
}

func (p *Address) GetArea() string {
	return p.Area
}

func (p *Address) GetAddress() string {
	return p.Address
}

func (p *Address) GetIsDefault() int32 {
	return p.IsDefault
}
func (p *Address) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Address) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Address) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *Address) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RealName = v
	}
	return nil
}

func (p *Address) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *Address) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Province = v
	}
	return nil
}

func (p *Address) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.City = v
	}
	return nil
}

func (p *Address) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.District = v
	}
	return nil
}

func (p *Address) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Area = v
	}
	return nil
}

func (p *Address) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Address = v
	}
	return nil
}

func (p *Address) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.IsDefault = v
	}
	return nil
}

func (p *Address) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Address"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Address) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Address) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MemberId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:MemberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MemberId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:MemberId: ", p), err)
	}
	return err
}

func (p *Address) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RealName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:RealName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RealName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RealName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:RealName: ", p), err)
	}
	return err
}

func (p *Address) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Phone", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Phone (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Phone: ", p), err)
	}
	return err
}

func (p *Address) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Province", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Province: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Province)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Province (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Province: ", p), err)
	}
	return err
}

func (p *Address) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("City", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:City: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.City)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.City (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:City: ", p), err)
	}
	return err
}

func (p *Address) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("District", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:District: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.District)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.District (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:District: ", p), err)
	}
	return err
}

func (p *Address) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Area", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Area: ", p), err)
	}
	if err := oprot.WriteString(string(p.Area)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Area (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Area: ", p), err)
	}
	return err
}

func (p *Address) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Address", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:Address: ", p), err)
	}
	if err := oprot.WriteString(string(p.Address)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Address (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:Address: ", p), err)
	}
	return err
}

func (p *Address) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IsDefault", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:IsDefault: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsDefault)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IsDefault (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:IsDefault: ", p), err)
	}
	return err
}

func (p *Address) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Address(%+v)", *p)
}

// Attributes:
//  - ID
//  - ParentId
//  - ProModel
//  - Priority
//  - Name
//  - VirtualCat
//  - CatUrl
//  - Icon
//  - IconXY
//  - SortNum
//  - FloorShow
//  - Enabled
//  - Level
//  - CreateTime
//  - Children
type Category struct {
	ID         int32       `thrift:"ID,1" json:"ID"`
	ParentId   int32       `thrift:"ParentId,2" json:"ParentId"`
	ProModel   int32       `thrift:"ProModel,3" json:"ProModel"`
	Priority   int32       `thrift:"Priority,4" json:"Priority"`
	Name       string      `thrift:"Name,5" json:"Name"`
	VirtualCat int32       `thrift:"VirtualCat,6" json:"VirtualCat"`
	CatUrl     string      `thrift:"CatUrl,7" json:"CatUrl"`
	Icon       string      `thrift:"Icon,8" json:"Icon"`
	IconXY     string      `thrift:"IconXY,9" json:"IconXY"`
	SortNum    int32       `thrift:"SortNum,10" json:"SortNum"`
	FloorShow  int32       `thrift:"FloorShow,11" json:"FloorShow"`
	Enabled    int32       `thrift:"Enabled,12" json:"Enabled"`
	Level      int32       `thrift:"Level,13" json:"Level"`
	CreateTime int64       `thrift:"CreateTime,14" json:"CreateTime"`
	Children   []*Category `thrift:"Children,15" json:"Children"`
}

func NewCategory() *Category {
	return &Category{}
}

func (p *Category) GetID() int32 {
	return p.ID
}

func (p *Category) GetParentId() int32 {
	return p.ParentId
}

func (p *Category) GetProModel() int32 {
	return p.ProModel
}

func (p *Category) GetPriority() int32 {
	return p.Priority
}

func (p *Category) GetName() string {
	return p.Name
}

func (p *Category) GetVirtualCat() int32 {
	return p.VirtualCat
}

func (p *Category) GetCatUrl() string {
	return p.CatUrl
}

func (p *Category) GetIcon() string {
	return p.Icon
}

func (p *Category) GetIconXY() string {
	return p.IconXY
}

func (p *Category) GetSortNum() int32 {
	return p.SortNum
}

func (p *Category) GetFloorShow() int32 {
	return p.FloorShow
}

func (p *Category) GetEnabled() int32 {
	return p.Enabled
}

func (p *Category) GetLevel() int32 {
	return p.Level
}

func (p *Category) GetCreateTime() int64 {
	return p.CreateTime
}

func (p *Category) GetChildren() []*Category {
	return p.Children
}
func (p *Category) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Category) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Category) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ParentId = v
	}
	return nil
}

func (p *Category) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ProModel = v
	}
	return nil
}

func (p *Category) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Priority = v
	}
	return nil
}

func (p *Category) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Category) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.VirtualCat = v
	}
	return nil
}

func (p *Category) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.CatUrl = v
	}
	return nil
}

func (p *Category) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Icon = v
	}
	return nil
}

func (p *Category) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.IconXY = v
	}
	return nil
}

func (p *Category) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.SortNum = v
	}
	return nil
}

func (p *Category) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.FloorShow = v
	}
	return nil
}

func (p *Category) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Enabled = v
	}
	return nil
}

func (p *Category) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Level = v
	}
	return nil
}

func (p *Category) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *Category) readField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Category, 0, size)
	p.Children = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &Category{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Children = append(p.Children, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Category) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Category"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Category) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Category) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ParentId", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ParentId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ParentId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ParentId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ParentId: ", p), err)
	}
	return err
}

func (p *Category) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProModel", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ProModel: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProModel)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ProModel (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ProModel: ", p), err)
	}
	return err
}

func (p *Category) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Priority", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Priority: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Priority)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Priority (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Priority: ", p), err)
	}
	return err
}

func (p *Category) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Name: ", p), err)
	}
	return err
}

func (p *Category) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VirtualCat", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:VirtualCat: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VirtualCat)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.VirtualCat (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:VirtualCat: ", p), err)
	}
	return err
}

func (p *Category) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CatUrl", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:CatUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.CatUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CatUrl (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:CatUrl: ", p), err)
	}
	return err
}

func (p *Category) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Icon", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Icon: ", p), err)
	}
	if err := oprot.WriteString(string(p.Icon)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Icon (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Icon: ", p), err)
	}
	return err
}

func (p *Category) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IconXY", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:IconXY: ", p), err)
	}
	if err := oprot.WriteString(string(p.IconXY)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IconXY (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:IconXY: ", p), err)
	}
	return err
}

func (p *Category) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SortNum", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:SortNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SortNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SortNum (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:SortNum: ", p), err)
	}
	return err
}

func (p *Category) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FloorShow", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:FloorShow: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FloorShow)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FloorShow (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:FloorShow: ", p), err)
	}
	return err
}

func (p *Category) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Enabled", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:Enabled: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Enabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Enabled (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:Enabled: ", p), err)
	}
	return err
}

func (p *Category) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Level", thrift.I32, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:Level: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Level)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Level (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:Level: ", p), err)
	}
	return err
}

func (p *Category) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:CreateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CreateTime (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:CreateTime: ", p), err)
	}
	return err
}

func (p *Category) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Children", thrift.LIST, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:Children: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Children)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Children {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:Children: ", p), err)
	}
	return err
}

func (p *Category) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Category(%+v)", *p)
}

// Attributes:
//  - ItemId
//  - ProductId
//  - PromFlag
//  - CatId
//  - VendorId
//  - BrandId
//  - ShopId
//  - ShopCatId
//  - ExpressTid
//  - Title
//  - ShortTitle
//  - Code
//  - Image
//  - IsPresent
//  - PriceRange
//  - StockNum
//  - SaleNum
//  - SkuNum
//  - SkuId
//  - Cost
//  - Price
//  - RetailPrice
//  - Weight
//  - Bulk
//  - ShelveState
//  - ReviewState
//  - ReviewRemark
//  - SortNum
//  - CreateTime
//  - UpdateTime
//  - PromPrice
//  - SkuArray
//  - Data
type Item struct {
	ItemId       int32             `thrift:"ItemId,1" json:"ItemId"`
	ProductId    int32             `thrift:"ProductId,2" json:"ProductId"`
	PromFlag     int32             `thrift:"PromFlag,3" json:"PromFlag"`
	CatId        int32             `thrift:"CatId,4" json:"CatId"`
	VendorId     int32             `thrift:"VendorId,5" json:"VendorId"`
	BrandId      int32             `thrift:"BrandId,6" json:"BrandId"`
	ShopId       int32             `thrift:"ShopId,7" json:"ShopId"`
	ShopCatId    int32             `thrift:"ShopCatId,8" json:"ShopCatId"`
	ExpressTid   int32             `thrift:"ExpressTid,9" json:"ExpressTid"`
	Title        string            `thrift:"Title,10" json:"Title"`
	ShortTitle   string            `thrift:"ShortTitle,11" json:"ShortTitle"`
	Code         string            `thrift:"Code,12" json:"Code"`
	Image        string            `thrift:"Image,13" json:"Image"`
	IsPresent    int32             `thrift:"IsPresent,14" json:"IsPresent"`
	PriceRange   string            `thrift:"PriceRange,15" json:"PriceRange"`
	StockNum     int32             `thrift:"StockNum,16" json:"StockNum"`
	SaleNum      int32             `thrift:"SaleNum,17" json:"SaleNum"`
	SkuNum       int32             `thrift:"SkuNum,18" json:"SkuNum"`
	SkuId        int32             `thrift:"SkuId,19" json:"SkuId"`
	Cost         float64           `thrift:"Cost,20" json:"Cost"`
	Price        float64           `thrift:"Price,21" json:"Price"`
	RetailPrice  float64           `thrift:"RetailPrice,22" json:"RetailPrice"`
	Weight       int32             `thrift:"Weight,23" json:"Weight"`
	Bulk         int32             `thrift:"Bulk,24" json:"Bulk"`
	ShelveState  int32             `thrift:"ShelveState,25" json:"ShelveState"`
	ReviewState  int32             `thrift:"ReviewState,26" json:"ReviewState"`
	ReviewRemark string            `thrift:"ReviewRemark,27" json:"ReviewRemark"`
	SortNum      int32             `thrift:"SortNum,28" json:"SortNum"`
	CreateTime   int64             `thrift:"CreateTime,29" json:"CreateTime"`
	UpdateTime   int64             `thrift:"UpdateTime,30" json:"UpdateTime"`
	PromPrice    float64           `thrift:"PromPrice,31" json:"PromPrice"`
	SkuArray     []*Sku            `thrift:"SkuArray,32" json:"SkuArray"`
	Data         map[string]string `thrift:"Data,33" json:"Data"`
}

func NewItem() *Item {
	return &Item{}
}

func (p *Item) GetItemId() int32 {
	return p.ItemId
}

func (p *Item) GetProductId() int32 {
	return p.ProductId
}

func (p *Item) GetPromFlag() int32 {
	return p.PromFlag
}

func (p *Item) GetCatId() int32 {
	return p.CatId
}

func (p *Item) GetVendorId() int32 {
	return p.VendorId
}

func (p *Item) GetBrandId() int32 {
	return p.BrandId
}

func (p *Item) GetShopId() int32 {
	return p.ShopId
}

func (p *Item) GetShopCatId() int32 {
	return p.ShopCatId
}

func (p *Item) GetExpressTid() int32 {
	return p.ExpressTid
}

func (p *Item) GetTitle() string {
	return p.Title
}

func (p *Item) GetShortTitle() string {
	return p.ShortTitle
}

func (p *Item) GetCode() string {
	return p.Code
}

func (p *Item) GetImage() string {
	return p.Image
}

func (p *Item) GetIsPresent() int32 {
	return p.IsPresent
}

func (p *Item) GetPriceRange() string {
	return p.PriceRange
}

func (p *Item) GetStockNum() int32 {
	return p.StockNum
}

func (p *Item) GetSaleNum() int32 {
	return p.SaleNum
}

func (p *Item) GetSkuNum() int32 {
	return p.SkuNum
}

func (p *Item) GetSkuId() int32 {
	return p.SkuId
}

func (p *Item) GetCost() float64 {
	return p.Cost
}

func (p *Item) GetPrice() float64 {
	return p.Price
}

func (p *Item) GetRetailPrice() float64 {
	return p.RetailPrice
}

func (p *Item) GetWeight() int32 {
	return p.Weight
}

func (p *Item) GetBulk() int32 {
	return p.Bulk
}

func (p *Item) GetShelveState() int32 {
	return p.ShelveState
}

func (p *Item) GetReviewState() int32 {
	return p.ReviewState
}

func (p *Item) GetReviewRemark() string {
	return p.ReviewRemark
}

func (p *Item) GetSortNum() int32 {
	return p.SortNum
}

func (p *Item) GetCreateTime() int64 {
	return p.CreateTime
}

func (p *Item) GetUpdateTime() int64 {
	return p.UpdateTime
}

func (p *Item) GetPromPrice() float64 {
	return p.PromPrice
}

func (p *Item) GetSkuArray() []*Sku {
	return p.SkuArray
}

func (p *Item) GetData() map[string]string {
	return p.Data
}
func (p *Item) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.readField27(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.readField28(iprot); err != nil {
				return err
			}
		case 29:
			if err := p.readField29(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.readField30(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.readField31(iprot); err != nil {
				return err
			}
		case 32:
			if err := p.readField32(iprot); err != nil {
				return err
			}
		case 33:
			if err := p.readField33(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Item) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ItemId = v
	}
	return nil
}

func (p *Item) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ProductId = v
	}
	return nil
}

func (p *Item) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PromFlag = v
	}
	return nil
}

func (p *Item) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CatId = v
	}
	return nil
}

func (p *Item) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.VendorId = v
	}
	return nil
}

func (p *Item) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.BrandId = v
	}
	return nil
}

func (p *Item) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ShopId = v
	}
	return nil
}

func (p *Item) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.ShopCatId = v
	}
	return nil
}

func (p *Item) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.ExpressTid = v
	}
	return nil
}

func (p *Item) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *Item) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.ShortTitle = v
	}
	return nil
}

func (p *Item) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *Item) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Image = v
	}
	return nil
}

func (p *Item) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.IsPresent = v
	}
	return nil
}

func (p *Item) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.PriceRange = v
	}
	return nil
}

func (p *Item) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.StockNum = v
	}
	return nil
}

func (p *Item) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.SaleNum = v
	}
	return nil
}

func (p *Item) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.SkuNum = v
	}
	return nil
}

func (p *Item) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.SkuId = v
	}
	return nil
}

func (p *Item) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.Cost = v
	}
	return nil
}

func (p *Item) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *Item) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.RetailPrice = v
	}
	return nil
}

func (p *Item) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.Weight = v
	}
	return nil
}

func (p *Item) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.Bulk = v
	}
	return nil
}

func (p *Item) readField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.ShelveState = v
	}
	return nil
}

func (p *Item) readField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.ReviewState = v
	}
	return nil
}

func (p *Item) readField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		p.ReviewRemark = v
	}
	return nil
}

func (p *Item) readField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		p.SortNum = v
	}
	return nil
}

func (p *Item) readField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 29: ", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *Item) readField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *Item) readField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		p.PromPrice = v
	}
	return nil
}

func (p *Item) readField32(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Sku, 0, size)
	p.SkuArray = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &Sku{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.SkuArray = append(p.SkuArray, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Item) readField33(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Data = tMap
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key4 = v
		}
		var _val5 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val5 = v
		}
		p.Data[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Item) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Item"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := p.writeField29(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := p.writeField31(oprot); err != nil {
		return err
	}
	if err := p.writeField32(oprot); err != nil {
		return err
	}
	if err := p.writeField33(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Item) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ItemId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ItemId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ItemId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ItemId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ItemId: ", p), err)
	}
	return err
}

func (p *Item) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProductId", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ProductId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProductId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ProductId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ProductId: ", p), err)
	}
	return err
}

func (p *Item) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PromFlag", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:PromFlag: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PromFlag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PromFlag (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:PromFlag: ", p), err)
	}
	return err
}

func (p *Item) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CatId", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:CatId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CatId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CatId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:CatId: ", p), err)
	}
	return err
}

func (p *Item) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VendorId", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:VendorId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VendorId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.VendorId (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:VendorId: ", p), err)
	}
	return err
}

func (p *Item) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BrandId", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:BrandId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BrandId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BrandId (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:BrandId: ", p), err)
	}
	return err
}

func (p *Item) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ShopId", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ShopId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ShopId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ShopId (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ShopId: ", p), err)
	}
	return err
}

func (p *Item) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ShopCatId", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:ShopCatId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ShopCatId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ShopCatId (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:ShopCatId: ", p), err)
	}
	return err
}

func (p *Item) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExpressTid", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ExpressTid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ExpressTid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ExpressTid (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ExpressTid: ", p), err)
	}
	return err
}

func (p *Item) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Title", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Title (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Title: ", p), err)
	}
	return err
}

func (p *Item) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ShortTitle", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:ShortTitle: ", p), err)
	}
	if err := oprot.WriteString(string(p.ShortTitle)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ShortTitle (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:ShortTitle: ", p), err)
	}
	return err
}

func (p *Item) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Code", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:Code: ", p), err)
	}
	if err := oprot.WriteString(string(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Code (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:Code: ", p), err)
	}
	return err
}

func (p *Item) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Image", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:Image: ", p), err)
	}
	if err := oprot.WriteString(string(p.Image)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Image (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:Image: ", p), err)
	}
	return err
}

func (p *Item) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IsPresent", thrift.I32, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:IsPresent: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsPresent)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IsPresent (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:IsPresent: ", p), err)
	}
	return err
}

func (p *Item) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PriceRange", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:PriceRange: ", p), err)
	}
	if err := oprot.WriteString(string(p.PriceRange)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PriceRange (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:PriceRange: ", p), err)
	}
	return err
}

func (p *Item) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("StockNum", thrift.I32, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:StockNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StockNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.StockNum (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:StockNum: ", p), err)
	}
	return err
}

func (p *Item) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SaleNum", thrift.I32, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:SaleNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SaleNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SaleNum (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:SaleNum: ", p), err)
	}
	return err
}

func (p *Item) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SkuNum", thrift.I32, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:SkuNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SkuNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SkuNum (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:SkuNum: ", p), err)
	}
	return err
}

func (p *Item) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SkuId", thrift.I32, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:SkuId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SkuId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SkuId (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:SkuId: ", p), err)
	}
	return err
}

func (p *Item) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Cost", thrift.DOUBLE, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:Cost: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Cost)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Cost (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:Cost: ", p), err)
	}
	return err
}

func (p *Item) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Price", thrift.DOUBLE, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:Price: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Price)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Price (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:Price: ", p), err)
	}
	return err
}

func (p *Item) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RetailPrice", thrift.DOUBLE, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:RetailPrice: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.RetailPrice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RetailPrice (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:RetailPrice: ", p), err)
	}
	return err
}

func (p *Item) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Weight", thrift.I32, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:Weight: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Weight)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Weight (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:Weight: ", p), err)
	}
	return err
}

func (p *Item) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Bulk", thrift.I32, 24); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:Bulk: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Bulk)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Bulk (24) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 24:Bulk: ", p), err)
	}
	return err
}

func (p *Item) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ShelveState", thrift.I32, 25); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:ShelveState: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ShelveState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ShelveState (25) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 25:ShelveState: ", p), err)
	}
	return err
}

func (p *Item) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ReviewState", thrift.I32, 26); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:ReviewState: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReviewState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ReviewState (26) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 26:ReviewState: ", p), err)
	}
	return err
}

func (p *Item) writeField27(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ReviewRemark", thrift.STRING, 27); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:ReviewRemark: ", p), err)
	}
	if err := oprot.WriteString(string(p.ReviewRemark)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ReviewRemark (27) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 27:ReviewRemark: ", p), err)
	}
	return err
}

func (p *Item) writeField28(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SortNum", thrift.I32, 28); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:SortNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SortNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SortNum (28) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 28:SortNum: ", p), err)
	}
	return err
}

func (p *Item) writeField29(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 29); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:CreateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CreateTime (29) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 29:CreateTime: ", p), err)
	}
	return err
}

func (p *Item) writeField30(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 30); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:UpdateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (30) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 30:UpdateTime: ", p), err)
	}
	return err
}

func (p *Item) writeField31(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PromPrice", thrift.DOUBLE, 31); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:PromPrice: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.PromPrice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PromPrice (31) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 31:PromPrice: ", p), err)
	}
	return err
}

func (p *Item) writeField32(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SkuArray", thrift.LIST, 32); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:SkuArray: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SkuArray)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SkuArray {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 32:SkuArray: ", p), err)
	}
	return err
}

func (p *Item) writeField33(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Data", thrift.MAP, 33); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:Data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Data {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 33:Data: ", p), err)
	}
	return err
}

func (p *Item) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Item(%+v)", *p)
}

// Attributes:
//  - SkuId
//  - ItemId
//  - ProductId
//  - Title
//  - Image
//  - SpecData
//  - SpecWord
//  - Code
//  - RetailPrice
//  - Price
//  - Cost
//  - Weight
//  - Bulk
//  - Stock
//  - SaleNum
type Sku struct {
	SkuId       int32   `thrift:"SkuId,1" json:"SkuId"`
	ItemId      int32   `thrift:"ItemId,2" json:"ItemId"`
	ProductId   int32   `thrift:"ProductId,3" json:"ProductId"`
	Title       string  `thrift:"Title,4" json:"Title"`
	Image       string  `thrift:"Image,5" json:"Image"`
	SpecData    string  `thrift:"SpecData,6" json:"SpecData"`
	SpecWord    string  `thrift:"SpecWord,7" json:"SpecWord"`
	Code        string  `thrift:"Code,8" json:"Code"`
	RetailPrice float64 `thrift:"RetailPrice,9" json:"RetailPrice"`
	Price       float64 `thrift:"Price,10" json:"Price"`
	Cost        float64 `thrift:"Cost,11" json:"Cost"`
	Weight      int32   `thrift:"Weight,12" json:"Weight"`
	Bulk        int32   `thrift:"Bulk,13" json:"Bulk"`
	Stock       int32   `thrift:"Stock,14" json:"Stock"`
	SaleNum     int32   `thrift:"SaleNum,15" json:"SaleNum"`
}

func NewSku() *Sku {
	return &Sku{}
}

func (p *Sku) GetSkuId() int32 {
	return p.SkuId
}

func (p *Sku) GetItemId() int32 {
	return p.ItemId
}

func (p *Sku) GetProductId() int32 {
	return p.ProductId
}

func (p *Sku) GetTitle() string {
	return p.Title
}

func (p *Sku) GetImage() string {
	return p.Image
}

func (p *Sku) GetSpecData() string {
	return p.SpecData
}

func (p *Sku) GetSpecWord() string {
	return p.SpecWord
}

func (p *Sku) GetCode() string {
	return p.Code
}

func (p *Sku) GetRetailPrice() float64 {
	return p.RetailPrice
}

func (p *Sku) GetPrice() float64 {
	return p.Price
}

func (p *Sku) GetCost() float64 {
	return p.Cost
}

func (p *Sku) GetWeight() int32 {
	return p.Weight
}

func (p *Sku) GetBulk() int32 {
	return p.Bulk
}

func (p *Sku) GetStock() int32 {
	return p.Stock
}

func (p *Sku) GetSaleNum() int32 {
	return p.SaleNum
}
func (p *Sku) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Sku) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SkuId = v
	}
	return nil
}

func (p *Sku) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ItemId = v
	}
	return nil
}

func (p *Sku) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ProductId = v
	}
	return nil
}

func (p *Sku) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *Sku) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Image = v
	}
	return nil
}

func (p *Sku) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SpecData = v
	}
	return nil
}

func (p *Sku) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SpecWord = v
	}
	return nil
}

func (p *Sku) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *Sku) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.RetailPrice = v
	}
	return nil
}

func (p *Sku) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *Sku) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Cost = v
	}
	return nil
}

func (p *Sku) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Weight = v
	}
	return nil
}

func (p *Sku) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Bulk = v
	}
	return nil
}

func (p *Sku) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Stock = v
	}
	return nil
}

func (p *Sku) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.SaleNum = v
	}
	return nil
}

func (p *Sku) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Sku"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Sku) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SkuId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:SkuId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SkuId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SkuId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:SkuId: ", p), err)
	}
	return err
}

func (p *Sku) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ItemId", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ItemId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ItemId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ItemId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ItemId: ", p), err)
	}
	return err
}

func (p *Sku) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProductId", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ProductId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProductId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ProductId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ProductId: ", p), err)
	}
	return err
}

func (p *Sku) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Title", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Title (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Title: ", p), err)
	}
	return err
}

func (p *Sku) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Image", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Image: ", p), err)
	}
	if err := oprot.WriteString(string(p.Image)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Image (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Image: ", p), err)
	}
	return err
}

func (p *Sku) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SpecData", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:SpecData: ", p), err)
	}
	if err := oprot.WriteString(string(p.SpecData)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SpecData (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:SpecData: ", p), err)
	}
	return err
}

func (p *Sku) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SpecWord", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:SpecWord: ", p), err)
	}
	if err := oprot.WriteString(string(p.SpecWord)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SpecWord (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:SpecWord: ", p), err)
	}
	return err
}

func (p *Sku) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Code", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Code: ", p), err)
	}
	if err := oprot.WriteString(string(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Code (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Code: ", p), err)
	}
	return err
}

func (p *Sku) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RetailPrice", thrift.DOUBLE, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:RetailPrice: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.RetailPrice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RetailPrice (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:RetailPrice: ", p), err)
	}
	return err
}

func (p *Sku) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Price", thrift.DOUBLE, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Price: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Price)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Price (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Price: ", p), err)
	}
	return err
}

func (p *Sku) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Cost", thrift.DOUBLE, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:Cost: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Cost)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Cost (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:Cost: ", p), err)
	}
	return err
}

func (p *Sku) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Weight", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:Weight: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Weight)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Weight (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:Weight: ", p), err)
	}
	return err
}

func (p *Sku) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Bulk", thrift.I32, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:Bulk: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Bulk)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Bulk (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:Bulk: ", p), err)
	}
	return err
}

func (p *Sku) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Stock", thrift.I32, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:Stock: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Stock)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Stock (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:Stock: ", p), err)
	}
	return err
}

func (p *Sku) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SaleNum", thrift.I32, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:SaleNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SaleNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SaleNum (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:SaleNum: ", p), err)
	}
	return err
}

func (p *Sku) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Sku(%+v)", *p)
}

// Attributes:
//  - CartId
//  - Code
//  - Shops
type ShoppingCart struct {
	CartId int32                `thrift:"CartId,1" json:"CartId"`
	Code   string               `thrift:"Code,2" json:"Code"`
	Shops  []*ShoppingCartGroup `thrift:"Shops,3" json:"Shops"`
}

func NewShoppingCart() *ShoppingCart {
	return &ShoppingCart{}
}

func (p *ShoppingCart) GetCartId() int32 {
	return p.CartId
}

func (p *ShoppingCart) GetCode() string {
	return p.Code
}

func (p *ShoppingCart) GetShops() []*ShoppingCartGroup {
	return p.Shops
}
func (p *ShoppingCart) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ShoppingCart) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CartId = v
	}
	return nil
}

func (p *ShoppingCart) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *ShoppingCart) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ShoppingCartGroup, 0, size)
	p.Shops = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &ShoppingCartGroup{}
		if err := _elem6.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.Shops = append(p.Shops, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ShoppingCart) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShoppingCart"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShoppingCart) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CartId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:CartId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CartId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CartId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:CartId: ", p), err)
	}
	return err
}

func (p *ShoppingCart) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Code", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Code: ", p), err)
	}
	if err := oprot.WriteString(string(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Code (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Code: ", p), err)
	}
	return err
}

func (p *ShoppingCart) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Shops", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Shops: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Shops)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Shops {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Shops: ", p), err)
	}
	return err
}

func (p *ShoppingCart) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShoppingCart(%+v)", *p)
}

// Attributes:
//  - ShopId
//  - VendorId
//  - ShopName
//  - Checked
//  - Items
type ShoppingCartGroup struct {
	ShopId   int32               `thrift:"ShopId,1" json:"ShopId"`
	VendorId int32               `thrift:"VendorId,2" json:"VendorId"`
	ShopName string              `thrift:"ShopName,3" json:"ShopName"`
	Checked  bool                `thrift:"Checked,4" json:"Checked"`
	Items    []*ShoppingCartItem `thrift:"Items,5" json:"Items"`
}

func NewShoppingCartGroup() *ShoppingCartGroup {
	return &ShoppingCartGroup{}
}

func (p *ShoppingCartGroup) GetShopId() int32 {
	return p.ShopId
}

func (p *ShoppingCartGroup) GetVendorId() int32 {
	return p.VendorId
}

func (p *ShoppingCartGroup) GetShopName() string {
	return p.ShopName
}

func (p *ShoppingCartGroup) GetChecked() bool {
	return p.Checked
}

func (p *ShoppingCartGroup) GetItems() []*ShoppingCartItem {
	return p.Items
}
func (p *ShoppingCartGroup) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ShoppingCartGroup) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ShopId = v
	}
	return nil
}

func (p *ShoppingCartGroup) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.VendorId = v
	}
	return nil
}

func (p *ShoppingCartGroup) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ShopName = v
	}
	return nil
}

func (p *ShoppingCartGroup) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Checked = v
	}
	return nil
}

func (p *ShoppingCartGroup) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ShoppingCartItem, 0, size)
	p.Items = tSlice
	for i := 0; i < size; i++ {
		_elem7 := &ShoppingCartItem{}
		if err := _elem7.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
		}
		p.Items = append(p.Items, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ShoppingCartGroup) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShoppingCartGroup"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShoppingCartGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ShopId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ShopId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ShopId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ShopId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ShopId: ", p), err)
	}
	return err
}

func (p *ShoppingCartGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VendorId", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:VendorId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VendorId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.VendorId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:VendorId: ", p), err)
	}
	return err
}

func (p *ShoppingCartGroup) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ShopName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ShopName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ShopName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ShopName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ShopName: ", p), err)
	}
	return err
}

func (p *ShoppingCartGroup) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Checked", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Checked: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Checked)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Checked (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Checked: ", p), err)
	}
	return err
}

func (p *ShoppingCartGroup) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Items", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Items: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Items: ", p), err)
	}
	return err
}

func (p *ShoppingCartGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShoppingCartGroup(%+v)", *p)
}

// Attributes:
//  - ItemId
//  - SkuId
//  - Title
//  - Image
//  - SpecWord
//  - Code
//  - RetailPrice
//  - Price
//  - Quantity
//  - Checked
//  - StockText
//  - ShopId
type ShoppingCartItem struct {
	ItemId      int32   `thrift:"ItemId,1" json:"ItemId"`
	SkuId       int32   `thrift:"SkuId,2" json:"SkuId"`
	Title       string  `thrift:"Title,3" json:"Title"`
	Image       string  `thrift:"Image,4" json:"Image"`
	SpecWord    string  `thrift:"SpecWord,5" json:"SpecWord"`
	Code        string  `thrift:"Code,6" json:"Code"`
	RetailPrice float64 `thrift:"RetailPrice,7" json:"RetailPrice"`
	Price       float64 `thrift:"Price,8" json:"Price"`
	Quantity    int32   `thrift:"Quantity,9" json:"Quantity"`
	Checked     bool    `thrift:"Checked,10" json:"Checked"`
	StockText   string  `thrift:"StockText,11" json:"StockText"`
	ShopId      int32   `thrift:"ShopId,12" json:"ShopId"`
}

func NewShoppingCartItem() *ShoppingCartItem {
	return &ShoppingCartItem{}
}

func (p *ShoppingCartItem) GetItemId() int32 {
	return p.ItemId
}

func (p *ShoppingCartItem) GetSkuId() int32 {
	return p.SkuId
}

func (p *ShoppingCartItem) GetTitle() string {
	return p.Title
}

func (p *ShoppingCartItem) GetImage() string {
	return p.Image
}

func (p *ShoppingCartItem) GetSpecWord() string {
	return p.SpecWord
}

func (p *ShoppingCartItem) GetCode() string {
	return p.Code
}

func (p *ShoppingCartItem) GetRetailPrice() float64 {
	return p.RetailPrice
}

func (p *ShoppingCartItem) GetPrice() float64 {
	return p.Price
}

func (p *ShoppingCartItem) GetQuantity() int32 {
	return p.Quantity
}

func (p *ShoppingCartItem) GetChecked() bool {
	return p.Checked
}

func (p *ShoppingCartItem) GetStockText() string {
	return p.StockText
}

func (p *ShoppingCartItem) GetShopId() int32 {
	return p.ShopId
}
func (p *ShoppingCartItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ShoppingCartItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ItemId = v
	}
	return nil
}

func (p *ShoppingCartItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SkuId = v
	}
	return nil
}

func (p *ShoppingCartItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *ShoppingCartItem) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Image = v
	}
	return nil
}

func (p *ShoppingCartItem) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SpecWord = v
	}
	return nil
}

func (p *ShoppingCartItem) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *ShoppingCartItem) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.RetailPrice = v
	}
	return nil
}

func (p *ShoppingCartItem) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *ShoppingCartItem) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Quantity = v
	}
	return nil
}

func (p *ShoppingCartItem) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Checked = v
	}
	return nil
}

func (p *ShoppingCartItem) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.StockText = v
	}
	return nil
}

func (p *ShoppingCartItem) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.ShopId = v
	}
	return nil
}

func (p *ShoppingCartItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShoppingCartItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShoppingCartItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ItemId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ItemId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ItemId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ItemId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ItemId: ", p), err)
	}
	return err
}

func (p *ShoppingCartItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SkuId", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:SkuId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SkuId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SkuId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:SkuId: ", p), err)
	}
	return err
}

func (p *ShoppingCartItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Title", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Title (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Title: ", p), err)
	}
	return err
}

func (p *ShoppingCartItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Image", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Image: ", p), err)
	}
	if err := oprot.WriteString(string(p.Image)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Image (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Image: ", p), err)
	}
	return err
}

func (p *ShoppingCartItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SpecWord", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:SpecWord: ", p), err)
	}
	if err := oprot.WriteString(string(p.SpecWord)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SpecWord (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:SpecWord: ", p), err)
	}
	return err
}

func (p *ShoppingCartItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Code", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Code: ", p), err)
	}
	if err := oprot.WriteString(string(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Code (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Code: ", p), err)
	}
	return err
}

func (p *ShoppingCartItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RetailPrice", thrift.DOUBLE, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:RetailPrice: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.RetailPrice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RetailPrice (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:RetailPrice: ", p), err)
	}
	return err
}

func (p *ShoppingCartItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Price", thrift.DOUBLE, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Price: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Price)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Price (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Price: ", p), err)
	}
	return err
}

func (p *ShoppingCartItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Quantity", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:Quantity: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Quantity)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Quantity (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:Quantity: ", p), err)
	}
	return err
}

func (p *ShoppingCartItem) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Checked", thrift.BOOL, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Checked: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Checked)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Checked (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Checked: ", p), err)
	}
	return err
}

func (p *ShoppingCartItem) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("StockText", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:StockText: ", p), err)
	}
	if err := oprot.WriteString(string(p.StockText)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.StockText (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:StockText: ", p), err)
	}
	return err
}

func (p *ShoppingCartItem) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ShopId", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:ShopId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ShopId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ShopId (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:ShopId: ", p), err)
	}
	return err
}

func (p *ShoppingCartItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShoppingCartItem(%+v)", *p)
}

// Attributes:
//  - ID
//  - TradeNo
//  - VendorId
//  - Type
//  - OrderId
//  - Subject
//  - BuyUser
//  - PaymentUser
//  - TotalFee
//  - BalanceDiscount
//  - IntegralDiscount
//  - SystemDiscount
//  - CouponDiscount
//  - SubAmount
//  - AdjustmentAmount
//  - FinalAmount
//  - PaymentOptFlag
//  - PaymentSign
//  - OuterNo
//  - CreateTime
//  - PaidTime
//  - State
type PaymentOrder struct {
	ID               int32   `thrift:"ID,1" json:"ID"`
	TradeNo          string  `thrift:"TradeNo,2" json:"TradeNo"`
	VendorId         int32   `thrift:"VendorId,3" json:"VendorId"`
	Type             int32   `thrift:"Type,4" json:"Type"`
	OrderId          int32   `thrift:"OrderId,5" json:"OrderId"`
	Subject          string  `thrift:"Subject,6" json:"Subject"`
	BuyUser          int64   `thrift:"BuyUser,7" json:"BuyUser"`
	PaymentUser      int64   `thrift:"PaymentUser,8" json:"PaymentUser"`
	TotalFee         float64 `thrift:"TotalFee,9" json:"TotalFee"`
	BalanceDiscount  float64 `thrift:"BalanceDiscount,10" json:"BalanceDiscount"`
	IntegralDiscount float64 `thrift:"IntegralDiscount,11" json:"IntegralDiscount"`
	SystemDiscount   float64 `thrift:"SystemDiscount,12" json:"SystemDiscount"`
	CouponDiscount   float64 `thrift:"CouponDiscount,13" json:"CouponDiscount"`
	SubAmount        float64 `thrift:"SubAmount,14" json:"SubAmount"`
	AdjustmentAmount float64 `thrift:"AdjustmentAmount,15" json:"AdjustmentAmount"`
	FinalAmount      float64 `thrift:"FinalAmount,16" json:"FinalAmount"`
	PaymentOptFlag   int32   `thrift:"PaymentOptFlag,17" json:"PaymentOptFlag"`
	PaymentSign      int32   `thrift:"PaymentSign,18" json:"PaymentSign"`
	OuterNo          string  `thrift:"OuterNo,19" json:"OuterNo"`
	CreateTime       int64   `thrift:"CreateTime,20" json:"CreateTime"`
	PaidTime         int64   `thrift:"PaidTime,21" json:"PaidTime"`
	State            int32   `thrift:"State,22" json:"State"`
}

func NewPaymentOrder() *PaymentOrder {
	return &PaymentOrder{}
}

func (p *PaymentOrder) GetID() int32 {
	return p.ID
}

func (p *PaymentOrder) GetTradeNo() string {
	return p.TradeNo
}

func (p *PaymentOrder) GetVendorId() int32 {
	return p.VendorId
}

func (p *PaymentOrder) GetType() int32 {
	return p.Type
}

func (p *PaymentOrder) GetOrderId() int32 {
	return p.OrderId
}

func (p *PaymentOrder) GetSubject() string {
	return p.Subject
}

func (p *PaymentOrder) GetBuyUser() int64 {
	return p.BuyUser
}

func (p *PaymentOrder) GetPaymentUser() int64 {
	return p.PaymentUser
}

func (p *PaymentOrder) GetTotalFee() float64 {
	return p.TotalFee
}

func (p *PaymentOrder) GetBalanceDiscount() float64 {
	return p.BalanceDiscount
}

func (p *PaymentOrder) GetIntegralDiscount() float64 {
	return p.IntegralDiscount
}

func (p *PaymentOrder) GetSystemDiscount() float64 {
	return p.SystemDiscount
}

func (p *PaymentOrder) GetCouponDiscount() float64 {
	return p.CouponDiscount
}

func (p *PaymentOrder) GetSubAmount() float64 {
	return p.SubAmount
}

func (p *PaymentOrder) GetAdjustmentAmount() float64 {
	return p.AdjustmentAmount
}

func (p *PaymentOrder) GetFinalAmount() float64 {
	return p.FinalAmount
}

func (p *PaymentOrder) GetPaymentOptFlag() int32 {
	return p.PaymentOptFlag
}

func (p *PaymentOrder) GetPaymentSign() int32 {
	return p.PaymentSign
}

func (p *PaymentOrder) GetOuterNo() string {
	return p.OuterNo
}

func (p *PaymentOrder) GetCreateTime() int64 {
	return p.CreateTime
}

func (p *PaymentOrder) GetPaidTime() int64 {
	return p.PaidTime
}

func (p *PaymentOrder) GetState() int32 {
	return p.State
}
func (p *PaymentOrder) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentOrder) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *PaymentOrder) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TradeNo = v
	}
	return nil
}

func (p *PaymentOrder) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.VendorId = v
	}
	return nil
}

func (p *PaymentOrder) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *PaymentOrder) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *PaymentOrder) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Subject = v
	}
	return nil
}

func (p *PaymentOrder) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.BuyUser = v
	}
	return nil
}

func (p *PaymentOrder) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.PaymentUser = v
	}
	return nil
}

func (p *PaymentOrder) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.TotalFee = v
	}
	return nil
}

func (p *PaymentOrder) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.BalanceDiscount = v
	}
	return nil
}

func (p *PaymentOrder) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.IntegralDiscount = v
	}
	return nil
}

func (p *PaymentOrder) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.SystemDiscount = v
	}
	return nil
}

func (p *PaymentOrder) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.CouponDiscount = v
	}
	return nil
}

func (p *PaymentOrder) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.SubAmount = v
	}
	return nil
}

func (p *PaymentOrder) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.AdjustmentAmount = v
	}
	return nil
}

func (p *PaymentOrder) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.FinalAmount = v
	}
	return nil
}

func (p *PaymentOrder) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.PaymentOptFlag = v
	}
	return nil
}

func (p *PaymentOrder) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.PaymentSign = v
	}
	return nil
}

func (p *PaymentOrder) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.OuterNo = v
	}
	return nil
}

func (p *PaymentOrder) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *PaymentOrder) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.PaidTime = v
	}
	return nil
}

func (p *PaymentOrder) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *PaymentOrder) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PaymentOrder"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentOrder) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TradeNo", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:TradeNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.TradeNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TradeNo (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:TradeNo: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VendorId", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:VendorId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VendorId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.VendorId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:VendorId: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Type", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Type (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Type: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrderId", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:OrderId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OrderId (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:OrderId: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Subject", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Subject: ", p), err)
	}
	if err := oprot.WriteString(string(p.Subject)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Subject (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Subject: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BuyUser", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:BuyUser: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BuyUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BuyUser (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:BuyUser: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PaymentUser", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:PaymentUser: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PaymentUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PaymentUser (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:PaymentUser: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalFee", thrift.DOUBLE, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:TotalFee: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.TotalFee)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalFee (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:TotalFee: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BalanceDiscount", thrift.DOUBLE, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:BalanceDiscount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.BalanceDiscount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BalanceDiscount (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:BalanceDiscount: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IntegralDiscount", thrift.DOUBLE, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:IntegralDiscount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.IntegralDiscount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IntegralDiscount (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:IntegralDiscount: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SystemDiscount", thrift.DOUBLE, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:SystemDiscount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.SystemDiscount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SystemDiscount (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:SystemDiscount: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CouponDiscount", thrift.DOUBLE, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:CouponDiscount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.CouponDiscount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CouponDiscount (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:CouponDiscount: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SubAmount", thrift.DOUBLE, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:SubAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.SubAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SubAmount (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:SubAmount: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AdjustmentAmount", thrift.DOUBLE, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:AdjustmentAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.AdjustmentAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.AdjustmentAmount (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:AdjustmentAmount: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FinalAmount", thrift.DOUBLE, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:FinalAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.FinalAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FinalAmount (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:FinalAmount: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PaymentOptFlag", thrift.I32, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:PaymentOptFlag: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PaymentOptFlag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PaymentOptFlag (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:PaymentOptFlag: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PaymentSign", thrift.I32, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:PaymentSign: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PaymentSign)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PaymentSign (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:PaymentSign: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OuterNo", thrift.STRING, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:OuterNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.OuterNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OuterNo (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:OuterNo: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:CreateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CreateTime (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:CreateTime: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PaidTime", thrift.I64, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:PaidTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PaidTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PaidTime (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:PaidTime: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("State", thrift.I32, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:State: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.State (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:State: ", p), err)
	}
	return err
}

func (p *PaymentOrder) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentOrder(%+v)", *p)
}

// Attributes:
//  - ID
//  - OrderId
//  - ItemId
//  - SkuId
//  - SnapshotId
//  - Quantity
//  - ReturnQuantity
//  - Amount
//  - FinalAmount
//  - IsShipped
//  - Data
type ComplexItem struct {
	ID             int64             `thrift:"ID,1" json:"ID"`
	OrderId        int64             `thrift:"OrderId,2" json:"OrderId"`
	ItemId         int64             `thrift:"ItemId,3" json:"ItemId"`
	SkuId          int64             `thrift:"SkuId,4" json:"SkuId"`
	SnapshotId     int64             `thrift:"SnapshotId,5" json:"SnapshotId"`
	Quantity       int32             `thrift:"Quantity,6" json:"Quantity"`
	ReturnQuantity int32             `thrift:"ReturnQuantity,7" json:"ReturnQuantity"`
	Amount         float64           `thrift:"Amount,8" json:"Amount"`
	FinalAmount    float64           `thrift:"FinalAmount,9" json:"FinalAmount"`
	IsShipped      int32             `thrift:"IsShipped,10" json:"IsShipped"`
	Data           map[string]string `thrift:"Data,11" json:"Data"`
}

func NewComplexItem() *ComplexItem {
	return &ComplexItem{}
}

func (p *ComplexItem) GetID() int64 {
	return p.ID
}

func (p *ComplexItem) GetOrderId() int64 {
	return p.OrderId
}

func (p *ComplexItem) GetItemId() int64 {
	return p.ItemId
}

func (p *ComplexItem) GetSkuId() int64 {
	return p.SkuId
}

func (p *ComplexItem) GetSnapshotId() int64 {
	return p.SnapshotId
}

func (p *ComplexItem) GetQuantity() int32 {
	return p.Quantity
}

func (p *ComplexItem) GetReturnQuantity() int32 {
	return p.ReturnQuantity
}

func (p *ComplexItem) GetAmount() float64 {
	return p.Amount
}

func (p *ComplexItem) GetFinalAmount() float64 {
	return p.FinalAmount
}

func (p *ComplexItem) GetIsShipped() int32 {
	return p.IsShipped
}

func (p *ComplexItem) GetData() map[string]string {
	return p.Data
}
func (p *ComplexItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ComplexItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ComplexItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *ComplexItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ItemId = v
	}
	return nil
}

func (p *ComplexItem) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SkuId = v
	}
	return nil
}

func (p *ComplexItem) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SnapshotId = v
	}
	return nil
}

func (p *ComplexItem) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Quantity = v
	}
	return nil
}

func (p *ComplexItem) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ReturnQuantity = v
	}
	return nil
}

func (p *ComplexItem) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *ComplexItem) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.FinalAmount = v
	}
	return nil
}

func (p *ComplexItem) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.IsShipped = v
	}
	return nil
}

func (p *ComplexItem) readField11(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Data = tMap
	for i := 0; i < size; i++ {
		var _key8 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key8 = v
		}
		var _val9 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val9 = v
		}
		p.Data[_key8] = _val9
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ComplexItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ComplexItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ComplexItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrderId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:OrderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OrderId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:OrderId: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ItemId", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ItemId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ItemId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ItemId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ItemId: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SkuId", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SkuId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SkuId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SkuId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SkuId: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SnapshotId", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:SnapshotId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SnapshotId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SnapshotId (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:SnapshotId: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Quantity", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Quantity: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Quantity)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Quantity (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Quantity: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ReturnQuantity", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ReturnQuantity: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReturnQuantity)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ReturnQuantity (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ReturnQuantity: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Amount", thrift.DOUBLE, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Amount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Amount (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Amount: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FinalAmount", thrift.DOUBLE, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:FinalAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.FinalAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FinalAmount (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:FinalAmount: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IsShipped", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:IsShipped: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsShipped)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IsShipped (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:IsShipped: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Data", thrift.MAP, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:Data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Data {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:Data: ", p), err)
	}
	return err
}

func (p *ComplexItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComplexItem(%+v)", *p)
}

// Attributes:
//  - OrderId
//  - SubOrderId
//  - OrderType
//  - OrderNo
//  - BuyerId
//  - VendorId
//  - ShopId
//  - Subject
//  - ItemAmount
//  - DiscountAmount
//  - ExpressFee
//  - PackageFee
//  - FinalAmount
//  - ConsigneePerson
//  - ConsigneePhone
//  - ShippingAddress
//  - BuyerRemark
//  - IsBreak
//  - State
//  - CreateTime
//  - UpdateTime
//  - Items
//  - Data
type ComplexOrder struct {
	OrderId         int64             `thrift:"OrderId,1" json:"OrderId"`
	SubOrderId      int64             `thrift:"SubOrderId,2" json:"SubOrderId"`
	OrderType       int32             `thrift:"OrderType,3" json:"OrderType"`
	OrderNo         string            `thrift:"OrderNo,4" json:"OrderNo"`
	BuyerId         int64             `thrift:"BuyerId,5" json:"BuyerId"`
	VendorId        int32             `thrift:"VendorId,6" json:"VendorId"`
	ShopId          int32             `thrift:"ShopId,7" json:"ShopId"`
	Subject         string            `thrift:"Subject,8" json:"Subject"`
	ItemAmount      float64           `thrift:"ItemAmount,9" json:"ItemAmount"`
	DiscountAmount  float64           `thrift:"DiscountAmount,10" json:"DiscountAmount"`
	ExpressFee      float64           `thrift:"ExpressFee,11" json:"ExpressFee"`
	PackageFee      float64           `thrift:"PackageFee,12" json:"PackageFee"`
	FinalAmount     float64           `thrift:"FinalAmount,13" json:"FinalAmount"`
	ConsigneePerson string            `thrift:"ConsigneePerson,14" json:"ConsigneePerson"`
	ConsigneePhone  string            `thrift:"ConsigneePhone,15" json:"ConsigneePhone"`
	ShippingAddress string            `thrift:"ShippingAddress,16" json:"ShippingAddress"`
	BuyerRemark     string            `thrift:"BuyerRemark,17" json:"BuyerRemark"`
	IsBreak         int32             `thrift:"IsBreak,18" json:"IsBreak"`
	State           int32             `thrift:"State,19" json:"State"`
	CreateTime      int64             `thrift:"CreateTime,20" json:"CreateTime"`
	UpdateTime      int64             `thrift:"UpdateTime,21" json:"UpdateTime"`
	Items           []*ComplexItem    `thrift:"Items,22" json:"Items"`
	Data            map[string]string `thrift:"Data,23" json:"Data"`
}

func NewComplexOrder() *ComplexOrder {
	return &ComplexOrder{}
}

func (p *ComplexOrder) GetOrderId() int64 {
	return p.OrderId
}

func (p *ComplexOrder) GetSubOrderId() int64 {
	return p.SubOrderId
}

func (p *ComplexOrder) GetOrderType() int32 {
	return p.OrderType
}

func (p *ComplexOrder) GetOrderNo() string {
	return p.OrderNo
}

func (p *ComplexOrder) GetBuyerId() int64 {
	return p.BuyerId
}

func (p *ComplexOrder) GetVendorId() int32 {
	return p.VendorId
}

func (p *ComplexOrder) GetShopId() int32 {
	return p.ShopId
}

func (p *ComplexOrder) GetSubject() string {
	return p.Subject
}

func (p *ComplexOrder) GetItemAmount() float64 {
	return p.ItemAmount
}

func (p *ComplexOrder) GetDiscountAmount() float64 {
	return p.DiscountAmount
}

func (p *ComplexOrder) GetExpressFee() float64 {
	return p.ExpressFee
}

func (p *ComplexOrder) GetPackageFee() float64 {
	return p.PackageFee
}

func (p *ComplexOrder) GetFinalAmount() float64 {
	return p.FinalAmount
}

func (p *ComplexOrder) GetConsigneePerson() string {
	return p.ConsigneePerson
}

func (p *ComplexOrder) GetConsigneePhone() string {
	return p.ConsigneePhone
}

func (p *ComplexOrder) GetShippingAddress() string {
	return p.ShippingAddress
}

func (p *ComplexOrder) GetBuyerRemark() string {
	return p.BuyerRemark
}

func (p *ComplexOrder) GetIsBreak() int32 {
	return p.IsBreak
}

func (p *ComplexOrder) GetState() int32 {
	return p.State
}

func (p *ComplexOrder) GetCreateTime() int64 {
	return p.CreateTime
}

func (p *ComplexOrder) GetUpdateTime() int64 {
	return p.UpdateTime
}

func (p *ComplexOrder) GetItems() []*ComplexItem {
	return p.Items
}

func (p *ComplexOrder) GetData() map[string]string {
	return p.Data
}
func (p *ComplexOrder) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ComplexOrder) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *ComplexOrder) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SubOrderId = v
	}
	return nil
}

func (p *ComplexOrder) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OrderType = v
	}
	return nil
}

func (p *ComplexOrder) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.OrderNo = v
	}
	return nil
}

func (p *ComplexOrder) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BuyerId = v
	}
	return nil
}

func (p *ComplexOrder) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.VendorId = v
	}
	return nil
}

func (p *ComplexOrder) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ShopId = v
	}
	return nil
}

func (p *ComplexOrder) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Subject = v
	}
	return nil
}

func (p *ComplexOrder) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.ItemAmount = v
	}
	return nil
}

func (p *ComplexOrder) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.DiscountAmount = v
	}
	return nil
}

func (p *ComplexOrder) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.ExpressFee = v
	}
	return nil
}

func (p *ComplexOrder) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.PackageFee = v
	}
	return nil
}

func (p *ComplexOrder) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.FinalAmount = v
	}
	return nil
}

func (p *ComplexOrder) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.ConsigneePerson = v
	}
	return nil
}

func (p *ComplexOrder) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.ConsigneePhone = v
	}
	return nil
}

func (p *ComplexOrder) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.ShippingAddress = v
	}
	return nil
}

func (p *ComplexOrder) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.BuyerRemark = v
	}
	return nil
}

func (p *ComplexOrder) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.IsBreak = v
	}
	return nil
}

func (p *ComplexOrder) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *ComplexOrder) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *ComplexOrder) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *ComplexOrder) readField22(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ComplexItem, 0, size)
	p.Items = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &ComplexItem{}
		if err := _elem10.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.Items = append(p.Items, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ComplexOrder) readField23(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Data = tMap
	for i := 0; i < size; i++ {
		var _key11 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key11 = v
		}
		var _val12 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val12 = v
		}
		p.Data[_key11] = _val12
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ComplexOrder) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ComplexOrder"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ComplexOrder) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrderId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:OrderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OrderId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:OrderId: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SubOrderId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:SubOrderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SubOrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SubOrderId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:SubOrderId: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrderType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:OrderType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OrderType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OrderType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:OrderType: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrderNo", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:OrderNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OrderNo (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:OrderNo: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BuyerId", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:BuyerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BuyerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BuyerId (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:BuyerId: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VendorId", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:VendorId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VendorId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.VendorId (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:VendorId: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ShopId", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ShopId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ShopId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ShopId (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ShopId: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Subject", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Subject: ", p), err)
	}
	if err := oprot.WriteString(string(p.Subject)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Subject (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Subject: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ItemAmount", thrift.DOUBLE, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ItemAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.ItemAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ItemAmount (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ItemAmount: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DiscountAmount", thrift.DOUBLE, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:DiscountAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.DiscountAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.DiscountAmount (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:DiscountAmount: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExpressFee", thrift.DOUBLE, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:ExpressFee: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.ExpressFee)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ExpressFee (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:ExpressFee: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PackageFee", thrift.DOUBLE, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:PackageFee: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.PackageFee)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PackageFee (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:PackageFee: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FinalAmount", thrift.DOUBLE, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:FinalAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.FinalAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FinalAmount (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:FinalAmount: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ConsigneePerson", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:ConsigneePerson: ", p), err)
	}
	if err := oprot.WriteString(string(p.ConsigneePerson)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ConsigneePerson (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:ConsigneePerson: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ConsigneePhone", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:ConsigneePhone: ", p), err)
	}
	if err := oprot.WriteString(string(p.ConsigneePhone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ConsigneePhone (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:ConsigneePhone: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ShippingAddress", thrift.STRING, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:ShippingAddress: ", p), err)
	}
	if err := oprot.WriteString(string(p.ShippingAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ShippingAddress (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:ShippingAddress: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BuyerRemark", thrift.STRING, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:BuyerRemark: ", p), err)
	}
	if err := oprot.WriteString(string(p.BuyerRemark)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BuyerRemark (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:BuyerRemark: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IsBreak", thrift.I32, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:IsBreak: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsBreak)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IsBreak (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:IsBreak: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("State", thrift.I32, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:State: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.State (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:State: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:CreateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CreateTime (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:CreateTime: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:UpdateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:UpdateTime: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Items", thrift.LIST, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:Items: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:Items: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Data", thrift.MAP, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:Data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Data {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:Data: ", p), err)
	}
	return err
}

func (p *ComplexOrder) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComplexOrder(%+v)", *p)
}

// Attributes:
//  - Suspend
//  - SuspendMessage
//  - MchGoodsCategory
//  - MchPageCategory
type PlatformConf struct {
	Suspend          bool   `thrift:"Suspend,1" json:"Suspend"`
	SuspendMessage   string `thrift:"SuspendMessage,2" json:"SuspendMessage"`
	MchGoodsCategory bool   `thrift:"MchGoodsCategory,3" json:"MchGoodsCategory"`
	MchPageCategory  bool   `thrift:"MchPageCategory,4" json:"MchPageCategory"`
}

func NewPlatformConf() *PlatformConf {
	return &PlatformConf{}
}

func (p *PlatformConf) GetSuspend() bool {
	return p.Suspend
}

func (p *PlatformConf) GetSuspendMessage() string {
	return p.SuspendMessage
}

func (p *PlatformConf) GetMchGoodsCategory() bool {
	return p.MchGoodsCategory
}

func (p *PlatformConf) GetMchPageCategory() bool {
	return p.MchPageCategory
}
func (p *PlatformConf) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PlatformConf) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Suspend = v
	}
	return nil
}

func (p *PlatformConf) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SuspendMessage = v
	}
	return nil
}

func (p *PlatformConf) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MchGoodsCategory = v
	}
	return nil
}

func (p *PlatformConf) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MchPageCategory = v
	}
	return nil
}

func (p *PlatformConf) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PlatformConf"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PlatformConf) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Suspend", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Suspend: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Suspend)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Suspend (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Suspend: ", p), err)
	}
	return err
}

func (p *PlatformConf) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SuspendMessage", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:SuspendMessage: ", p), err)
	}
	if err := oprot.WriteString(string(p.SuspendMessage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SuspendMessage (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:SuspendMessage: ", p), err)
	}
	return err
}

func (p *PlatformConf) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MchGoodsCategory", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:MchGoodsCategory: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.MchGoodsCategory)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MchGoodsCategory (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:MchGoodsCategory: ", p), err)
	}
	return err
}

func (p *PlatformConf) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MchPageCategory", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:MchPageCategory: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.MchPageCategory)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MchPageCategory (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:MchPageCategory: ", p), err)
	}
	return err
}

func (p *PlatformConf) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PlatformConf(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - ApiUrl
//  - Token
type SsoApp struct {
	ID     int32  `thrift:"ID,1" json:"ID"`
	Name   string `thrift:"Name,2" json:"Name"`
	ApiUrl string `thrift:"ApiUrl,3" json:"ApiUrl"`
	Token  string `thrift:"Token,4" json:"Token"`
}

func NewSsoApp() *SsoApp {
	return &SsoApp{}
}

func (p *SsoApp) GetID() int32 {
	return p.ID
}

func (p *SsoApp) GetName() string {
	return p.Name
}

func (p *SsoApp) GetApiUrl() string {
	return p.ApiUrl
}

func (p *SsoApp) GetToken() string {
	return p.Token
}
func (p *SsoApp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SsoApp) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *SsoApp) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *SsoApp) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ApiUrl = v
	}
	return nil
}

func (p *SsoApp) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *SsoApp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SsoApp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SsoApp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *SsoApp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Name: ", p), err)
	}
	return err
}

func (p *SsoApp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ApiUrl", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ApiUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApiUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ApiUrl (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ApiUrl: ", p), err)
	}
	return err
}

func (p *SsoApp) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Token", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Token (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Token: ", p), err)
	}
	return err
}

func (p *SsoApp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SsoApp(%+v)", *p)
}

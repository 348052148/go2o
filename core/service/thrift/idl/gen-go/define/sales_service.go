// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package define

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - ID
//  - OrderId
//  - ItemId
//  - SkuId
//  - SnapshotId
//  - Quantity
//  - ReturnQuantity
//  - Amount
//  - FinalAmount
//  - IsShipped
//  - Data
type ComplexItem struct {
	ID             int64             `thrift:"ID,1" db:"ID" json:"ID"`
	OrderId        int64             `thrift:"OrderId,2" db:"OrderId" json:"OrderId"`
	ItemId         int64             `thrift:"ItemId,3" db:"ItemId" json:"ItemId"`
	SkuId          int64             `thrift:"SkuId,4" db:"SkuId" json:"SkuId"`
	SnapshotId     int64             `thrift:"SnapshotId,5" db:"SnapshotId" json:"SnapshotId"`
	Quantity       int32             `thrift:"Quantity,6" db:"Quantity" json:"Quantity"`
	ReturnQuantity int32             `thrift:"ReturnQuantity,7" db:"ReturnQuantity" json:"ReturnQuantity"`
	Amount         float64           `thrift:"Amount,8" db:"Amount" json:"Amount"`
	FinalAmount    float64           `thrift:"FinalAmount,9" db:"FinalAmount" json:"FinalAmount"`
	IsShipped      int32             `thrift:"IsShipped,10" db:"IsShipped" json:"IsShipped"`
	Data           map[string]string `thrift:"Data,11" db:"Data" json:"Data"`
}

func NewComplexItem() *ComplexItem {
	return &ComplexItem{}
}

func (p *ComplexItem) GetID() int64 {
	return p.ID
}

func (p *ComplexItem) GetOrderId() int64 {
	return p.OrderId
}

func (p *ComplexItem) GetItemId() int64 {
	return p.ItemId
}

func (p *ComplexItem) GetSkuId() int64 {
	return p.SkuId
}

func (p *ComplexItem) GetSnapshotId() int64 {
	return p.SnapshotId
}

func (p *ComplexItem) GetQuantity() int32 {
	return p.Quantity
}

func (p *ComplexItem) GetReturnQuantity() int32 {
	return p.ReturnQuantity
}

func (p *ComplexItem) GetAmount() float64 {
	return p.Amount
}

func (p *ComplexItem) GetFinalAmount() float64 {
	return p.FinalAmount
}

func (p *ComplexItem) GetIsShipped() int32 {
	return p.IsShipped
}

func (p *ComplexItem) GetData() map[string]string {
	return p.Data
}
func (p *ComplexItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ComplexItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ComplexItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *ComplexItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ItemId = v
	}
	return nil
}

func (p *ComplexItem) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SkuId = v
	}
	return nil
}

func (p *ComplexItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SnapshotId = v
	}
	return nil
}

func (p *ComplexItem) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Quantity = v
	}
	return nil
}

func (p *ComplexItem) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ReturnQuantity = v
	}
	return nil
}

func (p *ComplexItem) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *ComplexItem) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.FinalAmount = v
	}
	return nil
}

func (p *ComplexItem) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.IsShipped = v
	}
	return nil
}

func (p *ComplexItem) ReadField11(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Data = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val1 = v
		}
		p.Data[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ComplexItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ComplexItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ComplexItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrderId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:OrderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OrderId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:OrderId: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ItemId", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ItemId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ItemId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ItemId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ItemId: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SkuId", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SkuId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SkuId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SkuId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SkuId: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SnapshotId", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:SnapshotId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SnapshotId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SnapshotId (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:SnapshotId: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Quantity", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Quantity: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Quantity)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Quantity (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Quantity: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ReturnQuantity", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ReturnQuantity: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReturnQuantity)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ReturnQuantity (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ReturnQuantity: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Amount", thrift.DOUBLE, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Amount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Amount (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Amount: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FinalAmount", thrift.DOUBLE, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:FinalAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.FinalAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FinalAmount (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:FinalAmount: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IsShipped", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:IsShipped: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsShipped)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IsShipped (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:IsShipped: ", p), err)
	}
	return err
}

func (p *ComplexItem) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Data", thrift.MAP, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:Data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Data {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:Data: ", p), err)
	}
	return err
}

func (p *ComplexItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComplexItem(%+v)", *p)
}

// Attributes:
//  - OrderId
//  - SubOrderId
//  - OrderType
//  - OrderNo
//  - BuyerId
//  - VendorId
//  - ShopId
//  - Subject
//  - ItemAmount
//  - DiscountAmount
//  - ExpressFee
//  - PackageFee
//  - FinalAmount
//  - ConsigneePerson
//  - ConsigneePhone
//  - ShippingAddress
//  - BuyerComment
//  - IsBreak
//  - State
//  - CreateTime
//  - UpdateTime
//  - Items
//  - Data
type ComplexOrder struct {
	OrderId         int64             `thrift:"OrderId,1" db:"OrderId" json:"OrderId"`
	SubOrderId      int64             `thrift:"SubOrderId,2" db:"SubOrderId" json:"SubOrderId"`
	OrderType       int32             `thrift:"OrderType,3" db:"OrderType" json:"OrderType"`
	OrderNo         string            `thrift:"OrderNo,4" db:"OrderNo" json:"OrderNo"`
	BuyerId         int64             `thrift:"BuyerId,5" db:"BuyerId" json:"BuyerId"`
	VendorId        int32             `thrift:"VendorId,6" db:"VendorId" json:"VendorId"`
	ShopId          int32             `thrift:"ShopId,7" db:"ShopId" json:"ShopId"`
	Subject         string            `thrift:"Subject,8" db:"Subject" json:"Subject"`
	ItemAmount      float64           `thrift:"ItemAmount,9" db:"ItemAmount" json:"ItemAmount"`
	DiscountAmount  float64           `thrift:"DiscountAmount,10" db:"DiscountAmount" json:"DiscountAmount"`
	ExpressFee      float64           `thrift:"ExpressFee,11" db:"ExpressFee" json:"ExpressFee"`
	PackageFee      float64           `thrift:"PackageFee,12" db:"PackageFee" json:"PackageFee"`
	FinalAmount     float64           `thrift:"FinalAmount,13" db:"FinalAmount" json:"FinalAmount"`
	ConsigneePerson string            `thrift:"ConsigneePerson,14" db:"ConsigneePerson" json:"ConsigneePerson"`
	ConsigneePhone  string            `thrift:"ConsigneePhone,15" db:"ConsigneePhone" json:"ConsigneePhone"`
	ShippingAddress string            `thrift:"ShippingAddress,16" db:"ShippingAddress" json:"ShippingAddress"`
	BuyerComment    string            `thrift:"BuyerComment,17" db:"BuyerComment" json:"BuyerComment"`
	IsBreak         int32             `thrift:"IsBreak,18" db:"IsBreak" json:"IsBreak"`
	State           int32             `thrift:"State,19" db:"State" json:"State"`
	CreateTime      int64             `thrift:"CreateTime,20" db:"CreateTime" json:"CreateTime"`
	UpdateTime      int64             `thrift:"UpdateTime,21" db:"UpdateTime" json:"UpdateTime"`
	Items           []*ComplexItem    `thrift:"Items,22" db:"Items" json:"Items"`
	Data            map[string]string `thrift:"Data,23" db:"Data" json:"Data"`
}

func NewComplexOrder() *ComplexOrder {
	return &ComplexOrder{}
}

func (p *ComplexOrder) GetOrderId() int64 {
	return p.OrderId
}

func (p *ComplexOrder) GetSubOrderId() int64 {
	return p.SubOrderId
}

func (p *ComplexOrder) GetOrderType() int32 {
	return p.OrderType
}

func (p *ComplexOrder) GetOrderNo() string {
	return p.OrderNo
}

func (p *ComplexOrder) GetBuyerId() int64 {
	return p.BuyerId
}

func (p *ComplexOrder) GetVendorId() int32 {
	return p.VendorId
}

func (p *ComplexOrder) GetShopId() int32 {
	return p.ShopId
}

func (p *ComplexOrder) GetSubject() string {
	return p.Subject
}

func (p *ComplexOrder) GetItemAmount() float64 {
	return p.ItemAmount
}

func (p *ComplexOrder) GetDiscountAmount() float64 {
	return p.DiscountAmount
}

func (p *ComplexOrder) GetExpressFee() float64 {
	return p.ExpressFee
}

func (p *ComplexOrder) GetPackageFee() float64 {
	return p.PackageFee
}

func (p *ComplexOrder) GetFinalAmount() float64 {
	return p.FinalAmount
}

func (p *ComplexOrder) GetConsigneePerson() string {
	return p.ConsigneePerson
}

func (p *ComplexOrder) GetConsigneePhone() string {
	return p.ConsigneePhone
}

func (p *ComplexOrder) GetShippingAddress() string {
	return p.ShippingAddress
}

func (p *ComplexOrder) GetBuyerComment() string {
	return p.BuyerComment
}

func (p *ComplexOrder) GetIsBreak() int32 {
	return p.IsBreak
}

func (p *ComplexOrder) GetState() int32 {
	return p.State
}

func (p *ComplexOrder) GetCreateTime() int64 {
	return p.CreateTime
}

func (p *ComplexOrder) GetUpdateTime() int64 {
	return p.UpdateTime
}

func (p *ComplexOrder) GetItems() []*ComplexItem {
	return p.Items
}

func (p *ComplexOrder) GetData() map[string]string {
	return p.Data
}
func (p *ComplexOrder) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.ReadField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.ReadField23(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ComplexOrder) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *ComplexOrder) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SubOrderId = v
	}
	return nil
}

func (p *ComplexOrder) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OrderType = v
	}
	return nil
}

func (p *ComplexOrder) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.OrderNo = v
	}
	return nil
}

func (p *ComplexOrder) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BuyerId = v
	}
	return nil
}

func (p *ComplexOrder) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.VendorId = v
	}
	return nil
}

func (p *ComplexOrder) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ShopId = v
	}
	return nil
}

func (p *ComplexOrder) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Subject = v
	}
	return nil
}

func (p *ComplexOrder) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.ItemAmount = v
	}
	return nil
}

func (p *ComplexOrder) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.DiscountAmount = v
	}
	return nil
}

func (p *ComplexOrder) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.ExpressFee = v
	}
	return nil
}

func (p *ComplexOrder) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.PackageFee = v
	}
	return nil
}

func (p *ComplexOrder) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.FinalAmount = v
	}
	return nil
}

func (p *ComplexOrder) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.ConsigneePerson = v
	}
	return nil
}

func (p *ComplexOrder) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.ConsigneePhone = v
	}
	return nil
}

func (p *ComplexOrder) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.ShippingAddress = v
	}
	return nil
}

func (p *ComplexOrder) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.BuyerComment = v
	}
	return nil
}

func (p *ComplexOrder) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.IsBreak = v
	}
	return nil
}

func (p *ComplexOrder) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *ComplexOrder) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *ComplexOrder) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *ComplexOrder) ReadField22(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ComplexItem, 0, size)
	p.Items = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &ComplexItem{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Items = append(p.Items, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ComplexOrder) ReadField23(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Data = tMap
	for i := 0; i < size; i++ {
		var _key3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key3 = v
		}
		var _val4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val4 = v
		}
		p.Data[_key3] = _val4
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ComplexOrder) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ComplexOrder"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField19(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField22(oprot); err != nil {
			return err
		}
		if err := p.writeField23(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ComplexOrder) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrderId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:OrderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OrderId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:OrderId: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SubOrderId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:SubOrderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SubOrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SubOrderId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:SubOrderId: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrderType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:OrderType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OrderType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OrderType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:OrderType: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrderNo", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:OrderNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OrderNo (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:OrderNo: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BuyerId", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:BuyerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BuyerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BuyerId (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:BuyerId: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VendorId", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:VendorId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VendorId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.VendorId (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:VendorId: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ShopId", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ShopId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ShopId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ShopId (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ShopId: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Subject", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Subject: ", p), err)
	}
	if err := oprot.WriteString(string(p.Subject)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Subject (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Subject: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ItemAmount", thrift.DOUBLE, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ItemAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.ItemAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ItemAmount (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ItemAmount: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DiscountAmount", thrift.DOUBLE, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:DiscountAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.DiscountAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.DiscountAmount (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:DiscountAmount: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExpressFee", thrift.DOUBLE, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:ExpressFee: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.ExpressFee)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ExpressFee (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:ExpressFee: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PackageFee", thrift.DOUBLE, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:PackageFee: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.PackageFee)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PackageFee (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:PackageFee: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FinalAmount", thrift.DOUBLE, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:FinalAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.FinalAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FinalAmount (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:FinalAmount: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ConsigneePerson", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:ConsigneePerson: ", p), err)
	}
	if err := oprot.WriteString(string(p.ConsigneePerson)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ConsigneePerson (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:ConsigneePerson: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ConsigneePhone", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:ConsigneePhone: ", p), err)
	}
	if err := oprot.WriteString(string(p.ConsigneePhone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ConsigneePhone (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:ConsigneePhone: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ShippingAddress", thrift.STRING, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:ShippingAddress: ", p), err)
	}
	if err := oprot.WriteString(string(p.ShippingAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ShippingAddress (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:ShippingAddress: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BuyerComment", thrift.STRING, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:BuyerComment: ", p), err)
	}
	if err := oprot.WriteString(string(p.BuyerComment)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BuyerComment (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:BuyerComment: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IsBreak", thrift.I32, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:IsBreak: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsBreak)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IsBreak (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:IsBreak: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("State", thrift.I32, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:State: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.State (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:State: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:CreateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CreateTime (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:CreateTime: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:UpdateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:UpdateTime: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Items", thrift.LIST, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:Items: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:Items: ", p), err)
	}
	return err
}

func (p *ComplexOrder) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Data", thrift.MAP, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:Data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Data {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:Data: ", p), err)
	}
	return err
}

func (p *ComplexOrder) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComplexOrder(%+v)", *p)
}

type SaleService interface {
	// Parameters:
	//  - MemberId
	//  - Action
	//  - Data
	WholesaleCartV1(memberId int64, action string, data map[string]string) (r *Result_, err error)
	// Parameters:
	//  - MemberId
	//  - Action
	//  - Data
	RetailCartV1(memberId int64, action string, data map[string]string) (r *Result_, err error)
	// Parameters:
	//  - BuyerId
	//  - CartType
	//  - Data
	SubmitOrderV1(buyerId int64, cartType int32, data map[string]string) (r map[string]string, err error)
	// Parameters:
	//  - OrderNo
	//  - SubOrder
	GetOrder(order_no string, sub_order bool) (r *ComplexOrder, err error)
	// Parameters:
	//  - OrderNo
	//  - SubOrder
	GetOrderAndItems(order_no string, sub_order bool) (r *ComplexOrder, err error)
	// Parameters:
	//  - ID
	GetSubOrder(id int64) (r *ComplexOrder, err error)
	// Parameters:
	//  - OrderNo
	GetSubOrderByNo(orderNo string) (r *ComplexOrder, err error)
	// Parameters:
	//  - SubOrderId
	GetSubOrderItems(subOrderId int64) (r []*ComplexItem, err error)
	// Parameters:
	//  - O
	//  - Rate
	SubmitTradeOrder(o *ComplexOrder, rate float64) (r *Result64, err error)
	// Parameters:
	//  - OrderId
	TradeOrderCashPay(orderId int64) (r *Result64, err error)
	// Parameters:
	//  - OrderId
	//  - Img
	TradeOrderUpdateTicket(orderId int64, img string) (r *Result64, err error)
}

type SaleServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewSaleServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SaleServiceClient {
	return &SaleServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewSaleServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SaleServiceClient {
	return &SaleServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - MemberId
//  - Action
//  - Data
func (p *SaleServiceClient) WholesaleCartV1(memberId int64, action string, data map[string]string) (r *Result_, err error) {
	if err = p.sendWholesaleCartV1(memberId, action, data); err != nil {
		return
	}
	return p.recvWholesaleCartV1()
}

func (p *SaleServiceClient) sendWholesaleCartV1(memberId int64, action string, data map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("WholesaleCartV1", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceWholesaleCartV1Args{
		MemberId: memberId,
		Action:   action,
		Data:     data,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvWholesaleCartV1() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "WholesaleCartV1" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "WholesaleCartV1 failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "WholesaleCartV1 failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error5 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error6 error
		error6, err = error5.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error6
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "WholesaleCartV1 failed: invalid message type")
		return
	}
	result := SaleServiceWholesaleCartV1Result{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MemberId
//  - Action
//  - Data
func (p *SaleServiceClient) RetailCartV1(memberId int64, action string, data map[string]string) (r *Result_, err error) {
	if err = p.sendRetailCartV1(memberId, action, data); err != nil {
		return
	}
	return p.recvRetailCartV1()
}

func (p *SaleServiceClient) sendRetailCartV1(memberId int64, action string, data map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RetailCartV1", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceRetailCartV1Args{
		MemberId: memberId,
		Action:   action,
		Data:     data,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvRetailCartV1() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RetailCartV1" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RetailCartV1 failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RetailCartV1 failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error7 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error8 error
		error8, err = error7.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error8
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RetailCartV1 failed: invalid message type")
		return
	}
	result := SaleServiceRetailCartV1Result{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BuyerId
//  - CartType
//  - Data
func (p *SaleServiceClient) SubmitOrderV1(buyerId int64, cartType int32, data map[string]string) (r map[string]string, err error) {
	if err = p.sendSubmitOrderV1(buyerId, cartType, data); err != nil {
		return
	}
	return p.recvSubmitOrderV1()
}

func (p *SaleServiceClient) sendSubmitOrderV1(buyerId int64, cartType int32, data map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("SubmitOrderV1", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceSubmitOrderV1Args{
		BuyerId:  buyerId,
		CartType: cartType,
		Data:     data,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvSubmitOrderV1() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "SubmitOrderV1" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "SubmitOrderV1 failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "SubmitOrderV1 failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error9 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error10 error
		error10, err = error9.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error10
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "SubmitOrderV1 failed: invalid message type")
		return
	}
	result := SaleServiceSubmitOrderV1Result{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OrderNo
//  - SubOrder
func (p *SaleServiceClient) GetOrder(order_no string, sub_order bool) (r *ComplexOrder, err error) {
	if err = p.sendGetOrder(order_no, sub_order); err != nil {
		return
	}
	return p.recvGetOrder()
}

func (p *SaleServiceClient) sendGetOrder(order_no string, sub_order bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetOrder", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceGetOrderArgs{
		OrderNo:  order_no,
		SubOrder: sub_order,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvGetOrder() (value *ComplexOrder, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetOrder" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetOrder failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetOrder failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error11 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error12 error
		error12, err = error11.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error12
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetOrder failed: invalid message type")
		return
	}
	result := SaleServiceGetOrderResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OrderNo
//  - SubOrder
func (p *SaleServiceClient) GetOrderAndItems(order_no string, sub_order bool) (r *ComplexOrder, err error) {
	if err = p.sendGetOrderAndItems(order_no, sub_order); err != nil {
		return
	}
	return p.recvGetOrderAndItems()
}

func (p *SaleServiceClient) sendGetOrderAndItems(order_no string, sub_order bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetOrderAndItems", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceGetOrderAndItemsArgs{
		OrderNo:  order_no,
		SubOrder: sub_order,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvGetOrderAndItems() (value *ComplexOrder, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetOrderAndItems" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetOrderAndItems failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetOrderAndItems failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error13 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error14 error
		error14, err = error13.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error14
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetOrderAndItems failed: invalid message type")
		return
	}
	result := SaleServiceGetOrderAndItemsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
func (p *SaleServiceClient) GetSubOrder(id int64) (r *ComplexOrder, err error) {
	if err = p.sendGetSubOrder(id); err != nil {
		return
	}
	return p.recvGetSubOrder()
}

func (p *SaleServiceClient) sendGetSubOrder(id int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetSubOrder", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceGetSubOrderArgs{
		ID: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvGetSubOrder() (value *ComplexOrder, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetSubOrder" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetSubOrder failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetSubOrder failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error15 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error16 error
		error16, err = error15.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error16
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetSubOrder failed: invalid message type")
		return
	}
	result := SaleServiceGetSubOrderResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OrderNo
func (p *SaleServiceClient) GetSubOrderByNo(orderNo string) (r *ComplexOrder, err error) {
	if err = p.sendGetSubOrderByNo(orderNo); err != nil {
		return
	}
	return p.recvGetSubOrderByNo()
}

func (p *SaleServiceClient) sendGetSubOrderByNo(orderNo string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetSubOrderByNo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceGetSubOrderByNoArgs{
		OrderNo: orderNo,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvGetSubOrderByNo() (value *ComplexOrder, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetSubOrderByNo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetSubOrderByNo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetSubOrderByNo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error17 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error18 error
		error18, err = error17.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error18
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetSubOrderByNo failed: invalid message type")
		return
	}
	result := SaleServiceGetSubOrderByNoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SubOrderId
func (p *SaleServiceClient) GetSubOrderItems(subOrderId int64) (r []*ComplexItem, err error) {
	if err = p.sendGetSubOrderItems(subOrderId); err != nil {
		return
	}
	return p.recvGetSubOrderItems()
}

func (p *SaleServiceClient) sendGetSubOrderItems(subOrderId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetSubOrderItems", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceGetSubOrderItemsArgs{
		SubOrderId: subOrderId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvGetSubOrderItems() (value []*ComplexItem, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetSubOrderItems" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetSubOrderItems failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetSubOrderItems failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error19 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error20 error
		error20, err = error19.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error20
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetSubOrderItems failed: invalid message type")
		return
	}
	result := SaleServiceGetSubOrderItemsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - O
//  - Rate
func (p *SaleServiceClient) SubmitTradeOrder(o *ComplexOrder, rate float64) (r *Result64, err error) {
	if err = p.sendSubmitTradeOrder(o, rate); err != nil {
		return
	}
	return p.recvSubmitTradeOrder()
}

func (p *SaleServiceClient) sendSubmitTradeOrder(o *ComplexOrder, rate float64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("SubmitTradeOrder", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceSubmitTradeOrderArgs{
		O:    o,
		Rate: rate,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvSubmitTradeOrder() (value *Result64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "SubmitTradeOrder" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "SubmitTradeOrder failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "SubmitTradeOrder failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error21 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error22 error
		error22, err = error21.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error22
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "SubmitTradeOrder failed: invalid message type")
		return
	}
	result := SaleServiceSubmitTradeOrderResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OrderId
func (p *SaleServiceClient) TradeOrderCashPay(orderId int64) (r *Result64, err error) {
	if err = p.sendTradeOrderCashPay(orderId); err != nil {
		return
	}
	return p.recvTradeOrderCashPay()
}

func (p *SaleServiceClient) sendTradeOrderCashPay(orderId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("TradeOrderCashPay", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceTradeOrderCashPayArgs{
		OrderId: orderId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvTradeOrderCashPay() (value *Result64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "TradeOrderCashPay" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "TradeOrderCashPay failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "TradeOrderCashPay failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error23 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error24 error
		error24, err = error23.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error24
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "TradeOrderCashPay failed: invalid message type")
		return
	}
	result := SaleServiceTradeOrderCashPayResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OrderId
//  - Img
func (p *SaleServiceClient) TradeOrderUpdateTicket(orderId int64, img string) (r *Result64, err error) {
	if err = p.sendTradeOrderUpdateTicket(orderId, img); err != nil {
		return
	}
	return p.recvTradeOrderUpdateTicket()
}

func (p *SaleServiceClient) sendTradeOrderUpdateTicket(orderId int64, img string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("TradeOrderUpdateTicket", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceTradeOrderUpdateTicketArgs{
		OrderId: orderId,
		Img:     img,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvTradeOrderUpdateTicket() (value *Result64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "TradeOrderUpdateTicket" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "TradeOrderUpdateTicket failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "TradeOrderUpdateTicket failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error25 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error26 error
		error26, err = error25.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error26
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "TradeOrderUpdateTicket failed: invalid message type")
		return
	}
	result := SaleServiceTradeOrderUpdateTicketResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type SaleServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SaleService
}

func (p *SaleServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SaleServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SaleServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSaleServiceProcessor(handler SaleService) *SaleServiceProcessor {

	self27 := &SaleServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self27.processorMap["WholesaleCartV1"] = &saleServiceProcessorWholesaleCartV1{handler: handler}
	self27.processorMap["RetailCartV1"] = &saleServiceProcessorRetailCartV1{handler: handler}
	self27.processorMap["SubmitOrderV1"] = &saleServiceProcessorSubmitOrderV1{handler: handler}
	self27.processorMap["GetOrder"] = &saleServiceProcessorGetOrder{handler: handler}
	self27.processorMap["GetOrderAndItems"] = &saleServiceProcessorGetOrderAndItems{handler: handler}
	self27.processorMap["GetSubOrder"] = &saleServiceProcessorGetSubOrder{handler: handler}
	self27.processorMap["GetSubOrderByNo"] = &saleServiceProcessorGetSubOrderByNo{handler: handler}
	self27.processorMap["GetSubOrderItems"] = &saleServiceProcessorGetSubOrderItems{handler: handler}
	self27.processorMap["SubmitTradeOrder"] = &saleServiceProcessorSubmitTradeOrder{handler: handler}
	self27.processorMap["TradeOrderCashPay"] = &saleServiceProcessorTradeOrderCashPay{handler: handler}
	self27.processorMap["TradeOrderUpdateTicket"] = &saleServiceProcessorTradeOrderUpdateTicket{handler: handler}
	return self27
}

func (p *SaleServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x28 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x28.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x28

}

type saleServiceProcessorWholesaleCartV1 struct {
	handler SaleService
}

func (p *saleServiceProcessorWholesaleCartV1) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceWholesaleCartV1Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("WholesaleCartV1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceWholesaleCartV1Result{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.WholesaleCartV1(args.MemberId, args.Action, args.Data); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WholesaleCartV1: "+err2.Error())
		oprot.WriteMessageBegin("WholesaleCartV1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("WholesaleCartV1", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorRetailCartV1 struct {
	handler SaleService
}

func (p *saleServiceProcessorRetailCartV1) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceRetailCartV1Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RetailCartV1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceRetailCartV1Result{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.RetailCartV1(args.MemberId, args.Action, args.Data); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RetailCartV1: "+err2.Error())
		oprot.WriteMessageBegin("RetailCartV1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RetailCartV1", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorSubmitOrderV1 struct {
	handler SaleService
}

func (p *saleServiceProcessorSubmitOrderV1) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceSubmitOrderV1Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SubmitOrderV1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceSubmitOrderV1Result{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.SubmitOrderV1(args.BuyerId, args.CartType, args.Data); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SubmitOrderV1: "+err2.Error())
		oprot.WriteMessageBegin("SubmitOrderV1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SubmitOrderV1", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorGetOrder struct {
	handler SaleService
}

func (p *saleServiceProcessorGetOrder) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceGetOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceGetOrderResult{}
	var retval *ComplexOrder
	var err2 error
	if retval, err2 = p.handler.GetOrder(args.OrderNo, args.SubOrder); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetOrder: "+err2.Error())
		oprot.WriteMessageBegin("GetOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorGetOrderAndItems struct {
	handler SaleService
}

func (p *saleServiceProcessorGetOrderAndItems) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceGetOrderAndItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetOrderAndItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceGetOrderAndItemsResult{}
	var retval *ComplexOrder
	var err2 error
	if retval, err2 = p.handler.GetOrderAndItems(args.OrderNo, args.SubOrder); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetOrderAndItems: "+err2.Error())
		oprot.WriteMessageBegin("GetOrderAndItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetOrderAndItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorGetSubOrder struct {
	handler SaleService
}

func (p *saleServiceProcessorGetSubOrder) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceGetSubOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSubOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceGetSubOrderResult{}
	var retval *ComplexOrder
	var err2 error
	if retval, err2 = p.handler.GetSubOrder(args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSubOrder: "+err2.Error())
		oprot.WriteMessageBegin("GetSubOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSubOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorGetSubOrderByNo struct {
	handler SaleService
}

func (p *saleServiceProcessorGetSubOrderByNo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceGetSubOrderByNoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSubOrderByNo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceGetSubOrderByNoResult{}
	var retval *ComplexOrder
	var err2 error
	if retval, err2 = p.handler.GetSubOrderByNo(args.OrderNo); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSubOrderByNo: "+err2.Error())
		oprot.WriteMessageBegin("GetSubOrderByNo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSubOrderByNo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorGetSubOrderItems struct {
	handler SaleService
}

func (p *saleServiceProcessorGetSubOrderItems) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceGetSubOrderItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSubOrderItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceGetSubOrderItemsResult{}
	var retval []*ComplexItem
	var err2 error
	if retval, err2 = p.handler.GetSubOrderItems(args.SubOrderId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSubOrderItems: "+err2.Error())
		oprot.WriteMessageBegin("GetSubOrderItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSubOrderItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorSubmitTradeOrder struct {
	handler SaleService
}

func (p *saleServiceProcessorSubmitTradeOrder) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceSubmitTradeOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SubmitTradeOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceSubmitTradeOrderResult{}
	var retval *Result64
	var err2 error
	if retval, err2 = p.handler.SubmitTradeOrder(args.O, args.Rate); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SubmitTradeOrder: "+err2.Error())
		oprot.WriteMessageBegin("SubmitTradeOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SubmitTradeOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorTradeOrderCashPay struct {
	handler SaleService
}

func (p *saleServiceProcessorTradeOrderCashPay) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceTradeOrderCashPayArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("TradeOrderCashPay", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceTradeOrderCashPayResult{}
	var retval *Result64
	var err2 error
	if retval, err2 = p.handler.TradeOrderCashPay(args.OrderId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TradeOrderCashPay: "+err2.Error())
		oprot.WriteMessageBegin("TradeOrderCashPay", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("TradeOrderCashPay", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorTradeOrderUpdateTicket struct {
	handler SaleService
}

func (p *saleServiceProcessorTradeOrderUpdateTicket) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceTradeOrderUpdateTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("TradeOrderUpdateTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceTradeOrderUpdateTicketResult{}
	var retval *Result64
	var err2 error
	if retval, err2 = p.handler.TradeOrderUpdateTicket(args.OrderId, args.Img); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TradeOrderUpdateTicket: "+err2.Error())
		oprot.WriteMessageBegin("TradeOrderUpdateTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("TradeOrderUpdateTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - MemberId
//  - Action
//  - Data
type SaleServiceWholesaleCartV1Args struct {
	MemberId int64             `thrift:"memberId,1" db:"memberId" json:"memberId"`
	Action   string            `thrift:"action,2" db:"action" json:"action"`
	Data     map[string]string `thrift:"data,3" db:"data" json:"data"`
}

func NewSaleServiceWholesaleCartV1Args() *SaleServiceWholesaleCartV1Args {
	return &SaleServiceWholesaleCartV1Args{}
}

func (p *SaleServiceWholesaleCartV1Args) GetMemberId() int64 {
	return p.MemberId
}

func (p *SaleServiceWholesaleCartV1Args) GetAction() string {
	return p.Action
}

func (p *SaleServiceWholesaleCartV1Args) GetData() map[string]string {
	return p.Data
}
func (p *SaleServiceWholesaleCartV1Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceWholesaleCartV1Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *SaleServiceWholesaleCartV1Args) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Action = v
	}
	return nil
}

func (p *SaleServiceWholesaleCartV1Args) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Data = tMap
	for i := 0; i < size; i++ {
		var _key29 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key29 = v
		}
		var _val30 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val30 = v
		}
		p.Data[_key29] = _val30
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SaleServiceWholesaleCartV1Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("WholesaleCartV1_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceWholesaleCartV1Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err)
	}
	return err
}

func (p *SaleServiceWholesaleCartV1Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("action", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:action: ", p), err)
	}
	if err := oprot.WriteString(string(p.Action)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.action (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:action: ", p), err)
	}
	return err
}

func (p *SaleServiceWholesaleCartV1Args) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Data {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err)
	}
	return err
}

func (p *SaleServiceWholesaleCartV1Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceWholesaleCartV1Args(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceWholesaleCartV1Result struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSaleServiceWholesaleCartV1Result() *SaleServiceWholesaleCartV1Result {
	return &SaleServiceWholesaleCartV1Result{}
}

var SaleServiceWholesaleCartV1Result_Success_DEFAULT *Result_

func (p *SaleServiceWholesaleCartV1Result) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return SaleServiceWholesaleCartV1Result_Success_DEFAULT
	}
	return p.Success
}
func (p *SaleServiceWholesaleCartV1Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceWholesaleCartV1Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceWholesaleCartV1Result) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SaleServiceWholesaleCartV1Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("WholesaleCartV1_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceWholesaleCartV1Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceWholesaleCartV1Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceWholesaleCartV1Result(%+v)", *p)
}

// Attributes:
//  - MemberId
//  - Action
//  - Data
type SaleServiceRetailCartV1Args struct {
	MemberId int64             `thrift:"memberId,1" db:"memberId" json:"memberId"`
	Action   string            `thrift:"action,2" db:"action" json:"action"`
	Data     map[string]string `thrift:"data,3" db:"data" json:"data"`
}

func NewSaleServiceRetailCartV1Args() *SaleServiceRetailCartV1Args {
	return &SaleServiceRetailCartV1Args{}
}

func (p *SaleServiceRetailCartV1Args) GetMemberId() int64 {
	return p.MemberId
}

func (p *SaleServiceRetailCartV1Args) GetAction() string {
	return p.Action
}

func (p *SaleServiceRetailCartV1Args) GetData() map[string]string {
	return p.Data
}
func (p *SaleServiceRetailCartV1Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceRetailCartV1Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *SaleServiceRetailCartV1Args) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Action = v
	}
	return nil
}

func (p *SaleServiceRetailCartV1Args) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Data = tMap
	for i := 0; i < size; i++ {
		var _key31 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key31 = v
		}
		var _val32 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val32 = v
		}
		p.Data[_key31] = _val32
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SaleServiceRetailCartV1Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RetailCartV1_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceRetailCartV1Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err)
	}
	return err
}

func (p *SaleServiceRetailCartV1Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("action", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:action: ", p), err)
	}
	if err := oprot.WriteString(string(p.Action)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.action (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:action: ", p), err)
	}
	return err
}

func (p *SaleServiceRetailCartV1Args) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Data {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err)
	}
	return err
}

func (p *SaleServiceRetailCartV1Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceRetailCartV1Args(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceRetailCartV1Result struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSaleServiceRetailCartV1Result() *SaleServiceRetailCartV1Result {
	return &SaleServiceRetailCartV1Result{}
}

var SaleServiceRetailCartV1Result_Success_DEFAULT *Result_

func (p *SaleServiceRetailCartV1Result) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return SaleServiceRetailCartV1Result_Success_DEFAULT
	}
	return p.Success
}
func (p *SaleServiceRetailCartV1Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceRetailCartV1Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceRetailCartV1Result) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SaleServiceRetailCartV1Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RetailCartV1_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceRetailCartV1Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceRetailCartV1Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceRetailCartV1Result(%+v)", *p)
}

// Attributes:
//  - BuyerId
//  - CartType
//  - Data
type SaleServiceSubmitOrderV1Args struct {
	BuyerId  int64             `thrift:"buyerId,1" db:"buyerId" json:"buyerId"`
	CartType int32             `thrift:"cartType,2" db:"cartType" json:"cartType"`
	Data     map[string]string `thrift:"data,3" db:"data" json:"data"`
}

func NewSaleServiceSubmitOrderV1Args() *SaleServiceSubmitOrderV1Args {
	return &SaleServiceSubmitOrderV1Args{}
}

func (p *SaleServiceSubmitOrderV1Args) GetBuyerId() int64 {
	return p.BuyerId
}

func (p *SaleServiceSubmitOrderV1Args) GetCartType() int32 {
	return p.CartType
}

func (p *SaleServiceSubmitOrderV1Args) GetData() map[string]string {
	return p.Data
}
func (p *SaleServiceSubmitOrderV1Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceSubmitOrderV1Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BuyerId = v
	}
	return nil
}

func (p *SaleServiceSubmitOrderV1Args) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CartType = v
	}
	return nil
}

func (p *SaleServiceSubmitOrderV1Args) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Data = tMap
	for i := 0; i < size; i++ {
		var _key33 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key33 = v
		}
		var _val34 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val34 = v
		}
		p.Data[_key33] = _val34
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SaleServiceSubmitOrderV1Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SubmitOrderV1_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceSubmitOrderV1Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("buyerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:buyerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BuyerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.buyerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:buyerId: ", p), err)
	}
	return err
}

func (p *SaleServiceSubmitOrderV1Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cartType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cartType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CartType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cartType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cartType: ", p), err)
	}
	return err
}

func (p *SaleServiceSubmitOrderV1Args) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Data {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err)
	}
	return err
}

func (p *SaleServiceSubmitOrderV1Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceSubmitOrderV1Args(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceSubmitOrderV1Result struct {
	Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSaleServiceSubmitOrderV1Result() *SaleServiceSubmitOrderV1Result {
	return &SaleServiceSubmitOrderV1Result{}
}

var SaleServiceSubmitOrderV1Result_Success_DEFAULT map[string]string

func (p *SaleServiceSubmitOrderV1Result) GetSuccess() map[string]string {
	return p.Success
}
func (p *SaleServiceSubmitOrderV1Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceSubmitOrderV1Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceSubmitOrderV1Result) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key35 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key35 = v
		}
		var _val36 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val36 = v
		}
		p.Success[_key35] = _val36
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SaleServiceSubmitOrderV1Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SubmitOrderV1_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceSubmitOrderV1Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceSubmitOrderV1Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceSubmitOrderV1Result(%+v)", *p)
}

// Attributes:
//  - OrderNo
//  - SubOrder
type SaleServiceGetOrderArgs struct {
	OrderNo  string `thrift:"order_no,1" db:"order_no" json:"order_no"`
	SubOrder bool   `thrift:"sub_order,2" db:"sub_order" json:"sub_order"`
}

func NewSaleServiceGetOrderArgs() *SaleServiceGetOrderArgs {
	return &SaleServiceGetOrderArgs{}
}

func (p *SaleServiceGetOrderArgs) GetOrderNo() string {
	return p.OrderNo
}

func (p *SaleServiceGetOrderArgs) GetSubOrder() bool {
	return p.SubOrder
}
func (p *SaleServiceGetOrderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetOrderArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderNo = v
	}
	return nil
}

func (p *SaleServiceGetOrderArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SubOrder = v
	}
	return nil
}

func (p *SaleServiceGetOrderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetOrder_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("order_no", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:order_no: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.order_no (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:order_no: ", p), err)
	}
	return err
}

func (p *SaleServiceGetOrderArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sub_order", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sub_order: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.SubOrder)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sub_order (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sub_order: ", p), err)
	}
	return err
}

func (p *SaleServiceGetOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceGetOrderResult struct {
	Success *ComplexOrder `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSaleServiceGetOrderResult() *SaleServiceGetOrderResult {
	return &SaleServiceGetOrderResult{}
}

var SaleServiceGetOrderResult_Success_DEFAULT *ComplexOrder

func (p *SaleServiceGetOrderResult) GetSuccess() *ComplexOrder {
	if !p.IsSetSuccess() {
		return SaleServiceGetOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SaleServiceGetOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceGetOrderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetOrderResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ComplexOrder{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SaleServiceGetOrderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetOrder_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceGetOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetOrderResult(%+v)", *p)
}

// Attributes:
//  - OrderNo
//  - SubOrder
type SaleServiceGetOrderAndItemsArgs struct {
	OrderNo  string `thrift:"order_no,1" db:"order_no" json:"order_no"`
	SubOrder bool   `thrift:"sub_order,2" db:"sub_order" json:"sub_order"`
}

func NewSaleServiceGetOrderAndItemsArgs() *SaleServiceGetOrderAndItemsArgs {
	return &SaleServiceGetOrderAndItemsArgs{}
}

func (p *SaleServiceGetOrderAndItemsArgs) GetOrderNo() string {
	return p.OrderNo
}

func (p *SaleServiceGetOrderAndItemsArgs) GetSubOrder() bool {
	return p.SubOrder
}
func (p *SaleServiceGetOrderAndItemsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetOrderAndItemsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderNo = v
	}
	return nil
}

func (p *SaleServiceGetOrderAndItemsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SubOrder = v
	}
	return nil
}

func (p *SaleServiceGetOrderAndItemsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetOrderAndItems_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetOrderAndItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("order_no", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:order_no: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.order_no (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:order_no: ", p), err)
	}
	return err
}

func (p *SaleServiceGetOrderAndItemsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sub_order", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sub_order: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.SubOrder)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sub_order (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sub_order: ", p), err)
	}
	return err
}

func (p *SaleServiceGetOrderAndItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetOrderAndItemsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceGetOrderAndItemsResult struct {
	Success *ComplexOrder `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSaleServiceGetOrderAndItemsResult() *SaleServiceGetOrderAndItemsResult {
	return &SaleServiceGetOrderAndItemsResult{}
}

var SaleServiceGetOrderAndItemsResult_Success_DEFAULT *ComplexOrder

func (p *SaleServiceGetOrderAndItemsResult) GetSuccess() *ComplexOrder {
	if !p.IsSetSuccess() {
		return SaleServiceGetOrderAndItemsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SaleServiceGetOrderAndItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceGetOrderAndItemsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetOrderAndItemsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ComplexOrder{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SaleServiceGetOrderAndItemsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetOrderAndItems_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetOrderAndItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceGetOrderAndItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetOrderAndItemsResult(%+v)", *p)
}

// Attributes:
//  - ID
type SaleServiceGetSubOrderArgs struct {
	ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewSaleServiceGetSubOrderArgs() *SaleServiceGetSubOrderArgs {
	return &SaleServiceGetSubOrderArgs{}
}

func (p *SaleServiceGetSubOrderArgs) GetID() int64 {
	return p.ID
}
func (p *SaleServiceGetSubOrderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *SaleServiceGetSubOrderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSubOrder_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *SaleServiceGetSubOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetSubOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceGetSubOrderResult struct {
	Success *ComplexOrder `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSaleServiceGetSubOrderResult() *SaleServiceGetSubOrderResult {
	return &SaleServiceGetSubOrderResult{}
}

var SaleServiceGetSubOrderResult_Success_DEFAULT *ComplexOrder

func (p *SaleServiceGetSubOrderResult) GetSuccess() *ComplexOrder {
	if !p.IsSetSuccess() {
		return SaleServiceGetSubOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SaleServiceGetSubOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceGetSubOrderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ComplexOrder{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSubOrder_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceGetSubOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetSubOrderResult(%+v)", *p)
}

// Attributes:
//  - OrderNo
type SaleServiceGetSubOrderByNoArgs struct {
	OrderNo string `thrift:"orderNo,1" db:"orderNo" json:"orderNo"`
}

func NewSaleServiceGetSubOrderByNoArgs() *SaleServiceGetSubOrderByNoArgs {
	return &SaleServiceGetSubOrderByNoArgs{}
}

func (p *SaleServiceGetSubOrderByNoArgs) GetOrderNo() string {
	return p.OrderNo
}
func (p *SaleServiceGetSubOrderByNoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderByNoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderNo = v
	}
	return nil
}

func (p *SaleServiceGetSubOrderByNoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSubOrderByNo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderByNoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderNo", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderNo (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderNo: ", p), err)
	}
	return err
}

func (p *SaleServiceGetSubOrderByNoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetSubOrderByNoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceGetSubOrderByNoResult struct {
	Success *ComplexOrder `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSaleServiceGetSubOrderByNoResult() *SaleServiceGetSubOrderByNoResult {
	return &SaleServiceGetSubOrderByNoResult{}
}

var SaleServiceGetSubOrderByNoResult_Success_DEFAULT *ComplexOrder

func (p *SaleServiceGetSubOrderByNoResult) GetSuccess() *ComplexOrder {
	if !p.IsSetSuccess() {
		return SaleServiceGetSubOrderByNoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SaleServiceGetSubOrderByNoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceGetSubOrderByNoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderByNoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ComplexOrder{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderByNoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSubOrderByNo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderByNoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceGetSubOrderByNoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetSubOrderByNoResult(%+v)", *p)
}

// Attributes:
//  - SubOrderId
type SaleServiceGetSubOrderItemsArgs struct {
	SubOrderId int64 `thrift:"subOrderId,1" db:"subOrderId" json:"subOrderId"`
}

func NewSaleServiceGetSubOrderItemsArgs() *SaleServiceGetSubOrderItemsArgs {
	return &SaleServiceGetSubOrderItemsArgs{}
}

func (p *SaleServiceGetSubOrderItemsArgs) GetSubOrderId() int64 {
	return p.SubOrderId
}
func (p *SaleServiceGetSubOrderItemsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderItemsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SubOrderId = v
	}
	return nil
}

func (p *SaleServiceGetSubOrderItemsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSubOrderItems_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subOrderId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:subOrderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SubOrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subOrderId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:subOrderId: ", p), err)
	}
	return err
}

func (p *SaleServiceGetSubOrderItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetSubOrderItemsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceGetSubOrderItemsResult struct {
	Success []*ComplexItem `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSaleServiceGetSubOrderItemsResult() *SaleServiceGetSubOrderItemsResult {
	return &SaleServiceGetSubOrderItemsResult{}
}

var SaleServiceGetSubOrderItemsResult_Success_DEFAULT []*ComplexItem

func (p *SaleServiceGetSubOrderItemsResult) GetSuccess() []*ComplexItem {
	return p.Success
}
func (p *SaleServiceGetSubOrderItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceGetSubOrderItemsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderItemsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ComplexItem, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem37 := &ComplexItem{}
		if err := _elem37.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
		}
		p.Success = append(p.Success, _elem37)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderItemsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSubOrderItems_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceGetSubOrderItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetSubOrderItemsResult(%+v)", *p)
}

// Attributes:
//  - O
//  - Rate
type SaleServiceSubmitTradeOrderArgs struct {
	O    *ComplexOrder `thrift:"o,1" db:"o" json:"o"`
	Rate float64       `thrift:"rate,2" db:"rate" json:"rate"`
}

func NewSaleServiceSubmitTradeOrderArgs() *SaleServiceSubmitTradeOrderArgs {
	return &SaleServiceSubmitTradeOrderArgs{}
}

var SaleServiceSubmitTradeOrderArgs_O_DEFAULT *ComplexOrder

func (p *SaleServiceSubmitTradeOrderArgs) GetO() *ComplexOrder {
	if !p.IsSetO() {
		return SaleServiceSubmitTradeOrderArgs_O_DEFAULT
	}
	return p.O
}

func (p *SaleServiceSubmitTradeOrderArgs) GetRate() float64 {
	return p.Rate
}
func (p *SaleServiceSubmitTradeOrderArgs) IsSetO() bool {
	return p.O != nil
}

func (p *SaleServiceSubmitTradeOrderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceSubmitTradeOrderArgs) ReadField1(iprot thrift.TProtocol) error {
	p.O = &ComplexOrder{}
	if err := p.O.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O), err)
	}
	return nil
}

func (p *SaleServiceSubmitTradeOrderArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Rate = v
	}
	return nil
}

func (p *SaleServiceSubmitTradeOrderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SubmitTradeOrder_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceSubmitTradeOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("o", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o: ", p), err)
	}
	if err := p.O.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o: ", p), err)
	}
	return err
}

func (p *SaleServiceSubmitTradeOrderArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rate", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rate: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Rate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rate (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rate: ", p), err)
	}
	return err
}

func (p *SaleServiceSubmitTradeOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceSubmitTradeOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceSubmitTradeOrderResult struct {
	Success *Result64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSaleServiceSubmitTradeOrderResult() *SaleServiceSubmitTradeOrderResult {
	return &SaleServiceSubmitTradeOrderResult{}
}

var SaleServiceSubmitTradeOrderResult_Success_DEFAULT *Result64

func (p *SaleServiceSubmitTradeOrderResult) GetSuccess() *Result64 {
	if !p.IsSetSuccess() {
		return SaleServiceSubmitTradeOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SaleServiceSubmitTradeOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceSubmitTradeOrderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceSubmitTradeOrderResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result64{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SaleServiceSubmitTradeOrderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SubmitTradeOrder_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceSubmitTradeOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceSubmitTradeOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceSubmitTradeOrderResult(%+v)", *p)
}

// Attributes:
//  - OrderId
type SaleServiceTradeOrderCashPayArgs struct {
	OrderId int64 `thrift:"orderId,1" db:"orderId" json:"orderId"`
}

func NewSaleServiceTradeOrderCashPayArgs() *SaleServiceTradeOrderCashPayArgs {
	return &SaleServiceTradeOrderCashPayArgs{}
}

func (p *SaleServiceTradeOrderCashPayArgs) GetOrderId() int64 {
	return p.OrderId
}
func (p *SaleServiceTradeOrderCashPayArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceTradeOrderCashPayArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *SaleServiceTradeOrderCashPayArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TradeOrderCashPay_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceTradeOrderCashPayArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderId: ", p), err)
	}
	return err
}

func (p *SaleServiceTradeOrderCashPayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceTradeOrderCashPayArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceTradeOrderCashPayResult struct {
	Success *Result64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSaleServiceTradeOrderCashPayResult() *SaleServiceTradeOrderCashPayResult {
	return &SaleServiceTradeOrderCashPayResult{}
}

var SaleServiceTradeOrderCashPayResult_Success_DEFAULT *Result64

func (p *SaleServiceTradeOrderCashPayResult) GetSuccess() *Result64 {
	if !p.IsSetSuccess() {
		return SaleServiceTradeOrderCashPayResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SaleServiceTradeOrderCashPayResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceTradeOrderCashPayResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceTradeOrderCashPayResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result64{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SaleServiceTradeOrderCashPayResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TradeOrderCashPay_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceTradeOrderCashPayResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceTradeOrderCashPayResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceTradeOrderCashPayResult(%+v)", *p)
}

// Attributes:
//  - OrderId
//  - Img
type SaleServiceTradeOrderUpdateTicketArgs struct {
	OrderId int64  `thrift:"orderId,1" db:"orderId" json:"orderId"`
	Img     string `thrift:"img,2" db:"img" json:"img"`
}

func NewSaleServiceTradeOrderUpdateTicketArgs() *SaleServiceTradeOrderUpdateTicketArgs {
	return &SaleServiceTradeOrderUpdateTicketArgs{}
}

func (p *SaleServiceTradeOrderUpdateTicketArgs) GetOrderId() int64 {
	return p.OrderId
}

func (p *SaleServiceTradeOrderUpdateTicketArgs) GetImg() string {
	return p.Img
}
func (p *SaleServiceTradeOrderUpdateTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceTradeOrderUpdateTicketArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *SaleServiceTradeOrderUpdateTicketArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Img = v
	}
	return nil
}

func (p *SaleServiceTradeOrderUpdateTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TradeOrderUpdateTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceTradeOrderUpdateTicketArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderId: ", p), err)
	}
	return err
}

func (p *SaleServiceTradeOrderUpdateTicketArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("img", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:img: ", p), err)
	}
	if err := oprot.WriteString(string(p.Img)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.img (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:img: ", p), err)
	}
	return err
}

func (p *SaleServiceTradeOrderUpdateTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceTradeOrderUpdateTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceTradeOrderUpdateTicketResult struct {
	Success *Result64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSaleServiceTradeOrderUpdateTicketResult() *SaleServiceTradeOrderUpdateTicketResult {
	return &SaleServiceTradeOrderUpdateTicketResult{}
}

var SaleServiceTradeOrderUpdateTicketResult_Success_DEFAULT *Result64

func (p *SaleServiceTradeOrderUpdateTicketResult) GetSuccess() *Result64 {
	if !p.IsSetSuccess() {
		return SaleServiceTradeOrderUpdateTicketResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SaleServiceTradeOrderUpdateTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceTradeOrderUpdateTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceTradeOrderUpdateTicketResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result64{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SaleServiceTradeOrderUpdateTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TradeOrderUpdateTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceTradeOrderUpdateTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceTradeOrderUpdateTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceTradeOrderUpdateTicketResult(%+v)", *p)
}

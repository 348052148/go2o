// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package define

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type SaleService interface {
	// Parameters:
	//  - MemberId
	//  - Action
	//  - Data
	WholesaleCartV1(memberId int64, action string, data map[string]string) (r *Result_, err error)
	// Parameters:
	//  - BuyerId
	//  - CartType
	//  - Data
	SubmitOrderV1(buyerId int64, cartType int32, data map[string]string) (r map[string]string, err error)
	// Parameters:
	//  - OrderID
	//  - SubOrder
	GetOrder(order_id string, sub_order bool) (r *ComplexOrder, err error)
	// Parameters:
	//  - ID
	GetSubOrder(id int64) (r *ComplexOrder, err error)
	// Parameters:
	//  - OrderNo
	GetSubOrderByNo(orderNo string) (r *ComplexOrder, err error)
	// Parameters:
	//  - SubOrderId
	GetSubOrderItems(subOrderId int64) (r []*ComplexItem, err error)
	// Parameters:
	//  - O
	//  - Rate
	SubmitTradeOrder(o *ComplexOrder, rate float64) (r *Result64, err error)
	// Parameters:
	//  - OrderId
	TradeOrderCashPay(orderId int64) (r *Result64, err error)
	// Parameters:
	//  - OrderId
	//  - Img
	TradeOrderUpdateTicket(orderId int64, img string) (r *Result64, err error)
}

type SaleServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewSaleServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SaleServiceClient {
	return &SaleServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewSaleServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SaleServiceClient {
	return &SaleServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - MemberId
//  - Action
//  - Data
func (p *SaleServiceClient) WholesaleCartV1(memberId int64, action string, data map[string]string) (r *Result_, err error) {
	if err = p.sendWholesaleCartV1(memberId, action, data); err != nil {
		return
	}
	return p.recvWholesaleCartV1()
}

func (p *SaleServiceClient) sendWholesaleCartV1(memberId int64, action string, data map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("WholesaleCartV1", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceWholesaleCartV1Args{
		MemberId: memberId,
		Action:   action,
		Data:     data,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvWholesaleCartV1() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "WholesaleCartV1" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "WholesaleCartV1 failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "WholesaleCartV1 failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error201 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error202 error
		error202, err = error201.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error202
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "WholesaleCartV1 failed: invalid message type")
		return
	}
	result := SaleServiceWholesaleCartV1Result{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BuyerId
//  - CartType
//  - Data
func (p *SaleServiceClient) SubmitOrderV1(buyerId int64, cartType int32, data map[string]string) (r map[string]string, err error) {
	if err = p.sendSubmitOrderV1(buyerId, cartType, data); err != nil {
		return
	}
	return p.recvSubmitOrderV1()
}

func (p *SaleServiceClient) sendSubmitOrderV1(buyerId int64, cartType int32, data map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("SubmitOrderV1", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceSubmitOrderV1Args{
		BuyerId:  buyerId,
		CartType: cartType,
		Data:     data,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvSubmitOrderV1() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "SubmitOrderV1" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "SubmitOrderV1 failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "SubmitOrderV1 failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error203 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error204 error
		error204, err = error203.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error204
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "SubmitOrderV1 failed: invalid message type")
		return
	}
	result := SaleServiceSubmitOrderV1Result{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OrderID
//  - SubOrder
func (p *SaleServiceClient) GetOrder(order_id string, sub_order bool) (r *ComplexOrder, err error) {
	if err = p.sendGetOrder(order_id, sub_order); err != nil {
		return
	}
	return p.recvGetOrder()
}

func (p *SaleServiceClient) sendGetOrder(order_id string, sub_order bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetOrder", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceGetOrderArgs{
		OrderID:  order_id,
		SubOrder: sub_order,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvGetOrder() (value *ComplexOrder, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetOrder" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetOrder failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetOrder failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error205 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error206 error
		error206, err = error205.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error206
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetOrder failed: invalid message type")
		return
	}
	result := SaleServiceGetOrderResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
func (p *SaleServiceClient) GetSubOrder(id int64) (r *ComplexOrder, err error) {
	if err = p.sendGetSubOrder(id); err != nil {
		return
	}
	return p.recvGetSubOrder()
}

func (p *SaleServiceClient) sendGetSubOrder(id int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetSubOrder", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceGetSubOrderArgs{
		ID: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvGetSubOrder() (value *ComplexOrder, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetSubOrder" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetSubOrder failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetSubOrder failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error207 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error208 error
		error208, err = error207.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error208
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetSubOrder failed: invalid message type")
		return
	}
	result := SaleServiceGetSubOrderResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OrderNo
func (p *SaleServiceClient) GetSubOrderByNo(orderNo string) (r *ComplexOrder, err error) {
	if err = p.sendGetSubOrderByNo(orderNo); err != nil {
		return
	}
	return p.recvGetSubOrderByNo()
}

func (p *SaleServiceClient) sendGetSubOrderByNo(orderNo string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetSubOrderByNo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceGetSubOrderByNoArgs{
		OrderNo: orderNo,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvGetSubOrderByNo() (value *ComplexOrder, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetSubOrderByNo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetSubOrderByNo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetSubOrderByNo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error209 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error210 error
		error210, err = error209.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error210
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetSubOrderByNo failed: invalid message type")
		return
	}
	result := SaleServiceGetSubOrderByNoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SubOrderId
func (p *SaleServiceClient) GetSubOrderItems(subOrderId int64) (r []*ComplexItem, err error) {
	if err = p.sendGetSubOrderItems(subOrderId); err != nil {
		return
	}
	return p.recvGetSubOrderItems()
}

func (p *SaleServiceClient) sendGetSubOrderItems(subOrderId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetSubOrderItems", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceGetSubOrderItemsArgs{
		SubOrderId: subOrderId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvGetSubOrderItems() (value []*ComplexItem, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetSubOrderItems" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetSubOrderItems failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetSubOrderItems failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error211 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error212 error
		error212, err = error211.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error212
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetSubOrderItems failed: invalid message type")
		return
	}
	result := SaleServiceGetSubOrderItemsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - O
//  - Rate
func (p *SaleServiceClient) SubmitTradeOrder(o *ComplexOrder, rate float64) (r *Result64, err error) {
	if err = p.sendSubmitTradeOrder(o, rate); err != nil {
		return
	}
	return p.recvSubmitTradeOrder()
}

func (p *SaleServiceClient) sendSubmitTradeOrder(o *ComplexOrder, rate float64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("SubmitTradeOrder", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceSubmitTradeOrderArgs{
		O:    o,
		Rate: rate,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvSubmitTradeOrder() (value *Result64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "SubmitTradeOrder" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "SubmitTradeOrder failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "SubmitTradeOrder failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error213 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error214 error
		error214, err = error213.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error214
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "SubmitTradeOrder failed: invalid message type")
		return
	}
	result := SaleServiceSubmitTradeOrderResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OrderId
func (p *SaleServiceClient) TradeOrderCashPay(orderId int64) (r *Result64, err error) {
	if err = p.sendTradeOrderCashPay(orderId); err != nil {
		return
	}
	return p.recvTradeOrderCashPay()
}

func (p *SaleServiceClient) sendTradeOrderCashPay(orderId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("TradeOrderCashPay", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceTradeOrderCashPayArgs{
		OrderId: orderId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvTradeOrderCashPay() (value *Result64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "TradeOrderCashPay" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "TradeOrderCashPay failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "TradeOrderCashPay failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error215 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error216 error
		error216, err = error215.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error216
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "TradeOrderCashPay failed: invalid message type")
		return
	}
	result := SaleServiceTradeOrderCashPayResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OrderId
//  - Img
func (p *SaleServiceClient) TradeOrderUpdateTicket(orderId int64, img string) (r *Result64, err error) {
	if err = p.sendTradeOrderUpdateTicket(orderId, img); err != nil {
		return
	}
	return p.recvTradeOrderUpdateTicket()
}

func (p *SaleServiceClient) sendTradeOrderUpdateTicket(orderId int64, img string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("TradeOrderUpdateTicket", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaleServiceTradeOrderUpdateTicketArgs{
		OrderId: orderId,
		Img:     img,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SaleServiceClient) recvTradeOrderUpdateTicket() (value *Result64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "TradeOrderUpdateTicket" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "TradeOrderUpdateTicket failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "TradeOrderUpdateTicket failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error217 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error218 error
		error218, err = error217.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error218
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "TradeOrderUpdateTicket failed: invalid message type")
		return
	}
	result := SaleServiceTradeOrderUpdateTicketResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type SaleServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SaleService
}

func (p *SaleServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SaleServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SaleServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSaleServiceProcessor(handler SaleService) *SaleServiceProcessor {

	self219 := &SaleServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self219.processorMap["WholesaleCartV1"] = &saleServiceProcessorWholesaleCartV1{handler: handler}
	self219.processorMap["SubmitOrderV1"] = &saleServiceProcessorSubmitOrderV1{handler: handler}
	self219.processorMap["GetOrder"] = &saleServiceProcessorGetOrder{handler: handler}
	self219.processorMap["GetSubOrder"] = &saleServiceProcessorGetSubOrder{handler: handler}
	self219.processorMap["GetSubOrderByNo"] = &saleServiceProcessorGetSubOrderByNo{handler: handler}
	self219.processorMap["GetSubOrderItems"] = &saleServiceProcessorGetSubOrderItems{handler: handler}
	self219.processorMap["SubmitTradeOrder"] = &saleServiceProcessorSubmitTradeOrder{handler: handler}
	self219.processorMap["TradeOrderCashPay"] = &saleServiceProcessorTradeOrderCashPay{handler: handler}
	self219.processorMap["TradeOrderUpdateTicket"] = &saleServiceProcessorTradeOrderUpdateTicket{handler: handler}
	return self219
}

func (p *SaleServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x220 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x220.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x220

}

type saleServiceProcessorWholesaleCartV1 struct {
	handler SaleService
}

func (p *saleServiceProcessorWholesaleCartV1) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceWholesaleCartV1Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("WholesaleCartV1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceWholesaleCartV1Result{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.WholesaleCartV1(args.MemberId, args.Action, args.Data); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WholesaleCartV1: "+err2.Error())
		oprot.WriteMessageBegin("WholesaleCartV1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("WholesaleCartV1", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorSubmitOrderV1 struct {
	handler SaleService
}

func (p *saleServiceProcessorSubmitOrderV1) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceSubmitOrderV1Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SubmitOrderV1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceSubmitOrderV1Result{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.SubmitOrderV1(args.BuyerId, args.CartType, args.Data); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SubmitOrderV1: "+err2.Error())
		oprot.WriteMessageBegin("SubmitOrderV1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SubmitOrderV1", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorGetOrder struct {
	handler SaleService
}

func (p *saleServiceProcessorGetOrder) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceGetOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceGetOrderResult{}
	var retval *ComplexOrder
	var err2 error
	if retval, err2 = p.handler.GetOrder(args.OrderID, args.SubOrder); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetOrder: "+err2.Error())
		oprot.WriteMessageBegin("GetOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorGetSubOrder struct {
	handler SaleService
}

func (p *saleServiceProcessorGetSubOrder) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceGetSubOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSubOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceGetSubOrderResult{}
	var retval *ComplexOrder
	var err2 error
	if retval, err2 = p.handler.GetSubOrder(args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSubOrder: "+err2.Error())
		oprot.WriteMessageBegin("GetSubOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSubOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorGetSubOrderByNo struct {
	handler SaleService
}

func (p *saleServiceProcessorGetSubOrderByNo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceGetSubOrderByNoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSubOrderByNo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceGetSubOrderByNoResult{}
	var retval *ComplexOrder
	var err2 error
	if retval, err2 = p.handler.GetSubOrderByNo(args.OrderNo); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSubOrderByNo: "+err2.Error())
		oprot.WriteMessageBegin("GetSubOrderByNo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSubOrderByNo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorGetSubOrderItems struct {
	handler SaleService
}

func (p *saleServiceProcessorGetSubOrderItems) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceGetSubOrderItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSubOrderItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceGetSubOrderItemsResult{}
	var retval []*ComplexItem
	var err2 error
	if retval, err2 = p.handler.GetSubOrderItems(args.SubOrderId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSubOrderItems: "+err2.Error())
		oprot.WriteMessageBegin("GetSubOrderItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSubOrderItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorSubmitTradeOrder struct {
	handler SaleService
}

func (p *saleServiceProcessorSubmitTradeOrder) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceSubmitTradeOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SubmitTradeOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceSubmitTradeOrderResult{}
	var retval *Result64
	var err2 error
	if retval, err2 = p.handler.SubmitTradeOrder(args.O, args.Rate); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SubmitTradeOrder: "+err2.Error())
		oprot.WriteMessageBegin("SubmitTradeOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SubmitTradeOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorTradeOrderCashPay struct {
	handler SaleService
}

func (p *saleServiceProcessorTradeOrderCashPay) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceTradeOrderCashPayArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("TradeOrderCashPay", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceTradeOrderCashPayResult{}
	var retval *Result64
	var err2 error
	if retval, err2 = p.handler.TradeOrderCashPay(args.OrderId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TradeOrderCashPay: "+err2.Error())
		oprot.WriteMessageBegin("TradeOrderCashPay", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("TradeOrderCashPay", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type saleServiceProcessorTradeOrderUpdateTicket struct {
	handler SaleService
}

func (p *saleServiceProcessorTradeOrderUpdateTicket) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaleServiceTradeOrderUpdateTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("TradeOrderUpdateTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaleServiceTradeOrderUpdateTicketResult{}
	var retval *Result64
	var err2 error
	if retval, err2 = p.handler.TradeOrderUpdateTicket(args.OrderId, args.Img); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TradeOrderUpdateTicket: "+err2.Error())
		oprot.WriteMessageBegin("TradeOrderUpdateTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("TradeOrderUpdateTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - MemberId
//  - Action
//  - Data
type SaleServiceWholesaleCartV1Args struct {
	MemberId int64             `thrift:"memberId,1" json:"memberId"`
	Action   string            `thrift:"action,2" json:"action"`
	Data     map[string]string `thrift:"data,3" json:"data"`
}

func NewSaleServiceWholesaleCartV1Args() *SaleServiceWholesaleCartV1Args {
	return &SaleServiceWholesaleCartV1Args{}
}

func (p *SaleServiceWholesaleCartV1Args) GetMemberId() int64 {
	return p.MemberId
}

func (p *SaleServiceWholesaleCartV1Args) GetAction() string {
	return p.Action
}

func (p *SaleServiceWholesaleCartV1Args) GetData() map[string]string {
	return p.Data
}
func (p *SaleServiceWholesaleCartV1Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceWholesaleCartV1Args) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemberId = v
	}
	return nil
}

func (p *SaleServiceWholesaleCartV1Args) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Action = v
	}
	return nil
}

func (p *SaleServiceWholesaleCartV1Args) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Data = tMap
	for i := 0; i < size; i++ {
		var _key221 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key221 = v
		}
		var _val222 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val222 = v
		}
		p.Data[_key221] = _val222
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SaleServiceWholesaleCartV1Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("WholesaleCartV1_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceWholesaleCartV1Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemberId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memberId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberId: ", p), err)
	}
	return err
}

func (p *SaleServiceWholesaleCartV1Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("action", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:action: ", p), err)
	}
	if err := oprot.WriteString(string(p.Action)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.action (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:action: ", p), err)
	}
	return err
}

func (p *SaleServiceWholesaleCartV1Args) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Data {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err)
	}
	return err
}

func (p *SaleServiceWholesaleCartV1Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceWholesaleCartV1Args(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceWholesaleCartV1Result struct {
	Success *Result_ `thrift:"success,0" json:"success,omitempty"`
}

func NewSaleServiceWholesaleCartV1Result() *SaleServiceWholesaleCartV1Result {
	return &SaleServiceWholesaleCartV1Result{}
}

var SaleServiceWholesaleCartV1Result_Success_DEFAULT *Result_

func (p *SaleServiceWholesaleCartV1Result) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return SaleServiceWholesaleCartV1Result_Success_DEFAULT
	}
	return p.Success
}
func (p *SaleServiceWholesaleCartV1Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceWholesaleCartV1Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceWholesaleCartV1Result) readField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SaleServiceWholesaleCartV1Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("WholesaleCartV1_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceWholesaleCartV1Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceWholesaleCartV1Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceWholesaleCartV1Result(%+v)", *p)
}

// Attributes:
//  - BuyerId
//  - CartType
//  - Data
type SaleServiceSubmitOrderV1Args struct {
	BuyerId  int64             `thrift:"buyerId,1" json:"buyerId"`
	CartType int32             `thrift:"cartType,2" json:"cartType"`
	Data     map[string]string `thrift:"data,3" json:"data"`
}

func NewSaleServiceSubmitOrderV1Args() *SaleServiceSubmitOrderV1Args {
	return &SaleServiceSubmitOrderV1Args{}
}

func (p *SaleServiceSubmitOrderV1Args) GetBuyerId() int64 {
	return p.BuyerId
}

func (p *SaleServiceSubmitOrderV1Args) GetCartType() int32 {
	return p.CartType
}

func (p *SaleServiceSubmitOrderV1Args) GetData() map[string]string {
	return p.Data
}
func (p *SaleServiceSubmitOrderV1Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceSubmitOrderV1Args) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BuyerId = v
	}
	return nil
}

func (p *SaleServiceSubmitOrderV1Args) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CartType = v
	}
	return nil
}

func (p *SaleServiceSubmitOrderV1Args) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Data = tMap
	for i := 0; i < size; i++ {
		var _key223 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key223 = v
		}
		var _val224 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val224 = v
		}
		p.Data[_key223] = _val224
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SaleServiceSubmitOrderV1Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SubmitOrderV1_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceSubmitOrderV1Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("buyerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:buyerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BuyerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.buyerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:buyerId: ", p), err)
	}
	return err
}

func (p *SaleServiceSubmitOrderV1Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cartType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cartType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CartType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cartType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cartType: ", p), err)
	}
	return err
}

func (p *SaleServiceSubmitOrderV1Args) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Data {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err)
	}
	return err
}

func (p *SaleServiceSubmitOrderV1Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceSubmitOrderV1Args(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceSubmitOrderV1Result struct {
	Success map[string]string `thrift:"success,0" json:"success,omitempty"`
}

func NewSaleServiceSubmitOrderV1Result() *SaleServiceSubmitOrderV1Result {
	return &SaleServiceSubmitOrderV1Result{}
}

var SaleServiceSubmitOrderV1Result_Success_DEFAULT map[string]string

func (p *SaleServiceSubmitOrderV1Result) GetSuccess() map[string]string {
	return p.Success
}
func (p *SaleServiceSubmitOrderV1Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceSubmitOrderV1Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceSubmitOrderV1Result) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key225 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key225 = v
		}
		var _val226 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val226 = v
		}
		p.Success[_key225] = _val226
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SaleServiceSubmitOrderV1Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SubmitOrderV1_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceSubmitOrderV1Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceSubmitOrderV1Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceSubmitOrderV1Result(%+v)", *p)
}

// Attributes:
//  - OrderID
//  - SubOrder
type SaleServiceGetOrderArgs struct {
	OrderID  string `thrift:"order_id,1" json:"order_id"`
	SubOrder bool   `thrift:"sub_order,2" json:"sub_order"`
}

func NewSaleServiceGetOrderArgs() *SaleServiceGetOrderArgs {
	return &SaleServiceGetOrderArgs{}
}

func (p *SaleServiceGetOrderArgs) GetOrderID() string {
	return p.OrderID
}

func (p *SaleServiceGetOrderArgs) GetSubOrder() bool {
	return p.SubOrder
}
func (p *SaleServiceGetOrderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetOrderArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderID = v
	}
	return nil
}

func (p *SaleServiceGetOrderArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SubOrder = v
	}
	return nil
}

func (p *SaleServiceGetOrderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetOrder_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("order_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:order_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.order_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:order_id: ", p), err)
	}
	return err
}

func (p *SaleServiceGetOrderArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sub_order", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sub_order: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.SubOrder)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sub_order (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sub_order: ", p), err)
	}
	return err
}

func (p *SaleServiceGetOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceGetOrderResult struct {
	Success *ComplexOrder `thrift:"success,0" json:"success,omitempty"`
}

func NewSaleServiceGetOrderResult() *SaleServiceGetOrderResult {
	return &SaleServiceGetOrderResult{}
}

var SaleServiceGetOrderResult_Success_DEFAULT *ComplexOrder

func (p *SaleServiceGetOrderResult) GetSuccess() *ComplexOrder {
	if !p.IsSetSuccess() {
		return SaleServiceGetOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SaleServiceGetOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceGetOrderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetOrderResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ComplexOrder{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SaleServiceGetOrderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetOrder_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceGetOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetOrderResult(%+v)", *p)
}

// Attributes:
//  - ID
type SaleServiceGetSubOrderArgs struct {
	ID int64 `thrift:"id,1" json:"id"`
}

func NewSaleServiceGetSubOrderArgs() *SaleServiceGetSubOrderArgs {
	return &SaleServiceGetSubOrderArgs{}
}

func (p *SaleServiceGetSubOrderArgs) GetID() int64 {
	return p.ID
}
func (p *SaleServiceGetSubOrderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *SaleServiceGetSubOrderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSubOrder_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *SaleServiceGetSubOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetSubOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceGetSubOrderResult struct {
	Success *ComplexOrder `thrift:"success,0" json:"success,omitempty"`
}

func NewSaleServiceGetSubOrderResult() *SaleServiceGetSubOrderResult {
	return &SaleServiceGetSubOrderResult{}
}

var SaleServiceGetSubOrderResult_Success_DEFAULT *ComplexOrder

func (p *SaleServiceGetSubOrderResult) GetSuccess() *ComplexOrder {
	if !p.IsSetSuccess() {
		return SaleServiceGetSubOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SaleServiceGetSubOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceGetSubOrderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ComplexOrder{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSubOrder_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceGetSubOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetSubOrderResult(%+v)", *p)
}

// Attributes:
//  - OrderNo
type SaleServiceGetSubOrderByNoArgs struct {
	OrderNo string `thrift:"orderNo,1" json:"orderNo"`
}

func NewSaleServiceGetSubOrderByNoArgs() *SaleServiceGetSubOrderByNoArgs {
	return &SaleServiceGetSubOrderByNoArgs{}
}

func (p *SaleServiceGetSubOrderByNoArgs) GetOrderNo() string {
	return p.OrderNo
}
func (p *SaleServiceGetSubOrderByNoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderByNoArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderNo = v
	}
	return nil
}

func (p *SaleServiceGetSubOrderByNoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSubOrderByNo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderByNoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderNo", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderNo (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderNo: ", p), err)
	}
	return err
}

func (p *SaleServiceGetSubOrderByNoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetSubOrderByNoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceGetSubOrderByNoResult struct {
	Success *ComplexOrder `thrift:"success,0" json:"success,omitempty"`
}

func NewSaleServiceGetSubOrderByNoResult() *SaleServiceGetSubOrderByNoResult {
	return &SaleServiceGetSubOrderByNoResult{}
}

var SaleServiceGetSubOrderByNoResult_Success_DEFAULT *ComplexOrder

func (p *SaleServiceGetSubOrderByNoResult) GetSuccess() *ComplexOrder {
	if !p.IsSetSuccess() {
		return SaleServiceGetSubOrderByNoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SaleServiceGetSubOrderByNoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceGetSubOrderByNoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderByNoResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ComplexOrder{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderByNoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSubOrderByNo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderByNoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceGetSubOrderByNoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetSubOrderByNoResult(%+v)", *p)
}

// Attributes:
//  - SubOrderId
type SaleServiceGetSubOrderItemsArgs struct {
	SubOrderId int64 `thrift:"subOrderId,1" json:"subOrderId"`
}

func NewSaleServiceGetSubOrderItemsArgs() *SaleServiceGetSubOrderItemsArgs {
	return &SaleServiceGetSubOrderItemsArgs{}
}

func (p *SaleServiceGetSubOrderItemsArgs) GetSubOrderId() int64 {
	return p.SubOrderId
}
func (p *SaleServiceGetSubOrderItemsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderItemsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SubOrderId = v
	}
	return nil
}

func (p *SaleServiceGetSubOrderItemsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSubOrderItems_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subOrderId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:subOrderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SubOrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subOrderId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:subOrderId: ", p), err)
	}
	return err
}

func (p *SaleServiceGetSubOrderItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetSubOrderItemsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceGetSubOrderItemsResult struct {
	Success []*ComplexItem `thrift:"success,0" json:"success,omitempty"`
}

func NewSaleServiceGetSubOrderItemsResult() *SaleServiceGetSubOrderItemsResult {
	return &SaleServiceGetSubOrderItemsResult{}
}

var SaleServiceGetSubOrderItemsResult_Success_DEFAULT []*ComplexItem

func (p *SaleServiceGetSubOrderItemsResult) GetSuccess() []*ComplexItem {
	return p.Success
}
func (p *SaleServiceGetSubOrderItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceGetSubOrderItemsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderItemsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ComplexItem, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem227 := &ComplexItem{}
		if err := _elem227.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem227), err)
		}
		p.Success = append(p.Success, _elem227)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderItemsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSubOrderItems_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceGetSubOrderItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceGetSubOrderItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceGetSubOrderItemsResult(%+v)", *p)
}

// Attributes:
//  - O
//  - Rate
type SaleServiceSubmitTradeOrderArgs struct {
	O    *ComplexOrder `thrift:"o,1" json:"o"`
	Rate float64       `thrift:"rate,2" json:"rate"`
}

func NewSaleServiceSubmitTradeOrderArgs() *SaleServiceSubmitTradeOrderArgs {
	return &SaleServiceSubmitTradeOrderArgs{}
}

var SaleServiceSubmitTradeOrderArgs_O_DEFAULT *ComplexOrder

func (p *SaleServiceSubmitTradeOrderArgs) GetO() *ComplexOrder {
	if !p.IsSetO() {
		return SaleServiceSubmitTradeOrderArgs_O_DEFAULT
	}
	return p.O
}

func (p *SaleServiceSubmitTradeOrderArgs) GetRate() float64 {
	return p.Rate
}
func (p *SaleServiceSubmitTradeOrderArgs) IsSetO() bool {
	return p.O != nil
}

func (p *SaleServiceSubmitTradeOrderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceSubmitTradeOrderArgs) readField1(iprot thrift.TProtocol) error {
	p.O = &ComplexOrder{}
	if err := p.O.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O), err)
	}
	return nil
}

func (p *SaleServiceSubmitTradeOrderArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Rate = v
	}
	return nil
}

func (p *SaleServiceSubmitTradeOrderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SubmitTradeOrder_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceSubmitTradeOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("o", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o: ", p), err)
	}
	if err := p.O.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o: ", p), err)
	}
	return err
}

func (p *SaleServiceSubmitTradeOrderArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rate", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rate: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Rate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rate (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rate: ", p), err)
	}
	return err
}

func (p *SaleServiceSubmitTradeOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceSubmitTradeOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceSubmitTradeOrderResult struct {
	Success *Result64 `thrift:"success,0" json:"success,omitempty"`
}

func NewSaleServiceSubmitTradeOrderResult() *SaleServiceSubmitTradeOrderResult {
	return &SaleServiceSubmitTradeOrderResult{}
}

var SaleServiceSubmitTradeOrderResult_Success_DEFAULT *Result64

func (p *SaleServiceSubmitTradeOrderResult) GetSuccess() *Result64 {
	if !p.IsSetSuccess() {
		return SaleServiceSubmitTradeOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SaleServiceSubmitTradeOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceSubmitTradeOrderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceSubmitTradeOrderResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Result64{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SaleServiceSubmitTradeOrderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SubmitTradeOrder_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceSubmitTradeOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceSubmitTradeOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceSubmitTradeOrderResult(%+v)", *p)
}

// Attributes:
//  - OrderId
type SaleServiceTradeOrderCashPayArgs struct {
	OrderId int64 `thrift:"orderId,1" json:"orderId"`
}

func NewSaleServiceTradeOrderCashPayArgs() *SaleServiceTradeOrderCashPayArgs {
	return &SaleServiceTradeOrderCashPayArgs{}
}

func (p *SaleServiceTradeOrderCashPayArgs) GetOrderId() int64 {
	return p.OrderId
}
func (p *SaleServiceTradeOrderCashPayArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceTradeOrderCashPayArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *SaleServiceTradeOrderCashPayArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TradeOrderCashPay_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceTradeOrderCashPayArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderId: ", p), err)
	}
	return err
}

func (p *SaleServiceTradeOrderCashPayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceTradeOrderCashPayArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceTradeOrderCashPayResult struct {
	Success *Result64 `thrift:"success,0" json:"success,omitempty"`
}

func NewSaleServiceTradeOrderCashPayResult() *SaleServiceTradeOrderCashPayResult {
	return &SaleServiceTradeOrderCashPayResult{}
}

var SaleServiceTradeOrderCashPayResult_Success_DEFAULT *Result64

func (p *SaleServiceTradeOrderCashPayResult) GetSuccess() *Result64 {
	if !p.IsSetSuccess() {
		return SaleServiceTradeOrderCashPayResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SaleServiceTradeOrderCashPayResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceTradeOrderCashPayResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceTradeOrderCashPayResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Result64{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SaleServiceTradeOrderCashPayResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TradeOrderCashPay_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceTradeOrderCashPayResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceTradeOrderCashPayResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceTradeOrderCashPayResult(%+v)", *p)
}

// Attributes:
//  - OrderId
//  - Img
type SaleServiceTradeOrderUpdateTicketArgs struct {
	OrderId int64  `thrift:"orderId,1" json:"orderId"`
	Img     string `thrift:"img,2" json:"img"`
}

func NewSaleServiceTradeOrderUpdateTicketArgs() *SaleServiceTradeOrderUpdateTicketArgs {
	return &SaleServiceTradeOrderUpdateTicketArgs{}
}

func (p *SaleServiceTradeOrderUpdateTicketArgs) GetOrderId() int64 {
	return p.OrderId
}

func (p *SaleServiceTradeOrderUpdateTicketArgs) GetImg() string {
	return p.Img
}
func (p *SaleServiceTradeOrderUpdateTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceTradeOrderUpdateTicketArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *SaleServiceTradeOrderUpdateTicketArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Img = v
	}
	return nil
}

func (p *SaleServiceTradeOrderUpdateTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TradeOrderUpdateTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceTradeOrderUpdateTicketArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderId: ", p), err)
	}
	return err
}

func (p *SaleServiceTradeOrderUpdateTicketArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("img", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:img: ", p), err)
	}
	if err := oprot.WriteString(string(p.Img)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.img (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:img: ", p), err)
	}
	return err
}

func (p *SaleServiceTradeOrderUpdateTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceTradeOrderUpdateTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SaleServiceTradeOrderUpdateTicketResult struct {
	Success *Result64 `thrift:"success,0" json:"success,omitempty"`
}

func NewSaleServiceTradeOrderUpdateTicketResult() *SaleServiceTradeOrderUpdateTicketResult {
	return &SaleServiceTradeOrderUpdateTicketResult{}
}

var SaleServiceTradeOrderUpdateTicketResult_Success_DEFAULT *Result64

func (p *SaleServiceTradeOrderUpdateTicketResult) GetSuccess() *Result64 {
	if !p.IsSetSuccess() {
		return SaleServiceTradeOrderUpdateTicketResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SaleServiceTradeOrderUpdateTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaleServiceTradeOrderUpdateTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SaleServiceTradeOrderUpdateTicketResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Result64{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SaleServiceTradeOrderUpdateTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TradeOrderUpdateTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SaleServiceTradeOrderUpdateTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SaleServiceTradeOrderUpdateTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaleServiceTradeOrderUpdateTicketResult(%+v)", *p)
}

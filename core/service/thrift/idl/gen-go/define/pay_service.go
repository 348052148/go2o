// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package define

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - ID
//  - TradeNo
//  - VendorId
//  - Type
//  - OrderId
//  - Subject
//  - BuyUser
//  - PaymentUser
//  - TotalFee
//  - BalanceDiscount
//  - IntegralDiscount
//  - SystemDiscount
//  - CouponDiscount
//  - SubAmount
//  - AdjustmentAmount
//  - FinalAmount
//  - PaymentOptFlag
//  - PaymentSign
//  - OuterNo
//  - CreateTime
//  - PaidTime
//  - State
type PaymentOrder struct {
	ID               int32   `thrift:"ID,1" db:"ID" json:"ID"`
	TradeNo          string  `thrift:"TradeNo,2" db:"TradeNo" json:"TradeNo"`
	VendorId         int32   `thrift:"VendorId,3" db:"VendorId" json:"VendorId"`
	Type             int32   `thrift:"Type,4" db:"Type" json:"Type"`
	OrderId          int32   `thrift:"OrderId,5" db:"OrderId" json:"OrderId"`
	Subject          string  `thrift:"Subject,6" db:"Subject" json:"Subject"`
	BuyUser          int64   `thrift:"BuyUser,7" db:"BuyUser" json:"BuyUser"`
	PaymentUser      int64   `thrift:"PaymentUser,8" db:"PaymentUser" json:"PaymentUser"`
	TotalFee         float64 `thrift:"TotalFee,9" db:"TotalFee" json:"TotalFee"`
	BalanceDiscount  float64 `thrift:"BalanceDiscount,10" db:"BalanceDiscount" json:"BalanceDiscount"`
	IntegralDiscount float64 `thrift:"IntegralDiscount,11" db:"IntegralDiscount" json:"IntegralDiscount"`
	SystemDiscount   float64 `thrift:"SystemDiscount,12" db:"SystemDiscount" json:"SystemDiscount"`
	CouponDiscount   float64 `thrift:"CouponDiscount,13" db:"CouponDiscount" json:"CouponDiscount"`
	SubAmount        float64 `thrift:"SubAmount,14" db:"SubAmount" json:"SubAmount"`
	AdjustmentAmount float64 `thrift:"AdjustmentAmount,15" db:"AdjustmentAmount" json:"AdjustmentAmount"`
	FinalAmount      float64 `thrift:"FinalAmount,16" db:"FinalAmount" json:"FinalAmount"`
	PaymentOptFlag   int32   `thrift:"PaymentOptFlag,17" db:"PaymentOptFlag" json:"PaymentOptFlag"`
	PaymentSign      int32   `thrift:"PaymentSign,18" db:"PaymentSign" json:"PaymentSign"`
	OuterNo          string  `thrift:"OuterNo,19" db:"OuterNo" json:"OuterNo"`
	CreateTime       int64   `thrift:"CreateTime,20" db:"CreateTime" json:"CreateTime"`
	PaidTime         int64   `thrift:"PaidTime,21" db:"PaidTime" json:"PaidTime"`
	State            int32   `thrift:"State,22" db:"State" json:"State"`
}

func NewPaymentOrder() *PaymentOrder {
	return &PaymentOrder{}
}

func (p *PaymentOrder) GetID() int32 {
	return p.ID
}

func (p *PaymentOrder) GetTradeNo() string {
	return p.TradeNo
}

func (p *PaymentOrder) GetVendorId() int32 {
	return p.VendorId
}

func (p *PaymentOrder) GetType() int32 {
	return p.Type
}

func (p *PaymentOrder) GetOrderId() int32 {
	return p.OrderId
}

func (p *PaymentOrder) GetSubject() string {
	return p.Subject
}

func (p *PaymentOrder) GetBuyUser() int64 {
	return p.BuyUser
}

func (p *PaymentOrder) GetPaymentUser() int64 {
	return p.PaymentUser
}

func (p *PaymentOrder) GetTotalFee() float64 {
	return p.TotalFee
}

func (p *PaymentOrder) GetBalanceDiscount() float64 {
	return p.BalanceDiscount
}

func (p *PaymentOrder) GetIntegralDiscount() float64 {
	return p.IntegralDiscount
}

func (p *PaymentOrder) GetSystemDiscount() float64 {
	return p.SystemDiscount
}

func (p *PaymentOrder) GetCouponDiscount() float64 {
	return p.CouponDiscount
}

func (p *PaymentOrder) GetSubAmount() float64 {
	return p.SubAmount
}

func (p *PaymentOrder) GetAdjustmentAmount() float64 {
	return p.AdjustmentAmount
}

func (p *PaymentOrder) GetFinalAmount() float64 {
	return p.FinalAmount
}

func (p *PaymentOrder) GetPaymentOptFlag() int32 {
	return p.PaymentOptFlag
}

func (p *PaymentOrder) GetPaymentSign() int32 {
	return p.PaymentSign
}

func (p *PaymentOrder) GetOuterNo() string {
	return p.OuterNo
}

func (p *PaymentOrder) GetCreateTime() int64 {
	return p.CreateTime
}

func (p *PaymentOrder) GetPaidTime() int64 {
	return p.PaidTime
}

func (p *PaymentOrder) GetState() int32 {
	return p.State
}
func (p *PaymentOrder) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.ReadField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentOrder) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *PaymentOrder) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TradeNo = v
	}
	return nil
}

func (p *PaymentOrder) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.VendorId = v
	}
	return nil
}

func (p *PaymentOrder) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *PaymentOrder) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *PaymentOrder) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Subject = v
	}
	return nil
}

func (p *PaymentOrder) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.BuyUser = v
	}
	return nil
}

func (p *PaymentOrder) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.PaymentUser = v
	}
	return nil
}

func (p *PaymentOrder) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.TotalFee = v
	}
	return nil
}

func (p *PaymentOrder) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.BalanceDiscount = v
	}
	return nil
}

func (p *PaymentOrder) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.IntegralDiscount = v
	}
	return nil
}

func (p *PaymentOrder) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.SystemDiscount = v
	}
	return nil
}

func (p *PaymentOrder) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.CouponDiscount = v
	}
	return nil
}

func (p *PaymentOrder) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.SubAmount = v
	}
	return nil
}

func (p *PaymentOrder) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.AdjustmentAmount = v
	}
	return nil
}

func (p *PaymentOrder) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.FinalAmount = v
	}
	return nil
}

func (p *PaymentOrder) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.PaymentOptFlag = v
	}
	return nil
}

func (p *PaymentOrder) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.PaymentSign = v
	}
	return nil
}

func (p *PaymentOrder) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.OuterNo = v
	}
	return nil
}

func (p *PaymentOrder) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *PaymentOrder) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.PaidTime = v
	}
	return nil
}

func (p *PaymentOrder) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *PaymentOrder) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PaymentOrder"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField19(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField22(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentOrder) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TradeNo", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:TradeNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.TradeNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TradeNo (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:TradeNo: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VendorId", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:VendorId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VendorId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.VendorId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:VendorId: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Type", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Type (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Type: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrderId", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:OrderId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OrderId (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:OrderId: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Subject", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Subject: ", p), err)
	}
	if err := oprot.WriteString(string(p.Subject)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Subject (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Subject: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BuyUser", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:BuyUser: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BuyUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BuyUser (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:BuyUser: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PaymentUser", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:PaymentUser: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PaymentUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PaymentUser (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:PaymentUser: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalFee", thrift.DOUBLE, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:TotalFee: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.TotalFee)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalFee (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:TotalFee: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BalanceDiscount", thrift.DOUBLE, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:BalanceDiscount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.BalanceDiscount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BalanceDiscount (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:BalanceDiscount: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IntegralDiscount", thrift.DOUBLE, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:IntegralDiscount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.IntegralDiscount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IntegralDiscount (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:IntegralDiscount: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SystemDiscount", thrift.DOUBLE, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:SystemDiscount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.SystemDiscount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SystemDiscount (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:SystemDiscount: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CouponDiscount", thrift.DOUBLE, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:CouponDiscount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.CouponDiscount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CouponDiscount (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:CouponDiscount: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SubAmount", thrift.DOUBLE, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:SubAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.SubAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SubAmount (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:SubAmount: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AdjustmentAmount", thrift.DOUBLE, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:AdjustmentAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.AdjustmentAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.AdjustmentAmount (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:AdjustmentAmount: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FinalAmount", thrift.DOUBLE, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:FinalAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.FinalAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FinalAmount (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:FinalAmount: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PaymentOptFlag", thrift.I32, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:PaymentOptFlag: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PaymentOptFlag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PaymentOptFlag (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:PaymentOptFlag: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PaymentSign", thrift.I32, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:PaymentSign: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PaymentSign)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PaymentSign (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:PaymentSign: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OuterNo", thrift.STRING, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:OuterNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.OuterNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OuterNo (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:OuterNo: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:CreateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CreateTime (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:CreateTime: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PaidTime", thrift.I64, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:PaidTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PaidTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PaidTime (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:PaidTime: ", p), err)
	}
	return err
}

func (p *PaymentOrder) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("State", thrift.I32, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:State: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.State (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:State: ", p), err)
	}
	return err
}

func (p *PaymentOrder) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentOrder(%+v)", *p)
}

type PaymentService interface {
	// Parameters:
	//  - O
	SubmitPaymentOrder(o *PaymentOrder) (r *Result_, err error)
	// Parameters:
	//  - PaymentNo
	GetPaymentOrder(paymentNo string) (r *PaymentOrder, err error)
	// Parameters:
	//  - TradeNo
	GetPaymentOrderId(tradeNo string) (r int32, err error)
	// Parameters:
	//  - ID
	GetPaymentOrderById(id int32) (r *PaymentOrder, err error)
	// Parameters:
	//  - PaymentNo
	//  - Amount
	AdjustOrder(paymentNo string, amount float64) (r *Result_, err error)
	// Parameters:
	//  - OrderId
	//  - Remark
	DiscountByBalance(orderId int32, remark string) (r *Result_, err error)
	// Parameters:
	//  - OrderId
	//  - Integral
	//  - IgnoreOut
	DiscountByIntegral(orderId int32, integral int64, ignoreOut bool) (r *DResult_, err error)
	// Parameters:
	//  - OrderId
	//  - Remark
	PaymentByWallet(orderId int32, remark string) (r *Result_, err error)
	// Parameters:
	//  - OrderId
	//  - Remark
	HybridPayment(orderId int32, remark string) (r *Result_, err error)
	// Parameters:
	//  - TradeNo
	//  - SpName
	//  - OuterNo
	FinishPayment(tradeNo string, spName string, outerNo string) (r *Result_, err error)
	// Parameters:
	//  - Action
	//  - UserId
	//  - Data
	GatewayV1(action string, userId int64, data map[string]string) (r *Result_, err error)
}

type PaymentServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewPaymentServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PaymentServiceClient {
	return &PaymentServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewPaymentServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PaymentServiceClient {
	return &PaymentServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - O
func (p *PaymentServiceClient) SubmitPaymentOrder(o *PaymentOrder) (r *Result_, err error) {
	if err = p.sendSubmitPaymentOrder(o); err != nil {
		return
	}
	return p.recvSubmitPaymentOrder()
}

func (p *PaymentServiceClient) sendSubmitPaymentOrder(o *PaymentOrder) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("SubmitPaymentOrder", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PaymentServiceSubmitPaymentOrderArgs{
		O: o,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PaymentServiceClient) recvSubmitPaymentOrder() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "SubmitPaymentOrder" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "SubmitPaymentOrder failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "SubmitPaymentOrder failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "SubmitPaymentOrder failed: invalid message type")
		return
	}
	result := PaymentServiceSubmitPaymentOrderResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PaymentNo
func (p *PaymentServiceClient) GetPaymentOrder(paymentNo string) (r *PaymentOrder, err error) {
	if err = p.sendGetPaymentOrder(paymentNo); err != nil {
		return
	}
	return p.recvGetPaymentOrder()
}

func (p *PaymentServiceClient) sendGetPaymentOrder(paymentNo string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetPaymentOrder", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PaymentServiceGetPaymentOrderArgs{
		PaymentNo: paymentNo,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PaymentServiceClient) recvGetPaymentOrder() (value *PaymentOrder, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetPaymentOrder" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetPaymentOrder failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetPaymentOrder failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetPaymentOrder failed: invalid message type")
		return
	}
	result := PaymentServiceGetPaymentOrderResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TradeNo
func (p *PaymentServiceClient) GetPaymentOrderId(tradeNo string) (r int32, err error) {
	if err = p.sendGetPaymentOrderId(tradeNo); err != nil {
		return
	}
	return p.recvGetPaymentOrderId()
}

func (p *PaymentServiceClient) sendGetPaymentOrderId(tradeNo string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetPaymentOrderId", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PaymentServiceGetPaymentOrderIdArgs{
		TradeNo: tradeNo,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PaymentServiceClient) recvGetPaymentOrderId() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetPaymentOrderId" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetPaymentOrderId failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetPaymentOrderId failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetPaymentOrderId failed: invalid message type")
		return
	}
	result := PaymentServiceGetPaymentOrderIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
func (p *PaymentServiceClient) GetPaymentOrderById(id int32) (r *PaymentOrder, err error) {
	if err = p.sendGetPaymentOrderById(id); err != nil {
		return
	}
	return p.recvGetPaymentOrderById()
}

func (p *PaymentServiceClient) sendGetPaymentOrderById(id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetPaymentOrderById", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PaymentServiceGetPaymentOrderByIdArgs{
		ID: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PaymentServiceClient) recvGetPaymentOrderById() (value *PaymentOrder, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetPaymentOrderById" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetPaymentOrderById failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetPaymentOrderById failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetPaymentOrderById failed: invalid message type")
		return
	}
	result := PaymentServiceGetPaymentOrderByIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PaymentNo
//  - Amount
func (p *PaymentServiceClient) AdjustOrder(paymentNo string, amount float64) (r *Result_, err error) {
	if err = p.sendAdjustOrder(paymentNo, amount); err != nil {
		return
	}
	return p.recvAdjustOrder()
}

func (p *PaymentServiceClient) sendAdjustOrder(paymentNo string, amount float64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("AdjustOrder", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PaymentServiceAdjustOrderArgs{
		PaymentNo: paymentNo,
		Amount:    amount,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PaymentServiceClient) recvAdjustOrder() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "AdjustOrder" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "AdjustOrder failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "AdjustOrder failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "AdjustOrder failed: invalid message type")
		return
	}
	result := PaymentServiceAdjustOrderResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OrderId
//  - Remark
func (p *PaymentServiceClient) DiscountByBalance(orderId int32, remark string) (r *Result_, err error) {
	if err = p.sendDiscountByBalance(orderId, remark); err != nil {
		return
	}
	return p.recvDiscountByBalance()
}

func (p *PaymentServiceClient) sendDiscountByBalance(orderId int32, remark string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("DiscountByBalance", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PaymentServiceDiscountByBalanceArgs{
		OrderId: orderId,
		Remark:  remark,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PaymentServiceClient) recvDiscountByBalance() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "DiscountByBalance" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "DiscountByBalance failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "DiscountByBalance failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "DiscountByBalance failed: invalid message type")
		return
	}
	result := PaymentServiceDiscountByBalanceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OrderId
//  - Integral
//  - IgnoreOut
func (p *PaymentServiceClient) DiscountByIntegral(orderId int32, integral int64, ignoreOut bool) (r *DResult_, err error) {
	if err = p.sendDiscountByIntegral(orderId, integral, ignoreOut); err != nil {
		return
	}
	return p.recvDiscountByIntegral()
}

func (p *PaymentServiceClient) sendDiscountByIntegral(orderId int32, integral int64, ignoreOut bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("DiscountByIntegral", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PaymentServiceDiscountByIntegralArgs{
		OrderId:   orderId,
		Integral:  integral,
		IgnoreOut: ignoreOut,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PaymentServiceClient) recvDiscountByIntegral() (value *DResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "DiscountByIntegral" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "DiscountByIntegral failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "DiscountByIntegral failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "DiscountByIntegral failed: invalid message type")
		return
	}
	result := PaymentServiceDiscountByIntegralResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OrderId
//  - Remark
func (p *PaymentServiceClient) PaymentByWallet(orderId int32, remark string) (r *Result_, err error) {
	if err = p.sendPaymentByWallet(orderId, remark); err != nil {
		return
	}
	return p.recvPaymentByWallet()
}

func (p *PaymentServiceClient) sendPaymentByWallet(orderId int32, remark string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("PaymentByWallet", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PaymentServicePaymentByWalletArgs{
		OrderId: orderId,
		Remark:  remark,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PaymentServiceClient) recvPaymentByWallet() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "PaymentByWallet" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "PaymentByWallet failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "PaymentByWallet failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "PaymentByWallet failed: invalid message type")
		return
	}
	result := PaymentServicePaymentByWalletResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OrderId
//  - Remark
func (p *PaymentServiceClient) HybridPayment(orderId int32, remark string) (r *Result_, err error) {
	if err = p.sendHybridPayment(orderId, remark); err != nil {
		return
	}
	return p.recvHybridPayment()
}

func (p *PaymentServiceClient) sendHybridPayment(orderId int32, remark string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("HybridPayment", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PaymentServiceHybridPaymentArgs{
		OrderId: orderId,
		Remark:  remark,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PaymentServiceClient) recvHybridPayment() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "HybridPayment" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "HybridPayment failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "HybridPayment failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "HybridPayment failed: invalid message type")
		return
	}
	result := PaymentServiceHybridPaymentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TradeNo
//  - SpName
//  - OuterNo
func (p *PaymentServiceClient) FinishPayment(tradeNo string, spName string, outerNo string) (r *Result_, err error) {
	if err = p.sendFinishPayment(tradeNo, spName, outerNo); err != nil {
		return
	}
	return p.recvFinishPayment()
}

func (p *PaymentServiceClient) sendFinishPayment(tradeNo string, spName string, outerNo string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("FinishPayment", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PaymentServiceFinishPaymentArgs{
		TradeNo: tradeNo,
		SpName:  spName,
		OuterNo: outerNo,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PaymentServiceClient) recvFinishPayment() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "FinishPayment" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "FinishPayment failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "FinishPayment failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "FinishPayment failed: invalid message type")
		return
	}
	result := PaymentServiceFinishPaymentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Action
//  - UserId
//  - Data
func (p *PaymentServiceClient) GatewayV1(action string, userId int64, data map[string]string) (r *Result_, err error) {
	if err = p.sendGatewayV1(action, userId, data); err != nil {
		return
	}
	return p.recvGatewayV1()
}

func (p *PaymentServiceClient) sendGatewayV1(action string, userId int64, data map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GatewayV1", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PaymentServiceGatewayV1Args{
		Action: action,
		UserId: userId,
		Data:   data,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PaymentServiceClient) recvGatewayV1() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GatewayV1" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GatewayV1 failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GatewayV1 failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GatewayV1 failed: invalid message type")
		return
	}
	result := PaymentServiceGatewayV1Result{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type PaymentServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      PaymentService
}

func (p *PaymentServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *PaymentServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *PaymentServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewPaymentServiceProcessor(handler PaymentService) *PaymentServiceProcessor {

	self22 := &PaymentServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self22.processorMap["SubmitPaymentOrder"] = &paymentServiceProcessorSubmitPaymentOrder{handler: handler}
	self22.processorMap["GetPaymentOrder"] = &paymentServiceProcessorGetPaymentOrder{handler: handler}
	self22.processorMap["GetPaymentOrderId"] = &paymentServiceProcessorGetPaymentOrderId{handler: handler}
	self22.processorMap["GetPaymentOrderById"] = &paymentServiceProcessorGetPaymentOrderById{handler: handler}
	self22.processorMap["AdjustOrder"] = &paymentServiceProcessorAdjustOrder{handler: handler}
	self22.processorMap["DiscountByBalance"] = &paymentServiceProcessorDiscountByBalance{handler: handler}
	self22.processorMap["DiscountByIntegral"] = &paymentServiceProcessorDiscountByIntegral{handler: handler}
	self22.processorMap["PaymentByWallet"] = &paymentServiceProcessorPaymentByWallet{handler: handler}
	self22.processorMap["HybridPayment"] = &paymentServiceProcessorHybridPayment{handler: handler}
	self22.processorMap["FinishPayment"] = &paymentServiceProcessorFinishPayment{handler: handler}
	self22.processorMap["GatewayV1"] = &paymentServiceProcessorGatewayV1{handler: handler}
	return self22
}

func (p *PaymentServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x23 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x23.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x23

}

type paymentServiceProcessorSubmitPaymentOrder struct {
	handler PaymentService
}

func (p *paymentServiceProcessorSubmitPaymentOrder) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PaymentServiceSubmitPaymentOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SubmitPaymentOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PaymentServiceSubmitPaymentOrderResult{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.SubmitPaymentOrder(args.O); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SubmitPaymentOrder: "+err2.Error())
		oprot.WriteMessageBegin("SubmitPaymentOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SubmitPaymentOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type paymentServiceProcessorGetPaymentOrder struct {
	handler PaymentService
}

func (p *paymentServiceProcessorGetPaymentOrder) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PaymentServiceGetPaymentOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPaymentOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PaymentServiceGetPaymentOrderResult{}
	var retval *PaymentOrder
	var err2 error
	if retval, err2 = p.handler.GetPaymentOrder(args.PaymentNo); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPaymentOrder: "+err2.Error())
		oprot.WriteMessageBegin("GetPaymentOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPaymentOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type paymentServiceProcessorGetPaymentOrderId struct {
	handler PaymentService
}

func (p *paymentServiceProcessorGetPaymentOrderId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PaymentServiceGetPaymentOrderIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPaymentOrderId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PaymentServiceGetPaymentOrderIdResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.GetPaymentOrderId(args.TradeNo); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPaymentOrderId: "+err2.Error())
		oprot.WriteMessageBegin("GetPaymentOrderId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetPaymentOrderId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type paymentServiceProcessorGetPaymentOrderById struct {
	handler PaymentService
}

func (p *paymentServiceProcessorGetPaymentOrderById) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PaymentServiceGetPaymentOrderByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPaymentOrderById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PaymentServiceGetPaymentOrderByIdResult{}
	var retval *PaymentOrder
	var err2 error
	if retval, err2 = p.handler.GetPaymentOrderById(args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPaymentOrderById: "+err2.Error())
		oprot.WriteMessageBegin("GetPaymentOrderById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPaymentOrderById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type paymentServiceProcessorAdjustOrder struct {
	handler PaymentService
}

func (p *paymentServiceProcessorAdjustOrder) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PaymentServiceAdjustOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AdjustOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PaymentServiceAdjustOrderResult{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.AdjustOrder(args.PaymentNo, args.Amount); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AdjustOrder: "+err2.Error())
		oprot.WriteMessageBegin("AdjustOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AdjustOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type paymentServiceProcessorDiscountByBalance struct {
	handler PaymentService
}

func (p *paymentServiceProcessorDiscountByBalance) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PaymentServiceDiscountByBalanceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DiscountByBalance", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PaymentServiceDiscountByBalanceResult{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.DiscountByBalance(args.OrderId, args.Remark); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DiscountByBalance: "+err2.Error())
		oprot.WriteMessageBegin("DiscountByBalance", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DiscountByBalance", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type paymentServiceProcessorDiscountByIntegral struct {
	handler PaymentService
}

func (p *paymentServiceProcessorDiscountByIntegral) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PaymentServiceDiscountByIntegralArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DiscountByIntegral", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PaymentServiceDiscountByIntegralResult{}
	var retval *DResult_
	var err2 error
	if retval, err2 = p.handler.DiscountByIntegral(args.OrderId, args.Integral, args.IgnoreOut); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DiscountByIntegral: "+err2.Error())
		oprot.WriteMessageBegin("DiscountByIntegral", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DiscountByIntegral", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type paymentServiceProcessorPaymentByWallet struct {
	handler PaymentService
}

func (p *paymentServiceProcessorPaymentByWallet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PaymentServicePaymentByWalletArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PaymentByWallet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PaymentServicePaymentByWalletResult{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.PaymentByWallet(args.OrderId, args.Remark); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PaymentByWallet: "+err2.Error())
		oprot.WriteMessageBegin("PaymentByWallet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PaymentByWallet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type paymentServiceProcessorHybridPayment struct {
	handler PaymentService
}

func (p *paymentServiceProcessorHybridPayment) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PaymentServiceHybridPaymentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("HybridPayment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PaymentServiceHybridPaymentResult{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.HybridPayment(args.OrderId, args.Remark); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing HybridPayment: "+err2.Error())
		oprot.WriteMessageBegin("HybridPayment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("HybridPayment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type paymentServiceProcessorFinishPayment struct {
	handler PaymentService
}

func (p *paymentServiceProcessorFinishPayment) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PaymentServiceFinishPaymentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FinishPayment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PaymentServiceFinishPaymentResult{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.FinishPayment(args.TradeNo, args.SpName, args.OuterNo); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FinishPayment: "+err2.Error())
		oprot.WriteMessageBegin("FinishPayment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("FinishPayment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type paymentServiceProcessorGatewayV1 struct {
	handler PaymentService
}

func (p *paymentServiceProcessorGatewayV1) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PaymentServiceGatewayV1Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GatewayV1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PaymentServiceGatewayV1Result{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.GatewayV1(args.Action, args.UserId, args.Data); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GatewayV1: "+err2.Error())
		oprot.WriteMessageBegin("GatewayV1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GatewayV1", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - O
type PaymentServiceSubmitPaymentOrderArgs struct {
	O *PaymentOrder `thrift:"o,1" db:"o" json:"o"`
}

func NewPaymentServiceSubmitPaymentOrderArgs() *PaymentServiceSubmitPaymentOrderArgs {
	return &PaymentServiceSubmitPaymentOrderArgs{}
}

var PaymentServiceSubmitPaymentOrderArgs_O_DEFAULT *PaymentOrder

func (p *PaymentServiceSubmitPaymentOrderArgs) GetO() *PaymentOrder {
	if !p.IsSetO() {
		return PaymentServiceSubmitPaymentOrderArgs_O_DEFAULT
	}
	return p.O
}
func (p *PaymentServiceSubmitPaymentOrderArgs) IsSetO() bool {
	return p.O != nil
}

func (p *PaymentServiceSubmitPaymentOrderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceSubmitPaymentOrderArgs) ReadField1(iprot thrift.TProtocol) error {
	p.O = &PaymentOrder{}
	if err := p.O.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O), err)
	}
	return nil
}

func (p *PaymentServiceSubmitPaymentOrderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SubmitPaymentOrder_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceSubmitPaymentOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("o", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o: ", p), err)
	}
	if err := p.O.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o: ", p), err)
	}
	return err
}

func (p *PaymentServiceSubmitPaymentOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceSubmitPaymentOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceSubmitPaymentOrderResult struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceSubmitPaymentOrderResult() *PaymentServiceSubmitPaymentOrderResult {
	return &PaymentServiceSubmitPaymentOrderResult{}
}

var PaymentServiceSubmitPaymentOrderResult_Success_DEFAULT *Result_

func (p *PaymentServiceSubmitPaymentOrderResult) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return PaymentServiceSubmitPaymentOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PaymentServiceSubmitPaymentOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaymentServiceSubmitPaymentOrderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceSubmitPaymentOrderResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *PaymentServiceSubmitPaymentOrderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SubmitPaymentOrder_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceSubmitPaymentOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *PaymentServiceSubmitPaymentOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceSubmitPaymentOrderResult(%+v)", *p)
}

// Attributes:
//  - PaymentNo
type PaymentServiceGetPaymentOrderArgs struct {
	PaymentNo string `thrift:"paymentNo,1" db:"paymentNo" json:"paymentNo"`
}

func NewPaymentServiceGetPaymentOrderArgs() *PaymentServiceGetPaymentOrderArgs {
	return &PaymentServiceGetPaymentOrderArgs{}
}

func (p *PaymentServiceGetPaymentOrderArgs) GetPaymentNo() string {
	return p.PaymentNo
}
func (p *PaymentServiceGetPaymentOrderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PaymentNo = v
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPaymentOrder_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paymentNo", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:paymentNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.PaymentNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.paymentNo (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:paymentNo: ", p), err)
	}
	return err
}

func (p *PaymentServiceGetPaymentOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceGetPaymentOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceGetPaymentOrderResult struct {
	Success *PaymentOrder `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceGetPaymentOrderResult() *PaymentServiceGetPaymentOrderResult {
	return &PaymentServiceGetPaymentOrderResult{}
}

var PaymentServiceGetPaymentOrderResult_Success_DEFAULT *PaymentOrder

func (p *PaymentServiceGetPaymentOrderResult) GetSuccess() *PaymentOrder {
	if !p.IsSetSuccess() {
		return PaymentServiceGetPaymentOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PaymentServiceGetPaymentOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaymentServiceGetPaymentOrderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PaymentOrder{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPaymentOrder_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *PaymentServiceGetPaymentOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceGetPaymentOrderResult(%+v)", *p)
}

// Attributes:
//  - TradeNo
type PaymentServiceGetPaymentOrderIdArgs struct {
	TradeNo string `thrift:"tradeNo,1" db:"tradeNo" json:"tradeNo"`
}

func NewPaymentServiceGetPaymentOrderIdArgs() *PaymentServiceGetPaymentOrderIdArgs {
	return &PaymentServiceGetPaymentOrderIdArgs{}
}

func (p *PaymentServiceGetPaymentOrderIdArgs) GetTradeNo() string {
	return p.TradeNo
}
func (p *PaymentServiceGetPaymentOrderIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderIdArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TradeNo = v
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPaymentOrderId_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tradeNo", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tradeNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.TradeNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tradeNo (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tradeNo: ", p), err)
	}
	return err
}

func (p *PaymentServiceGetPaymentOrderIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceGetPaymentOrderIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceGetPaymentOrderIdResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceGetPaymentOrderIdResult() *PaymentServiceGetPaymentOrderIdResult {
	return &PaymentServiceGetPaymentOrderIdResult{}
}

var PaymentServiceGetPaymentOrderIdResult_Success_DEFAULT int32

func (p *PaymentServiceGetPaymentOrderIdResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return PaymentServiceGetPaymentOrderIdResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *PaymentServiceGetPaymentOrderIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaymentServiceGetPaymentOrderIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderIdResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPaymentOrderId_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *PaymentServiceGetPaymentOrderIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceGetPaymentOrderIdResult(%+v)", *p)
}

// Attributes:
//  - ID
type PaymentServiceGetPaymentOrderByIdArgs struct {
	ID int32 `thrift:"id,1" db:"id" json:"id"`
}

func NewPaymentServiceGetPaymentOrderByIdArgs() *PaymentServiceGetPaymentOrderByIdArgs {
	return &PaymentServiceGetPaymentOrderByIdArgs{}
}

func (p *PaymentServiceGetPaymentOrderByIdArgs) GetID() int32 {
	return p.ID
}
func (p *PaymentServiceGetPaymentOrderByIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderByIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPaymentOrderById_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *PaymentServiceGetPaymentOrderByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceGetPaymentOrderByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceGetPaymentOrderByIdResult struct {
	Success *PaymentOrder `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceGetPaymentOrderByIdResult() *PaymentServiceGetPaymentOrderByIdResult {
	return &PaymentServiceGetPaymentOrderByIdResult{}
}

var PaymentServiceGetPaymentOrderByIdResult_Success_DEFAULT *PaymentOrder

func (p *PaymentServiceGetPaymentOrderByIdResult) GetSuccess() *PaymentOrder {
	if !p.IsSetSuccess() {
		return PaymentServiceGetPaymentOrderByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PaymentServiceGetPaymentOrderByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaymentServiceGetPaymentOrderByIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderByIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PaymentOrder{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderByIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPaymentOrderById_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceGetPaymentOrderByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *PaymentServiceGetPaymentOrderByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceGetPaymentOrderByIdResult(%+v)", *p)
}

// Attributes:
//  - PaymentNo
//  - Amount
type PaymentServiceAdjustOrderArgs struct {
	PaymentNo string  `thrift:"paymentNo,1" db:"paymentNo" json:"paymentNo"`
	Amount    float64 `thrift:"amount,2" db:"amount" json:"amount"`
}

func NewPaymentServiceAdjustOrderArgs() *PaymentServiceAdjustOrderArgs {
	return &PaymentServiceAdjustOrderArgs{}
}

func (p *PaymentServiceAdjustOrderArgs) GetPaymentNo() string {
	return p.PaymentNo
}

func (p *PaymentServiceAdjustOrderArgs) GetAmount() float64 {
	return p.Amount
}
func (p *PaymentServiceAdjustOrderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceAdjustOrderArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PaymentNo = v
	}
	return nil
}

func (p *PaymentServiceAdjustOrderArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *PaymentServiceAdjustOrderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AdjustOrder_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceAdjustOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paymentNo", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:paymentNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.PaymentNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.paymentNo (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:paymentNo: ", p), err)
	}
	return err
}

func (p *PaymentServiceAdjustOrderArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amount: ", p), err)
	}
	return err
}

func (p *PaymentServiceAdjustOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceAdjustOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceAdjustOrderResult struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceAdjustOrderResult() *PaymentServiceAdjustOrderResult {
	return &PaymentServiceAdjustOrderResult{}
}

var PaymentServiceAdjustOrderResult_Success_DEFAULT *Result_

func (p *PaymentServiceAdjustOrderResult) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return PaymentServiceAdjustOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PaymentServiceAdjustOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaymentServiceAdjustOrderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceAdjustOrderResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *PaymentServiceAdjustOrderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AdjustOrder_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceAdjustOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *PaymentServiceAdjustOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceAdjustOrderResult(%+v)", *p)
}

// Attributes:
//  - OrderId
//  - Remark
type PaymentServiceDiscountByBalanceArgs struct {
	OrderId int32  `thrift:"orderId,1" db:"orderId" json:"orderId"`
	Remark  string `thrift:"remark,2" db:"remark" json:"remark"`
}

func NewPaymentServiceDiscountByBalanceArgs() *PaymentServiceDiscountByBalanceArgs {
	return &PaymentServiceDiscountByBalanceArgs{}
}

func (p *PaymentServiceDiscountByBalanceArgs) GetOrderId() int32 {
	return p.OrderId
}

func (p *PaymentServiceDiscountByBalanceArgs) GetRemark() string {
	return p.Remark
}
func (p *PaymentServiceDiscountByBalanceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceDiscountByBalanceArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *PaymentServiceDiscountByBalanceArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Remark = v
	}
	return nil
}

func (p *PaymentServiceDiscountByBalanceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DiscountByBalance_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceDiscountByBalanceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderId: ", p), err)
	}
	return err
}

func (p *PaymentServiceDiscountByBalanceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("remark", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:remark: ", p), err)
	}
	if err := oprot.WriteString(string(p.Remark)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.remark (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:remark: ", p), err)
	}
	return err
}

func (p *PaymentServiceDiscountByBalanceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceDiscountByBalanceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceDiscountByBalanceResult struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceDiscountByBalanceResult() *PaymentServiceDiscountByBalanceResult {
	return &PaymentServiceDiscountByBalanceResult{}
}

var PaymentServiceDiscountByBalanceResult_Success_DEFAULT *Result_

func (p *PaymentServiceDiscountByBalanceResult) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return PaymentServiceDiscountByBalanceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PaymentServiceDiscountByBalanceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaymentServiceDiscountByBalanceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceDiscountByBalanceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *PaymentServiceDiscountByBalanceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DiscountByBalance_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceDiscountByBalanceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *PaymentServiceDiscountByBalanceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceDiscountByBalanceResult(%+v)", *p)
}

// Attributes:
//  - OrderId
//  - Integral
//  - IgnoreOut
type PaymentServiceDiscountByIntegralArgs struct {
	OrderId   int32 `thrift:"orderId,1" db:"orderId" json:"orderId"`
	Integral  int64 `thrift:"integral,2" db:"integral" json:"integral"`
	IgnoreOut bool  `thrift:"ignoreOut,3" db:"ignoreOut" json:"ignoreOut"`
}

func NewPaymentServiceDiscountByIntegralArgs() *PaymentServiceDiscountByIntegralArgs {
	return &PaymentServiceDiscountByIntegralArgs{}
}

func (p *PaymentServiceDiscountByIntegralArgs) GetOrderId() int32 {
	return p.OrderId
}

func (p *PaymentServiceDiscountByIntegralArgs) GetIntegral() int64 {
	return p.Integral
}

func (p *PaymentServiceDiscountByIntegralArgs) GetIgnoreOut() bool {
	return p.IgnoreOut
}
func (p *PaymentServiceDiscountByIntegralArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceDiscountByIntegralArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *PaymentServiceDiscountByIntegralArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Integral = v
	}
	return nil
}

func (p *PaymentServiceDiscountByIntegralArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IgnoreOut = v
	}
	return nil
}

func (p *PaymentServiceDiscountByIntegralArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DiscountByIntegral_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceDiscountByIntegralArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderId: ", p), err)
	}
	return err
}

func (p *PaymentServiceDiscountByIntegralArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("integral", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:integral: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Integral)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.integral (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:integral: ", p), err)
	}
	return err
}

func (p *PaymentServiceDiscountByIntegralArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ignoreOut", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ignoreOut: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IgnoreOut)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ignoreOut (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ignoreOut: ", p), err)
	}
	return err
}

func (p *PaymentServiceDiscountByIntegralArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceDiscountByIntegralArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceDiscountByIntegralResult struct {
	Success *DResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceDiscountByIntegralResult() *PaymentServiceDiscountByIntegralResult {
	return &PaymentServiceDiscountByIntegralResult{}
}

var PaymentServiceDiscountByIntegralResult_Success_DEFAULT *DResult_

func (p *PaymentServiceDiscountByIntegralResult) GetSuccess() *DResult_ {
	if !p.IsSetSuccess() {
		return PaymentServiceDiscountByIntegralResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PaymentServiceDiscountByIntegralResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaymentServiceDiscountByIntegralResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceDiscountByIntegralResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *PaymentServiceDiscountByIntegralResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DiscountByIntegral_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceDiscountByIntegralResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *PaymentServiceDiscountByIntegralResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceDiscountByIntegralResult(%+v)", *p)
}

// Attributes:
//  - OrderId
//  - Remark
type PaymentServicePaymentByWalletArgs struct {
	OrderId int32  `thrift:"orderId,1" db:"orderId" json:"orderId"`
	Remark  string `thrift:"remark,2" db:"remark" json:"remark"`
}

func NewPaymentServicePaymentByWalletArgs() *PaymentServicePaymentByWalletArgs {
	return &PaymentServicePaymentByWalletArgs{}
}

func (p *PaymentServicePaymentByWalletArgs) GetOrderId() int32 {
	return p.OrderId
}

func (p *PaymentServicePaymentByWalletArgs) GetRemark() string {
	return p.Remark
}
func (p *PaymentServicePaymentByWalletArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServicePaymentByWalletArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *PaymentServicePaymentByWalletArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Remark = v
	}
	return nil
}

func (p *PaymentServicePaymentByWalletArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PaymentByWallet_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServicePaymentByWalletArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderId: ", p), err)
	}
	return err
}

func (p *PaymentServicePaymentByWalletArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("remark", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:remark: ", p), err)
	}
	if err := oprot.WriteString(string(p.Remark)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.remark (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:remark: ", p), err)
	}
	return err
}

func (p *PaymentServicePaymentByWalletArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServicePaymentByWalletArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServicePaymentByWalletResult struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServicePaymentByWalletResult() *PaymentServicePaymentByWalletResult {
	return &PaymentServicePaymentByWalletResult{}
}

var PaymentServicePaymentByWalletResult_Success_DEFAULT *Result_

func (p *PaymentServicePaymentByWalletResult) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return PaymentServicePaymentByWalletResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PaymentServicePaymentByWalletResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaymentServicePaymentByWalletResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServicePaymentByWalletResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *PaymentServicePaymentByWalletResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PaymentByWallet_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServicePaymentByWalletResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *PaymentServicePaymentByWalletResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServicePaymentByWalletResult(%+v)", *p)
}

// Attributes:
//  - OrderId
//  - Remark
type PaymentServiceHybridPaymentArgs struct {
	OrderId int32  `thrift:"orderId,1" db:"orderId" json:"orderId"`
	Remark  string `thrift:"remark,2" db:"remark" json:"remark"`
}

func NewPaymentServiceHybridPaymentArgs() *PaymentServiceHybridPaymentArgs {
	return &PaymentServiceHybridPaymentArgs{}
}

func (p *PaymentServiceHybridPaymentArgs) GetOrderId() int32 {
	return p.OrderId
}

func (p *PaymentServiceHybridPaymentArgs) GetRemark() string {
	return p.Remark
}
func (p *PaymentServiceHybridPaymentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceHybridPaymentArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *PaymentServiceHybridPaymentArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Remark = v
	}
	return nil
}

func (p *PaymentServiceHybridPaymentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HybridPayment_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceHybridPaymentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderId: ", p), err)
	}
	return err
}

func (p *PaymentServiceHybridPaymentArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("remark", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:remark: ", p), err)
	}
	if err := oprot.WriteString(string(p.Remark)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.remark (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:remark: ", p), err)
	}
	return err
}

func (p *PaymentServiceHybridPaymentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceHybridPaymentArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceHybridPaymentResult struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceHybridPaymentResult() *PaymentServiceHybridPaymentResult {
	return &PaymentServiceHybridPaymentResult{}
}

var PaymentServiceHybridPaymentResult_Success_DEFAULT *Result_

func (p *PaymentServiceHybridPaymentResult) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return PaymentServiceHybridPaymentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PaymentServiceHybridPaymentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaymentServiceHybridPaymentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceHybridPaymentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *PaymentServiceHybridPaymentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HybridPayment_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceHybridPaymentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *PaymentServiceHybridPaymentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceHybridPaymentResult(%+v)", *p)
}

// Attributes:
//  - TradeNo
//  - SpName
//  - OuterNo
type PaymentServiceFinishPaymentArgs struct {
	TradeNo string `thrift:"tradeNo,1" db:"tradeNo" json:"tradeNo"`
	SpName  string `thrift:"spName,2" db:"spName" json:"spName"`
	OuterNo string `thrift:"outerNo,3" db:"outerNo" json:"outerNo"`
}

func NewPaymentServiceFinishPaymentArgs() *PaymentServiceFinishPaymentArgs {
	return &PaymentServiceFinishPaymentArgs{}
}

func (p *PaymentServiceFinishPaymentArgs) GetTradeNo() string {
	return p.TradeNo
}

func (p *PaymentServiceFinishPaymentArgs) GetSpName() string {
	return p.SpName
}

func (p *PaymentServiceFinishPaymentArgs) GetOuterNo() string {
	return p.OuterNo
}
func (p *PaymentServiceFinishPaymentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceFinishPaymentArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TradeNo = v
	}
	return nil
}

func (p *PaymentServiceFinishPaymentArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SpName = v
	}
	return nil
}

func (p *PaymentServiceFinishPaymentArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OuterNo = v
	}
	return nil
}

func (p *PaymentServiceFinishPaymentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FinishPayment_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceFinishPaymentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tradeNo", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tradeNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.TradeNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tradeNo (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tradeNo: ", p), err)
	}
	return err
}

func (p *PaymentServiceFinishPaymentArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:spName: ", p), err)
	}
	if err := oprot.WriteString(string(p.SpName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.spName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:spName: ", p), err)
	}
	return err
}

func (p *PaymentServiceFinishPaymentArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("outerNo", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:outerNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.OuterNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.outerNo (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:outerNo: ", p), err)
	}
	return err
}

func (p *PaymentServiceFinishPaymentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceFinishPaymentArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceFinishPaymentResult struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceFinishPaymentResult() *PaymentServiceFinishPaymentResult {
	return &PaymentServiceFinishPaymentResult{}
}

var PaymentServiceFinishPaymentResult_Success_DEFAULT *Result_

func (p *PaymentServiceFinishPaymentResult) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return PaymentServiceFinishPaymentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PaymentServiceFinishPaymentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaymentServiceFinishPaymentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceFinishPaymentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *PaymentServiceFinishPaymentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FinishPayment_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceFinishPaymentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *PaymentServiceFinishPaymentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceFinishPaymentResult(%+v)", *p)
}

// Attributes:
//  - Action
//  - UserId
//  - Data
type PaymentServiceGatewayV1Args struct {
	Action string            `thrift:"action,1" db:"action" json:"action"`
	UserId int64             `thrift:"userId,2" db:"userId" json:"userId"`
	Data   map[string]string `thrift:"data,3" db:"data" json:"data"`
}

func NewPaymentServiceGatewayV1Args() *PaymentServiceGatewayV1Args {
	return &PaymentServiceGatewayV1Args{}
}

func (p *PaymentServiceGatewayV1Args) GetAction() string {
	return p.Action
}

func (p *PaymentServiceGatewayV1Args) GetUserId() int64 {
	return p.UserId
}

func (p *PaymentServiceGatewayV1Args) GetData() map[string]string {
	return p.Data
}
func (p *PaymentServiceGatewayV1Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceGatewayV1Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Action = v
	}
	return nil
}

func (p *PaymentServiceGatewayV1Args) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *PaymentServiceGatewayV1Args) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Data = tMap
	for i := 0; i < size; i++ {
		var _key24 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key24 = v
		}
		var _val25 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val25 = v
		}
		p.Data[_key24] = _val25
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *PaymentServiceGatewayV1Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GatewayV1_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceGatewayV1Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("action", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:action: ", p), err)
	}
	if err := oprot.WriteString(string(p.Action)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.action (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:action: ", p), err)
	}
	return err
}

func (p *PaymentServiceGatewayV1Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err)
	}
	return err
}

func (p *PaymentServiceGatewayV1Args) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Data {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err)
	}
	return err
}

func (p *PaymentServiceGatewayV1Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceGatewayV1Args(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentServiceGatewayV1Result struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentServiceGatewayV1Result() *PaymentServiceGatewayV1Result {
	return &PaymentServiceGatewayV1Result{}
}

var PaymentServiceGatewayV1Result_Success_DEFAULT *Result_

func (p *PaymentServiceGatewayV1Result) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return PaymentServiceGatewayV1Result_Success_DEFAULT
	}
	return p.Success
}
func (p *PaymentServiceGatewayV1Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaymentServiceGatewayV1Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PaymentServiceGatewayV1Result) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *PaymentServiceGatewayV1Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GatewayV1_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PaymentServiceGatewayV1Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *PaymentServiceGatewayV1Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceGatewayV1Result(%+v)", *p)
}

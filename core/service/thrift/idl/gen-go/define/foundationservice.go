// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package define

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type FoundationService interface {
	// Parameters:
	//  - URL
	ResourceUrl(url string) (r string, err error)
	GetPlatformConf() (r *PlatformConf, err error)
	// Parameters:
	//  - App
	RegisterSsoApp(app *SsoApp) (r string, err error)
	GetAllSsoApp() (r []string, err error)
	// Parameters:
	//  - User
	//  - Pwd
	ValidateSuper(user string, pwd string) (r bool, err error)
	// Parameters:
	//  - User
	//  - Pwd
	FlushSuperPwd(user string, pwd string) (err error)
	// Parameters:
	//  - ReturnUrl
	GetSyncLoginUrl(returnUrl string) (r string, err error)
}

type FoundationServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewFoundationServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FoundationServiceClient {
	return &FoundationServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewFoundationServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FoundationServiceClient {
	return &FoundationServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - URL
func (p *FoundationServiceClient) ResourceUrl(url string) (r string, err error) {
	if err = p.sendResourceUrl(url); err != nil {
		return
	}
	return p.recvResourceUrl()
}

func (p *FoundationServiceClient) sendResourceUrl(url string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ResourceUrl", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FoundationServiceResourceUrlArgs{
		URL: url,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FoundationServiceClient) recvResourceUrl() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ResourceUrl" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ResourceUrl failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ResourceUrl failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ResourceUrl failed: invalid message type")
		return
	}
	result := FoundationServiceResourceUrlResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

func (p *FoundationServiceClient) GetPlatformConf() (r *PlatformConf, err error) {
	if err = p.sendGetPlatformConf(); err != nil {
		return
	}
	return p.recvGetPlatformConf()
}

func (p *FoundationServiceClient) sendGetPlatformConf() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetPlatformConf", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FoundationServiceGetPlatformConfArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FoundationServiceClient) recvGetPlatformConf() (value *PlatformConf, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetPlatformConf" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetPlatformConf failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetPlatformConf failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetPlatformConf failed: invalid message type")
		return
	}
	result := FoundationServiceGetPlatformConfResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - App
func (p *FoundationServiceClient) RegisterSsoApp(app *SsoApp) (r string, err error) {
	if err = p.sendRegisterSsoApp(app); err != nil {
		return
	}
	return p.recvRegisterSsoApp()
}

func (p *FoundationServiceClient) sendRegisterSsoApp(app *SsoApp) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RegisterSsoApp", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FoundationServiceRegisterSsoAppArgs{
		App: app,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FoundationServiceClient) recvRegisterSsoApp() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RegisterSsoApp" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RegisterSsoApp failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RegisterSsoApp failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RegisterSsoApp failed: invalid message type")
		return
	}
	result := FoundationServiceRegisterSsoAppResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

func (p *FoundationServiceClient) GetAllSsoApp() (r []string, err error) {
	if err = p.sendGetAllSsoApp(); err != nil {
		return
	}
	return p.recvGetAllSsoApp()
}

func (p *FoundationServiceClient) sendGetAllSsoApp() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetAllSsoApp", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FoundationServiceGetAllSsoAppArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FoundationServiceClient) recvGetAllSsoApp() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetAllSsoApp" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetAllSsoApp failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetAllSsoApp failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetAllSsoApp failed: invalid message type")
		return
	}
	result := FoundationServiceGetAllSsoAppResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - User
//  - Pwd
func (p *FoundationServiceClient) ValidateSuper(user string, pwd string) (r bool, err error) {
	if err = p.sendValidateSuper(user, pwd); err != nil {
		return
	}
	return p.recvValidateSuper()
}

func (p *FoundationServiceClient) sendValidateSuper(user string, pwd string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ValidateSuper", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FoundationServiceValidateSuperArgs{
		User: user,
		Pwd:  pwd,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FoundationServiceClient) recvValidateSuper() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ValidateSuper" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ValidateSuper failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ValidateSuper failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ValidateSuper failed: invalid message type")
		return
	}
	result := FoundationServiceValidateSuperResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - User
//  - Pwd
func (p *FoundationServiceClient) FlushSuperPwd(user string, pwd string) (err error) {
	if err = p.sendFlushSuperPwd(user, pwd); err != nil {
		return
	}
	return p.recvFlushSuperPwd()
}

func (p *FoundationServiceClient) sendFlushSuperPwd(user string, pwd string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("FlushSuperPwd", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FoundationServiceFlushSuperPwdArgs{
		User: user,
		Pwd:  pwd,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FoundationServiceClient) recvFlushSuperPwd() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "FlushSuperPwd" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "FlushSuperPwd failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "FlushSuperPwd failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error45 error
		error45, err = error44.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error45
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "FlushSuperPwd failed: invalid message type")
		return
	}
	result := FoundationServiceFlushSuperPwdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - ReturnUrl
func (p *FoundationServiceClient) GetSyncLoginUrl(returnUrl string) (r string, err error) {
	if err = p.sendGetSyncLoginUrl(returnUrl); err != nil {
		return
	}
	return p.recvGetSyncLoginUrl()
}

func (p *FoundationServiceClient) sendGetSyncLoginUrl(returnUrl string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetSyncLoginUrl", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FoundationServiceGetSyncLoginUrlArgs{
		ReturnUrl: returnUrl,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FoundationServiceClient) recvGetSyncLoginUrl() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetSyncLoginUrl" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetSyncLoginUrl failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetSyncLoginUrl failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error46 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error47 error
		error47, err = error46.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error47
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetSyncLoginUrl failed: invalid message type")
		return
	}
	result := FoundationServiceGetSyncLoginUrlResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type FoundationServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      FoundationService
}

func (p *FoundationServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *FoundationServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *FoundationServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewFoundationServiceProcessor(handler FoundationService) *FoundationServiceProcessor {

	self48 := &FoundationServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self48.processorMap["ResourceUrl"] = &foundationServiceProcessorResourceUrl{handler: handler}
	self48.processorMap["GetPlatformConf"] = &foundationServiceProcessorGetPlatformConf{handler: handler}
	self48.processorMap["RegisterSsoApp"] = &foundationServiceProcessorRegisterSsoApp{handler: handler}
	self48.processorMap["GetAllSsoApp"] = &foundationServiceProcessorGetAllSsoApp{handler: handler}
	self48.processorMap["ValidateSuper"] = &foundationServiceProcessorValidateSuper{handler: handler}
	self48.processorMap["FlushSuperPwd"] = &foundationServiceProcessorFlushSuperPwd{handler: handler}
	self48.processorMap["GetSyncLoginUrl"] = &foundationServiceProcessorGetSyncLoginUrl{handler: handler}
	return self48
}

func (p *FoundationServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x49 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x49.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x49

}

type foundationServiceProcessorResourceUrl struct {
	handler FoundationService
}

func (p *foundationServiceProcessorResourceUrl) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceResourceUrlArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ResourceUrl", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceResourceUrlResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ResourceUrl(args.URL); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ResourceUrl: "+err2.Error())
		oprot.WriteMessageBegin("ResourceUrl", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("ResourceUrl", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorGetPlatformConf struct {
	handler FoundationService
}

func (p *foundationServiceProcessorGetPlatformConf) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceGetPlatformConfArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPlatformConf", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceGetPlatformConfResult{}
	var retval *PlatformConf
	var err2 error
	if retval, err2 = p.handler.GetPlatformConf(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPlatformConf: "+err2.Error())
		oprot.WriteMessageBegin("GetPlatformConf", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPlatformConf", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorRegisterSsoApp struct {
	handler FoundationService
}

func (p *foundationServiceProcessorRegisterSsoApp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceRegisterSsoAppArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RegisterSsoApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceRegisterSsoAppResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.RegisterSsoApp(args.App); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RegisterSsoApp: "+err2.Error())
		oprot.WriteMessageBegin("RegisterSsoApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("RegisterSsoApp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorGetAllSsoApp struct {
	handler FoundationService
}

func (p *foundationServiceProcessorGetAllSsoApp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceGetAllSsoAppArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAllSsoApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceGetAllSsoAppResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetAllSsoApp(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAllSsoApp: "+err2.Error())
		oprot.WriteMessageBegin("GetAllSsoApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAllSsoApp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorValidateSuper struct {
	handler FoundationService
}

func (p *foundationServiceProcessorValidateSuper) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceValidateSuperArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ValidateSuper", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceValidateSuperResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.ValidateSuper(args.User, args.Pwd); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ValidateSuper: "+err2.Error())
		oprot.WriteMessageBegin("ValidateSuper", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("ValidateSuper", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorFlushSuperPwd struct {
	handler FoundationService
}

func (p *foundationServiceProcessorFlushSuperPwd) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceFlushSuperPwdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FlushSuperPwd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceFlushSuperPwdResult{}
	var err2 error
	if err2 = p.handler.FlushSuperPwd(args.User, args.Pwd); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FlushSuperPwd: "+err2.Error())
		oprot.WriteMessageBegin("FlushSuperPwd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("FlushSuperPwd", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type foundationServiceProcessorGetSyncLoginUrl struct {
	handler FoundationService
}

func (p *foundationServiceProcessorGetSyncLoginUrl) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FoundationServiceGetSyncLoginUrlArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSyncLoginUrl", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FoundationServiceGetSyncLoginUrlResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetSyncLoginUrl(args.ReturnUrl); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSyncLoginUrl: "+err2.Error())
		oprot.WriteMessageBegin("GetSyncLoginUrl", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetSyncLoginUrl", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - URL
type FoundationServiceResourceUrlArgs struct {
	URL string `thrift:"url,1" json:"url"`
}

func NewFoundationServiceResourceUrlArgs() *FoundationServiceResourceUrlArgs {
	return &FoundationServiceResourceUrlArgs{}
}

func (p *FoundationServiceResourceUrlArgs) GetURL() string {
	return p.URL
}
func (p *FoundationServiceResourceUrlArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceResourceUrlArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.URL = v
	}
	return nil
}

func (p *FoundationServiceResourceUrlArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResourceUrl_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceResourceUrlArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err)
	}
	if err := oprot.WriteString(string(p.URL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err)
	}
	return err
}

func (p *FoundationServiceResourceUrlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceResourceUrlArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceResourceUrlResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewFoundationServiceResourceUrlResult() *FoundationServiceResourceUrlResult {
	return &FoundationServiceResourceUrlResult{}
}

var FoundationServiceResourceUrlResult_Success_DEFAULT string

func (p *FoundationServiceResourceUrlResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return FoundationServiceResourceUrlResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FoundationServiceResourceUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceResourceUrlResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceResourceUrlResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FoundationServiceResourceUrlResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResourceUrl_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceResourceUrlResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceResourceUrlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceResourceUrlResult(%+v)", *p)
}

type FoundationServiceGetPlatformConfArgs struct {
}

func NewFoundationServiceGetPlatformConfArgs() *FoundationServiceGetPlatformConfArgs {
	return &FoundationServiceGetPlatformConfArgs{}
}

func (p *FoundationServiceGetPlatformConfArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetPlatformConfArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPlatformConf_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetPlatformConfArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetPlatformConfArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetPlatformConfResult struct {
	Success *PlatformConf `thrift:"success,0" json:"success,omitempty"`
}

func NewFoundationServiceGetPlatformConfResult() *FoundationServiceGetPlatformConfResult {
	return &FoundationServiceGetPlatformConfResult{}
}

var FoundationServiceGetPlatformConfResult_Success_DEFAULT *PlatformConf

func (p *FoundationServiceGetPlatformConfResult) GetSuccess() *PlatformConf {
	if !p.IsSetSuccess() {
		return FoundationServiceGetPlatformConfResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FoundationServiceGetPlatformConfResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceGetPlatformConfResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetPlatformConfResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &PlatformConf{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FoundationServiceGetPlatformConfResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPlatformConf_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetPlatformConfResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceGetPlatformConfResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetPlatformConfResult(%+v)", *p)
}

// Attributes:
//  - App
type FoundationServiceRegisterSsoAppArgs struct {
	App *SsoApp `thrift:"app,1" json:"app"`
}

func NewFoundationServiceRegisterSsoAppArgs() *FoundationServiceRegisterSsoAppArgs {
	return &FoundationServiceRegisterSsoAppArgs{}
}

var FoundationServiceRegisterSsoAppArgs_App_DEFAULT *SsoApp

func (p *FoundationServiceRegisterSsoAppArgs) GetApp() *SsoApp {
	if !p.IsSetApp() {
		return FoundationServiceRegisterSsoAppArgs_App_DEFAULT
	}
	return p.App
}
func (p *FoundationServiceRegisterSsoAppArgs) IsSetApp() bool {
	return p.App != nil
}

func (p *FoundationServiceRegisterSsoAppArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceRegisterSsoAppArgs) readField1(iprot thrift.TProtocol) error {
	p.App = &SsoApp{}
	if err := p.App.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.App), err)
	}
	return nil
}

func (p *FoundationServiceRegisterSsoAppArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RegisterSsoApp_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceRegisterSsoAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app: ", p), err)
	}
	if err := p.App.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.App), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app: ", p), err)
	}
	return err
}

func (p *FoundationServiceRegisterSsoAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceRegisterSsoAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceRegisterSsoAppResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewFoundationServiceRegisterSsoAppResult() *FoundationServiceRegisterSsoAppResult {
	return &FoundationServiceRegisterSsoAppResult{}
}

var FoundationServiceRegisterSsoAppResult_Success_DEFAULT string

func (p *FoundationServiceRegisterSsoAppResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return FoundationServiceRegisterSsoAppResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FoundationServiceRegisterSsoAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceRegisterSsoAppResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceRegisterSsoAppResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FoundationServiceRegisterSsoAppResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RegisterSsoApp_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceRegisterSsoAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceRegisterSsoAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceRegisterSsoAppResult(%+v)", *p)
}

type FoundationServiceGetAllSsoAppArgs struct {
}

func NewFoundationServiceGetAllSsoAppArgs() *FoundationServiceGetAllSsoAppArgs {
	return &FoundationServiceGetAllSsoAppArgs{}
}

func (p *FoundationServiceGetAllSsoAppArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetAllSsoAppArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAllSsoApp_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetAllSsoAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetAllSsoAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetAllSsoAppResult struct {
	Success []string `thrift:"success,0" json:"success,omitempty"`
}

func NewFoundationServiceGetAllSsoAppResult() *FoundationServiceGetAllSsoAppResult {
	return &FoundationServiceGetAllSsoAppResult{}
}

var FoundationServiceGetAllSsoAppResult_Success_DEFAULT []string

func (p *FoundationServiceGetAllSsoAppResult) GetSuccess() []string {
	return p.Success
}
func (p *FoundationServiceGetAllSsoAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceGetAllSsoAppResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetAllSsoAppResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem50 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem50 = v
		}
		p.Success = append(p.Success, _elem50)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FoundationServiceGetAllSsoAppResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAllSsoApp_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetAllSsoAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceGetAllSsoAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetAllSsoAppResult(%+v)", *p)
}

// Attributes:
//  - User
//  - Pwd
type FoundationServiceValidateSuperArgs struct {
	User string `thrift:"user,1" json:"user"`
	Pwd  string `thrift:"pwd,2" json:"pwd"`
}

func NewFoundationServiceValidateSuperArgs() *FoundationServiceValidateSuperArgs {
	return &FoundationServiceValidateSuperArgs{}
}

func (p *FoundationServiceValidateSuperArgs) GetUser() string {
	return p.User
}

func (p *FoundationServiceValidateSuperArgs) GetPwd() string {
	return p.Pwd
}
func (p *FoundationServiceValidateSuperArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceValidateSuperArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *FoundationServiceValidateSuperArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Pwd = v
	}
	return nil
}

func (p *FoundationServiceValidateSuperArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ValidateSuper_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceValidateSuperArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err)
	}
	return err
}

func (p *FoundationServiceValidateSuperArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err)
	}
	return err
}

func (p *FoundationServiceValidateSuperArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceValidateSuperArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceValidateSuperResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewFoundationServiceValidateSuperResult() *FoundationServiceValidateSuperResult {
	return &FoundationServiceValidateSuperResult{}
}

var FoundationServiceValidateSuperResult_Success_DEFAULT bool

func (p *FoundationServiceValidateSuperResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return FoundationServiceValidateSuperResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FoundationServiceValidateSuperResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceValidateSuperResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceValidateSuperResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FoundationServiceValidateSuperResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ValidateSuper_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceValidateSuperResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceValidateSuperResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceValidateSuperResult(%+v)", *p)
}

// Attributes:
//  - User
//  - Pwd
type FoundationServiceFlushSuperPwdArgs struct {
	User string `thrift:"user,1" json:"user"`
	Pwd  string `thrift:"pwd,2" json:"pwd"`
}

func NewFoundationServiceFlushSuperPwdArgs() *FoundationServiceFlushSuperPwdArgs {
	return &FoundationServiceFlushSuperPwdArgs{}
}

func (p *FoundationServiceFlushSuperPwdArgs) GetUser() string {
	return p.User
}

func (p *FoundationServiceFlushSuperPwdArgs) GetPwd() string {
	return p.Pwd
}
func (p *FoundationServiceFlushSuperPwdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceFlushSuperPwdArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *FoundationServiceFlushSuperPwdArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Pwd = v
	}
	return nil
}

func (p *FoundationServiceFlushSuperPwdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FlushSuperPwd_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceFlushSuperPwdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err)
	}
	return err
}

func (p *FoundationServiceFlushSuperPwdArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err)
	}
	return err
}

func (p *FoundationServiceFlushSuperPwdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceFlushSuperPwdArgs(%+v)", *p)
}

type FoundationServiceFlushSuperPwdResult struct {
}

func NewFoundationServiceFlushSuperPwdResult() *FoundationServiceFlushSuperPwdResult {
	return &FoundationServiceFlushSuperPwdResult{}
}

func (p *FoundationServiceFlushSuperPwdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceFlushSuperPwdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FlushSuperPwd_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceFlushSuperPwdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceFlushSuperPwdResult(%+v)", *p)
}

// Attributes:
//  - ReturnUrl
type FoundationServiceGetSyncLoginUrlArgs struct {
	ReturnUrl string `thrift:"returnUrl,1" json:"returnUrl"`
}

func NewFoundationServiceGetSyncLoginUrlArgs() *FoundationServiceGetSyncLoginUrlArgs {
	return &FoundationServiceGetSyncLoginUrlArgs{}
}

func (p *FoundationServiceGetSyncLoginUrlArgs) GetReturnUrl() string {
	return p.ReturnUrl
}
func (p *FoundationServiceGetSyncLoginUrlArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetSyncLoginUrlArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReturnUrl = v
	}
	return nil
}

func (p *FoundationServiceGetSyncLoginUrlArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSyncLoginUrl_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetSyncLoginUrlArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("returnUrl", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:returnUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ReturnUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.returnUrl (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:returnUrl: ", p), err)
	}
	return err
}

func (p *FoundationServiceGetSyncLoginUrlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetSyncLoginUrlArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FoundationServiceGetSyncLoginUrlResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewFoundationServiceGetSyncLoginUrlResult() *FoundationServiceGetSyncLoginUrlResult {
	return &FoundationServiceGetSyncLoginUrlResult{}
}

var FoundationServiceGetSyncLoginUrlResult_Success_DEFAULT string

func (p *FoundationServiceGetSyncLoginUrlResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return FoundationServiceGetSyncLoginUrlResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FoundationServiceGetSyncLoginUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FoundationServiceGetSyncLoginUrlResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FoundationServiceGetSyncLoginUrlResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FoundationServiceGetSyncLoginUrlResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSyncLoginUrl_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FoundationServiceGetSyncLoginUrlResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FoundationServiceGetSyncLoginUrlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FoundationServiceGetSyncLoginUrlResult(%+v)", *p)
}

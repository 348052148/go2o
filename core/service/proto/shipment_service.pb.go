// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shipment_service.proto

package proto // import "../core/service/proto"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogisticFlowTrackRequest struct {
	ShipperCode          string   `protobuf:"bytes,1,opt,name=shipperCode,proto3" json:"shipperCode,omitempty"`
	LogisticCode         string   `protobuf:"bytes,2,opt,name=logisticCode,proto3" json:"logisticCode,omitempty"`
	Invert               bool     `protobuf:"varint,3,opt,name=invert,proto3" json:"invert,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogisticFlowTrackRequest) Reset()         { *m = LogisticFlowTrackRequest{} }
func (m *LogisticFlowTrackRequest) String() string { return proto.CompactTextString(m) }
func (*LogisticFlowTrackRequest) ProtoMessage()    {}
func (*LogisticFlowTrackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_shipment_service_e71900f70aa56218, []int{0}
}
func (m *LogisticFlowTrackRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogisticFlowTrackRequest.Unmarshal(m, b)
}
func (m *LogisticFlowTrackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogisticFlowTrackRequest.Marshal(b, m, deterministic)
}
func (dst *LogisticFlowTrackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogisticFlowTrackRequest.Merge(dst, src)
}
func (m *LogisticFlowTrackRequest) XXX_Size() int {
	return xxx_messageInfo_LogisticFlowTrackRequest.Size(m)
}
func (m *LogisticFlowTrackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogisticFlowTrackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogisticFlowTrackRequest proto.InternalMessageInfo

func (m *LogisticFlowTrackRequest) GetShipperCode() string {
	if m != nil {
		return m.ShipperCode
	}
	return ""
}

func (m *LogisticFlowTrackRequest) GetLogisticCode() string {
	if m != nil {
		return m.LogisticCode
	}
	return ""
}

func (m *LogisticFlowTrackRequest) GetInvert() bool {
	if m != nil {
		return m.Invert
	}
	return false
}

type OrderLogisticTrackRequest struct {
	ShipOrderId          int64    `protobuf:"zigzag64,1,opt,name=shipOrderId,proto3" json:"shipOrderId,omitempty"`
	Invert               bool     `protobuf:"varint,2,opt,name=invert,proto3" json:"invert,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderLogisticTrackRequest) Reset()         { *m = OrderLogisticTrackRequest{} }
func (m *OrderLogisticTrackRequest) String() string { return proto.CompactTextString(m) }
func (*OrderLogisticTrackRequest) ProtoMessage()    {}
func (*OrderLogisticTrackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_shipment_service_e71900f70aa56218, []int{1}
}
func (m *OrderLogisticTrackRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderLogisticTrackRequest.Unmarshal(m, b)
}
func (m *OrderLogisticTrackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderLogisticTrackRequest.Marshal(b, m, deterministic)
}
func (dst *OrderLogisticTrackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderLogisticTrackRequest.Merge(dst, src)
}
func (m *OrderLogisticTrackRequest) XXX_Size() int {
	return xxx_messageInfo_OrderLogisticTrackRequest.Size(m)
}
func (m *OrderLogisticTrackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderLogisticTrackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderLogisticTrackRequest proto.InternalMessageInfo

func (m *OrderLogisticTrackRequest) GetShipOrderId() int64 {
	if m != nil {
		return m.ShipOrderId
	}
	return 0
}

func (m *OrderLogisticTrackRequest) GetInvert() bool {
	if m != nil {
		return m.Invert
	}
	return false
}

// 发货单追踪
type SShipOrderTrack struct {
	// 返回状态码
	Code int32 `protobuf:"zigzag32,1,opt,name=Code,proto3" json:"Code,omitempty"`
	// 返回错误信息
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	// 物流单号
	LogisticCode string `protobuf:"bytes,3,opt,name=LogisticCode,proto3" json:"LogisticCode,omitempty"`
	// 承运商代码
	ShipperCode string `protobuf:"bytes,4,opt,name=ShipperCode,proto3" json:"ShipperCode,omitempty"`
	// * 承运商名称
	ShipperName string `protobuf:"bytes,5,opt,name=ShipperName,proto3" json:"ShipperName,omitempty"`
	// 发货状态
	ShipState string `protobuf:"bytes,6,opt,name=ShipState,proto3" json:"ShipState,omitempty"`
	// 更新时间
	UpdateTime int64 `protobuf:"zigzag64,7,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	// 包含发货单流
	Flows                []*SShipFlow `protobuf:"bytes,8,rep,name=Flows,proto3" json:"Flows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SShipOrderTrack) Reset()         { *m = SShipOrderTrack{} }
func (m *SShipOrderTrack) String() string { return proto.CompactTextString(m) }
func (*SShipOrderTrack) ProtoMessage()    {}
func (*SShipOrderTrack) Descriptor() ([]byte, []int) {
	return fileDescriptor_shipment_service_e71900f70aa56218, []int{2}
}
func (m *SShipOrderTrack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SShipOrderTrack.Unmarshal(m, b)
}
func (m *SShipOrderTrack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SShipOrderTrack.Marshal(b, m, deterministic)
}
func (dst *SShipOrderTrack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SShipOrderTrack.Merge(dst, src)
}
func (m *SShipOrderTrack) XXX_Size() int {
	return xxx_messageInfo_SShipOrderTrack.Size(m)
}
func (m *SShipOrderTrack) XXX_DiscardUnknown() {
	xxx_messageInfo_SShipOrderTrack.DiscardUnknown(m)
}

var xxx_messageInfo_SShipOrderTrack proto.InternalMessageInfo

func (m *SShipOrderTrack) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SShipOrderTrack) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SShipOrderTrack) GetLogisticCode() string {
	if m != nil {
		return m.LogisticCode
	}
	return ""
}

func (m *SShipOrderTrack) GetShipperCode() string {
	if m != nil {
		return m.ShipperCode
	}
	return ""
}

func (m *SShipOrderTrack) GetShipperName() string {
	if m != nil {
		return m.ShipperName
	}
	return ""
}

func (m *SShipOrderTrack) GetShipState() string {
	if m != nil {
		return m.ShipState
	}
	return ""
}

func (m *SShipOrderTrack) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *SShipOrderTrack) GetFlows() []*SShipFlow {
	if m != nil {
		return m.Flows
	}
	return nil
}

// 发货流
type SShipFlow struct {
	// 记录标题
	Subject string `protobuf:"bytes,1,opt,name=Subject,proto3" json:"Subject,omitempty"`
	// 记录时间
	CreateTime string `protobuf:"bytes,2,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	// 备注
	Remark               string   `protobuf:"bytes,3,opt,name=Remark,proto3" json:"Remark,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SShipFlow) Reset()         { *m = SShipFlow{} }
func (m *SShipFlow) String() string { return proto.CompactTextString(m) }
func (*SShipFlow) ProtoMessage()    {}
func (*SShipFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_shipment_service_e71900f70aa56218, []int{3}
}
func (m *SShipFlow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SShipFlow.Unmarshal(m, b)
}
func (m *SShipFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SShipFlow.Marshal(b, m, deterministic)
}
func (dst *SShipFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SShipFlow.Merge(dst, src)
}
func (m *SShipFlow) XXX_Size() int {
	return xxx_messageInfo_SShipFlow.Size(m)
}
func (m *SShipFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_SShipFlow.DiscardUnknown(m)
}

var xxx_messageInfo_SShipFlow proto.InternalMessageInfo

func (m *SShipFlow) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *SShipFlow) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *SShipFlow) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func init() {
	proto.RegisterType((*LogisticFlowTrackRequest)(nil), "LogisticFlowTrackRequest")
	proto.RegisterType((*OrderLogisticTrackRequest)(nil), "OrderLogisticTrackRequest")
	proto.RegisterType((*SShipOrderTrack)(nil), "SShipOrderTrack")
	proto.RegisterType((*SShipFlow)(nil), "SShipFlow")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ShipmentServiceClient is the client API for ShipmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShipmentServiceClient interface {
	// * 物流追踪
	GetLogisticFlowTrack(ctx context.Context, in *LogisticFlowTrackRequest, opts ...grpc.CallOption) (*SShipOrderTrack, error)
	// * 获取发货单的物流追踪信息,$shipOrderId:发货单编号 $invert:是否倒序排列
	ShipOrderLogisticTrack(ctx context.Context, in *OrderLogisticTrackRequest, opts ...grpc.CallOption) (*SShipOrderTrack, error)
}

type shipmentServiceClient struct {
	cc *grpc.ClientConn
}

func NewShipmentServiceClient(cc *grpc.ClientConn) ShipmentServiceClient {
	return &shipmentServiceClient{cc}
}

func (c *shipmentServiceClient) GetLogisticFlowTrack(ctx context.Context, in *LogisticFlowTrackRequest, opts ...grpc.CallOption) (*SShipOrderTrack, error) {
	out := new(SShipOrderTrack)
	err := c.cc.Invoke(ctx, "/ShipmentService/GetLogisticFlowTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentServiceClient) ShipOrderLogisticTrack(ctx context.Context, in *OrderLogisticTrackRequest, opts ...grpc.CallOption) (*SShipOrderTrack, error) {
	out := new(SShipOrderTrack)
	err := c.cc.Invoke(ctx, "/ShipmentService/ShipOrderLogisticTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShipmentServiceServer is the server API for ShipmentService service.
type ShipmentServiceServer interface {
	// * 物流追踪
	GetLogisticFlowTrack(context.Context, *LogisticFlowTrackRequest) (*SShipOrderTrack, error)
	// * 获取发货单的物流追踪信息,$shipOrderId:发货单编号 $invert:是否倒序排列
	ShipOrderLogisticTrack(context.Context, *OrderLogisticTrackRequest) (*SShipOrderTrack, error)
}

func RegisterShipmentServiceServer(s *grpc.Server, srv ShipmentServiceServer) {
	s.RegisterService(&_ShipmentService_serviceDesc, srv)
}

func _ShipmentService_GetLogisticFlowTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogisticFlowTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServiceServer).GetLogisticFlowTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShipmentService/GetLogisticFlowTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServiceServer).GetLogisticFlowTrack(ctx, req.(*LogisticFlowTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipmentService_ShipOrderLogisticTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderLogisticTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServiceServer).ShipOrderLogisticTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShipmentService/ShipOrderLogisticTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServiceServer).ShipOrderLogisticTrack(ctx, req.(*OrderLogisticTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShipmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ShipmentService",
	HandlerType: (*ShipmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogisticFlowTrack",
			Handler:    _ShipmentService_GetLogisticFlowTrack_Handler,
		},
		{
			MethodName: "ShipOrderLogisticTrack",
			Handler:    _ShipmentService_ShipOrderLogisticTrack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shipment_service.proto",
}

func init() {
	proto.RegisterFile("shipment_service.proto", fileDescriptor_shipment_service_e71900f70aa56218)
}

var fileDescriptor_shipment_service_e71900f70aa56218 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xdd, 0x4e, 0xea, 0x40,
	0x10, 0xc7, 0x4f, 0xf9, 0x66, 0x38, 0x09, 0xe7, 0x6c, 0x0c, 0x59, 0xf0, 0x23, 0x4d, 0xaf, 0xb8,
	0x2a, 0x09, 0x5e, 0x7a, 0x27, 0xf1, 0x2b, 0x41, 0x4d, 0x5a, 0xb8, 0x31, 0x31, 0xa6, 0xb4, 0x13,
	0xac, 0x50, 0x5a, 0xb7, 0x0b, 0xfa, 0x06, 0xbe, 0x87, 0x4f, 0x6a, 0x76, 0xbb, 0xc5, 0xad, 0xc2,
	0x0d, 0x74, 0x7e, 0x3b, 0x3b, 0xb3, 0xf3, 0x9f, 0x3f, 0x74, 0xd2, 0xe7, 0x30, 0x89, 0x70, 0xc5,
	0x9f, 0x52, 0x64, 0x9b, 0xd0, 0x47, 0x3b, 0x61, 0x31, 0x8f, 0xad, 0x77, 0xa0, 0xe3, 0x78, 0x1e,
	0xa6, 0x3c, 0xf4, 0x2f, 0x97, 0xf1, 0xdb, 0x84, 0x79, 0xfe, 0xc2, 0xc1, 0xd7, 0x35, 0xa6, 0x9c,
	0x98, 0xd0, 0x12, 0xb7, 0x12, 0x64, 0xa3, 0x38, 0x40, 0x6a, 0x98, 0x46, 0xbf, 0xe9, 0xe8, 0x88,
	0x58, 0xf0, 0x77, 0xa9, 0x6e, 0xcb, 0x94, 0x92, 0x4c, 0x29, 0x30, 0xd2, 0x81, 0x5a, 0xb8, 0xda,
	0x20, 0xe3, 0xb4, 0x6c, 0x1a, 0xfd, 0x86, 0xa3, 0x22, 0x6b, 0x0a, 0xdd, 0x7b, 0x16, 0x20, 0xcb,
	0xdb, 0xef, 0x6a, 0x2d, 0x13, 0x6e, 0x02, 0xd9, 0x9a, 0x38, 0x3a, 0xd2, 0xca, 0x96, 0x0a, 0x65,
	0x3f, 0x4a, 0xd0, 0x76, 0xdd, 0x3c, 0x51, 0x16, 0x25, 0x04, 0x2a, 0xdb, 0x09, 0xfe, 0x3b, 0xf2,
	0x9b, 0x50, 0xa8, 0xdf, 0x62, 0x9a, 0x7a, 0xf3, 0xfc, 0xd5, 0x79, 0x28, 0x86, 0x1a, 0xeb, 0x43,
	0x95, 0xb3, 0xa1, 0x74, 0x26, 0xde, 0xe7, 0x6a, 0xd2, 0x54, 0x32, 0x69, 0x34, 0xa4, 0x65, 0xdc,
	0x79, 0x11, 0xd2, 0x6a, 0x21, 0x43, 0x20, 0x72, 0x04, 0x4d, 0x11, 0xba, 0xdc, 0xe3, 0x48, 0x6b,
	0xf2, 0xfc, 0x1b, 0x90, 0x13, 0x80, 0x69, 0x12, 0x78, 0x1c, 0x27, 0x61, 0x84, 0xb4, 0x2e, 0x05,
	0xd0, 0x08, 0x31, 0xa1, 0x2a, 0x16, 0x96, 0xd2, 0x86, 0x59, 0xee, 0xb7, 0x86, 0x60, 0xcb, 0xa1,
	0x05, 0x72, 0xb2, 0x03, 0xeb, 0x11, 0x9a, 0x5b, 0x26, 0xc6, 0x75, 0xd7, 0xb3, 0x17, 0xf4, 0xb9,
	0xda, 0x63, 0x1e, 0x8a, 0x46, 0x23, 0x86, 0x79, 0xa3, 0x4c, 0x0b, 0x8d, 0x08, 0xa1, 0x1d, 0x8c,
	0x3c, 0xb6, 0x50, 0x42, 0xa8, 0x68, 0xf8, 0x69, 0x40, 0xdb, 0x55, 0xa6, 0x72, 0x33, 0x4f, 0x91,
	0x0b, 0x38, 0xb8, 0x42, 0xfe, 0xcb, 0x50, 0xa4, 0x6b, 0xef, 0x33, 0x59, 0xef, 0x9f, 0xfd, 0x63,
	0x5b, 0xd6, 0x1f, 0x72, 0x0d, 0x9d, 0x2d, 0x2b, 0xd8, 0x83, 0xf4, 0xec, 0xbd, 0x9e, 0xd9, 0x55,
	0xe9, 0xfc, 0xf8, 0xe1, 0xd0, 0xb6, 0x07, 0x7e, 0xcc, 0x70, 0xa0, 0x7c, 0x3f, 0x90, 0xbe, 0x3f,
	0x93, 0xbf, 0xb3, 0x9a, 0xfc, 0x3b, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x65, 0x4d, 0xfe,
	0x1e, 0x03, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: item_service.proto

package proto // import "."

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 商品销售类型
type EItemSalesType int32

const (
	EItemSalesType_IT_NORMAL    EItemSalesType = 0
	EItemSalesType_IT_WHOLESALE EItemSalesType = 1
)

var EItemSalesType_name = map[int32]string{
	0: "IT_NORMAL",
	1: "IT_WHOLESALE",
}
var EItemSalesType_value = map[string]int32{
	"IT_NORMAL":    0,
	"IT_WHOLESALE": 1,
}

func (x EItemSalesType) String() string {
	return proto.EnumName(EItemSalesType_name, int32(x))
}
func (EItemSalesType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_item_service_3ebc59800fc886b0, []int{0}
}

type SkuRequest struct {
	ItemId               int64    `protobuf:"zigzag64,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
	SkuId                int64    `protobuf:"zigzag64,2,opt,name=skuId,proto3" json:"skuId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SkuRequest) Reset()         { *m = SkuRequest{} }
func (m *SkuRequest) String() string { return proto.CompactTextString(m) }
func (*SkuRequest) ProtoMessage()    {}
func (*SkuRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_item_service_3ebc59800fc886b0, []int{0}
}
func (m *SkuRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SkuRequest.Unmarshal(m, b)
}
func (m *SkuRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SkuRequest.Marshal(b, m, deterministic)
}
func (dst *SkuRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkuRequest.Merge(dst, src)
}
func (m *SkuRequest) XXX_Size() int {
	return xxx_messageInfo_SkuRequest.Size(m)
}
func (m *SkuRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SkuRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SkuRequest proto.InternalMessageInfo

func (m *SkuRequest) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *SkuRequest) GetSkuId() int64 {
	if m != nil {
		return m.SkuId
	}
	return 0
}

type ItemDetailRequest struct {
	ItemId               int64    `protobuf:"zigzag64,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
	IType                int32    `protobuf:"zigzag32,2,opt,name=iType,proto3" json:"iType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ItemDetailRequest) Reset()         { *m = ItemDetailRequest{} }
func (m *ItemDetailRequest) String() string { return proto.CompactTextString(m) }
func (*ItemDetailRequest) ProtoMessage()    {}
func (*ItemDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_item_service_3ebc59800fc886b0, []int{1}
}
func (m *ItemDetailRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ItemDetailRequest.Unmarshal(m, b)
}
func (m *ItemDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ItemDetailRequest.Marshal(b, m, deterministic)
}
func (dst *ItemDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemDetailRequest.Merge(dst, src)
}
func (m *ItemDetailRequest) XXX_Size() int {
	return xxx_messageInfo_ItemDetailRequest.Size(m)
}
func (m *ItemDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ItemDetailRequest proto.InternalMessageInfo

func (m *ItemDetailRequest) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *ItemDetailRequest) GetIType() int32 {
	if m != nil {
		return m.IType
	}
	return 0
}

type PagingGoodsRequest struct {
	ItemType   EItemSalesType `protobuf:"varint,1,opt,name=ItemType,proto3,enum=EItemSalesType" json:"ItemType,omitempty"`
	CategoryId int64          `protobuf:"varint,2,opt,name=CategoryId,proto3" json:"CategoryId,omitempty"`
	// 关键词
	Keyword              string         `protobuf:"bytes,3,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	Params               *SPagingParams `protobuf:"bytes,4,opt,name=Params,proto3" json:"Params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PagingGoodsRequest) Reset()         { *m = PagingGoodsRequest{} }
func (m *PagingGoodsRequest) String() string { return proto.CompactTextString(m) }
func (*PagingGoodsRequest) ProtoMessage()    {}
func (*PagingGoodsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_item_service_3ebc59800fc886b0, []int{2}
}
func (m *PagingGoodsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PagingGoodsRequest.Unmarshal(m, b)
}
func (m *PagingGoodsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PagingGoodsRequest.Marshal(b, m, deterministic)
}
func (dst *PagingGoodsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PagingGoodsRequest.Merge(dst, src)
}
func (m *PagingGoodsRequest) XXX_Size() int {
	return xxx_messageInfo_PagingGoodsRequest.Size(m)
}
func (m *PagingGoodsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PagingGoodsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PagingGoodsRequest proto.InternalMessageInfo

func (m *PagingGoodsRequest) GetItemType() EItemSalesType {
	if m != nil {
		return m.ItemType
	}
	return EItemSalesType_IT_NORMAL
}

func (m *PagingGoodsRequest) GetCategoryId() int64 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *PagingGoodsRequest) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *PagingGoodsRequest) GetParams() *SPagingParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type PagingShopGoodsRequest struct {
	ShopId               int64          `protobuf:"varint,1,opt,name=ShopId,proto3" json:"ShopId,omitempty"`
	CategoryId           int64          `protobuf:"varint,2,opt,name=CategoryId,proto3" json:"CategoryId,omitempty"`
	Params               *SPagingParams `protobuf:"bytes,3,opt,name=Params,proto3" json:"Params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PagingShopGoodsRequest) Reset()         { *m = PagingShopGoodsRequest{} }
func (m *PagingShopGoodsRequest) String() string { return proto.CompactTextString(m) }
func (*PagingShopGoodsRequest) ProtoMessage()    {}
func (*PagingShopGoodsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_item_service_3ebc59800fc886b0, []int{3}
}
func (m *PagingShopGoodsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PagingShopGoodsRequest.Unmarshal(m, b)
}
func (m *PagingShopGoodsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PagingShopGoodsRequest.Marshal(b, m, deterministic)
}
func (dst *PagingShopGoodsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PagingShopGoodsRequest.Merge(dst, src)
}
func (m *PagingShopGoodsRequest) XXX_Size() int {
	return xxx_messageInfo_PagingShopGoodsRequest.Size(m)
}
func (m *PagingShopGoodsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PagingShopGoodsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PagingShopGoodsRequest proto.InternalMessageInfo

func (m *PagingShopGoodsRequest) GetShopId() int64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *PagingShopGoodsRequest) GetCategoryId() int64 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *PagingShopGoodsRequest) GetParams() *SPagingParams {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*SkuRequest)(nil), "SkuRequest")
	proto.RegisterType((*ItemDetailRequest)(nil), "ItemDetailRequest")
	proto.RegisterType((*PagingGoodsRequest)(nil), "PagingGoodsRequest")
	proto.RegisterType((*PagingShopGoodsRequest)(nil), "PagingShopGoodsRequest")
	proto.RegisterEnum("EItemSalesType", EItemSalesType_name, EItemSalesType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ItemServiceClient is the client API for ItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ItemServiceClient interface {
	// 获取商品
	GetItem(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SUnifiedViewItem, error)
	// 获取商品用于销售的快照和信息
	GetItemSnapshot(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SItemSnapshot, error)
	// 获取商品交易快照,参数传递:snapshotId
	GetTradeSnapshot(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*STradeSnapshot, error)
	// 获取SKU
	GetSku(ctx context.Context, in *SkuRequest, opts ...grpc.CallOption) (*SSku, error)
	// 获取商品的Sku-JSON格式,itemId
	GetItemSkuJson(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*String, error)
	// 获取商品详细数据
	GetItemDetailData(ctx context.Context, in *ItemDetailRequest, opts ...grpc.CallOption) (*String, error)
	// 根据销售标签获取指定数目的商品
	GetValueGoodsBySaleLabel(ctx context.Context, in *GetItemsByLabelRequest, opts ...grpc.CallOption) (*PagingShopGoodsResponse, error)
	// 获取店铺分页上架的商品
	GetShopPagedOnShelvesGoods(ctx context.Context, in *PagingShopGoodsRequest, opts ...grpc.CallOption) (*PagingShopGoodsResponse, error)
	// 获取上架商品数据（分页）
	GetPagedOnShelvesItem(ctx context.Context, in *PagingGoodsRequest, opts ...grpc.CallOption) (*PagingGoodsResponse, error)
	// 获取上架商品数据
	GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*PagingGoodsResponse, error)
	// 获取所有的商品标签
	GetAllSaleLabels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ItemLabelListResponse, error)
	// 获取销售标签
	GetSaleLabel(ctx context.Context, in *IdOrName, opts ...grpc.CallOption) (*SItemLabel, error)
	// 保存销售标签
	SaveSaleLabel(ctx context.Context, in *SItemLabel, opts ...grpc.CallOption) (*Result, error)
	// 删除销售标签
	DeleteSaleLabel(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
}

type itemServiceClient struct {
	cc *grpc.ClientConn
}

func NewItemServiceClient(cc *grpc.ClientConn) ItemServiceClient {
	return &itemServiceClient{cc}
}

func (c *itemServiceClient) GetItem(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SUnifiedViewItem, error) {
	out := new(SUnifiedViewItem)
	err := c.cc.Invoke(ctx, "/ItemService/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetItemSnapshot(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SItemSnapshot, error) {
	out := new(SItemSnapshot)
	err := c.cc.Invoke(ctx, "/ItemService/GetItemSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetTradeSnapshot(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*STradeSnapshot, error) {
	out := new(STradeSnapshot)
	err := c.cc.Invoke(ctx, "/ItemService/GetTradeSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetSku(ctx context.Context, in *SkuRequest, opts ...grpc.CallOption) (*SSku, error) {
	out := new(SSku)
	err := c.cc.Invoke(ctx, "/ItemService/GetSku", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetItemSkuJson(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/ItemService/GetItemSkuJson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetItemDetailData(ctx context.Context, in *ItemDetailRequest, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/ItemService/GetItemDetailData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetValueGoodsBySaleLabel(ctx context.Context, in *GetItemsByLabelRequest, opts ...grpc.CallOption) (*PagingShopGoodsResponse, error) {
	out := new(PagingShopGoodsResponse)
	err := c.cc.Invoke(ctx, "/ItemService/GetValueGoodsBySaleLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetShopPagedOnShelvesGoods(ctx context.Context, in *PagingShopGoodsRequest, opts ...grpc.CallOption) (*PagingShopGoodsResponse, error) {
	out := new(PagingShopGoodsResponse)
	err := c.cc.Invoke(ctx, "/ItemService/GetShopPagedOnShelvesGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetPagedOnShelvesItem(ctx context.Context, in *PagingGoodsRequest, opts ...grpc.CallOption) (*PagingGoodsResponse, error) {
	out := new(PagingGoodsResponse)
	err := c.cc.Invoke(ctx, "/ItemService/GetPagedOnShelvesItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*PagingGoodsResponse, error) {
	out := new(PagingGoodsResponse)
	err := c.cc.Invoke(ctx, "/ItemService/GetItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetAllSaleLabels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ItemLabelListResponse, error) {
	out := new(ItemLabelListResponse)
	err := c.cc.Invoke(ctx, "/ItemService/GetAllSaleLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetSaleLabel(ctx context.Context, in *IdOrName, opts ...grpc.CallOption) (*SItemLabel, error) {
	out := new(SItemLabel)
	err := c.cc.Invoke(ctx, "/ItemService/GetSaleLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) SaveSaleLabel(ctx context.Context, in *SItemLabel, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ItemService/SaveSaleLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) DeleteSaleLabel(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ItemService/DeleteSaleLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemServiceServer is the server API for ItemService service.
type ItemServiceServer interface {
	// 获取商品
	GetItem(context.Context, *Int64) (*SUnifiedViewItem, error)
	// 获取商品用于销售的快照和信息
	GetItemSnapshot(context.Context, *Int64) (*SItemSnapshot, error)
	// 获取商品交易快照,参数传递:snapshotId
	GetTradeSnapshot(context.Context, *Int64) (*STradeSnapshot, error)
	// 获取SKU
	GetSku(context.Context, *SkuRequest) (*SSku, error)
	// 获取商品的Sku-JSON格式,itemId
	GetItemSkuJson(context.Context, *Int64) (*String, error)
	// 获取商品详细数据
	GetItemDetailData(context.Context, *ItemDetailRequest) (*String, error)
	// 根据销售标签获取指定数目的商品
	GetValueGoodsBySaleLabel(context.Context, *GetItemsByLabelRequest) (*PagingShopGoodsResponse, error)
	// 获取店铺分页上架的商品
	GetShopPagedOnShelvesGoods(context.Context, *PagingShopGoodsRequest) (*PagingShopGoodsResponse, error)
	// 获取上架商品数据（分页）
	GetPagedOnShelvesItem(context.Context, *PagingGoodsRequest) (*PagingGoodsResponse, error)
	// 获取上架商品数据
	GetItems(context.Context, *GetItemsRequest) (*PagingGoodsResponse, error)
	// 获取所有的商品标签
	GetAllSaleLabels(context.Context, *Empty) (*ItemLabelListResponse, error)
	// 获取销售标签
	GetSaleLabel(context.Context, *IdOrName) (*SItemLabel, error)
	// 保存销售标签
	SaveSaleLabel(context.Context, *SItemLabel) (*Result, error)
	// 删除销售标签
	DeleteSaleLabel(context.Context, *Int64) (*Result, error)
}

func RegisterItemServiceServer(s *grpc.Server, srv ItemServiceServer) {
	s.RegisterService(&_ItemService_serviceDesc, srv)
}

func _ItemService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItem(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetItemSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItemSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetItemSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItemSnapshot(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetTradeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetTradeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetTradeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetTradeSnapshot(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetSku",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetSku(ctx, req.(*SkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetItemSkuJson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItemSkuJson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetItemSkuJson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItemSkuJson(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetItemDetailData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItemDetailData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetItemDetailData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItemDetailData(ctx, req.(*ItemDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetValueGoodsBySaleLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsByLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetValueGoodsBySaleLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetValueGoodsBySaleLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetValueGoodsBySaleLabel(ctx, req.(*GetItemsByLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetShopPagedOnShelvesGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagingShopGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetShopPagedOnShelvesGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetShopPagedOnShelvesGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetShopPagedOnShelvesGoods(ctx, req.(*PagingShopGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetPagedOnShelvesItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagingGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetPagedOnShelvesItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetPagedOnShelvesItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetPagedOnShelvesItem(ctx, req.(*PagingGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItems(ctx, req.(*GetItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetAllSaleLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetAllSaleLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetAllSaleLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetAllSaleLabels(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetSaleLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdOrName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetSaleLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetSaleLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetSaleLabel(ctx, req.(*IdOrName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_SaveSaleLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SItemLabel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).SaveSaleLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/SaveSaleLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).SaveSaleLabel(ctx, req.(*SItemLabel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_DeleteSaleLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).DeleteSaleLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/DeleteSaleLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).DeleteSaleLabel(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

var _ItemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ItemService",
	HandlerType: (*ItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItem",
			Handler:    _ItemService_GetItem_Handler,
		},
		{
			MethodName: "GetItemSnapshot",
			Handler:    _ItemService_GetItemSnapshot_Handler,
		},
		{
			MethodName: "GetTradeSnapshot",
			Handler:    _ItemService_GetTradeSnapshot_Handler,
		},
		{
			MethodName: "GetSku",
			Handler:    _ItemService_GetSku_Handler,
		},
		{
			MethodName: "GetItemSkuJson",
			Handler:    _ItemService_GetItemSkuJson_Handler,
		},
		{
			MethodName: "GetItemDetailData",
			Handler:    _ItemService_GetItemDetailData_Handler,
		},
		{
			MethodName: "GetValueGoodsBySaleLabel",
			Handler:    _ItemService_GetValueGoodsBySaleLabel_Handler,
		},
		{
			MethodName: "GetShopPagedOnShelvesGoods",
			Handler:    _ItemService_GetShopPagedOnShelvesGoods_Handler,
		},
		{
			MethodName: "GetPagedOnShelvesItem",
			Handler:    _ItemService_GetPagedOnShelvesItem_Handler,
		},
		{
			MethodName: "GetItems",
			Handler:    _ItemService_GetItems_Handler,
		},
		{
			MethodName: "GetAllSaleLabels",
			Handler:    _ItemService_GetAllSaleLabels_Handler,
		},
		{
			MethodName: "GetSaleLabel",
			Handler:    _ItemService_GetSaleLabel_Handler,
		},
		{
			MethodName: "SaveSaleLabel",
			Handler:    _ItemService_SaveSaleLabel_Handler,
		},
		{
			MethodName: "DeleteSaleLabel",
			Handler:    _ItemService_DeleteSaleLabel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item_service.proto",
}

func init() { proto.RegisterFile("item_service.proto", fileDescriptor_item_service_3ebc59800fc886b0) }

var fileDescriptor_item_service_3ebc59800fc886b0 = []byte{
	// 631 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x5d, 0x6f, 0xda, 0x48,
	0x14, 0x35, 0xcb, 0x06, 0xc2, 0x25, 0xe1, 0x63, 0x36, 0x4b, 0x90, 0x1f, 0xa2, 0xc8, 0xbb, 0x4a,
	0x51, 0xa3, 0x4e, 0x55, 0x1a, 0xf5, 0xa1, 0x7d, 0x22, 0x05, 0x51, 0xb7, 0x34, 0xa4, 0x1e, 0x9a,
	0x4a, 0x7d, 0x89, 0x26, 0xf5, 0xad, 0xb1, 0x30, 0xb6, 0xeb, 0x19, 0x27, 0xe5, 0xf7, 0xf4, 0x57,
	0xf5, 0xdf, 0x54, 0x63, 0x1b, 0x03, 0xa2, 0x4a, 0xfa, 0x84, 0xee, 0xb9, 0xe7, 0x9e, 0xb9, 0x1f,
	0x07, 0x03, 0x71, 0x25, 0xce, 0xaf, 0x05, 0x46, 0xb7, 0xee, 0x17, 0xa4, 0x61, 0x14, 0xc8, 0x40,
	0xdf, 0x73, 0xbc, 0xe0, 0x86, 0x7b, 0x59, 0x44, 0xe6, 0x28, 0x04, 0x77, 0xf0, 0xa9, 0x62, 0xa6,
	0x98, 0xf1, 0x12, 0x80, 0xcd, 0x62, 0x0b, 0xbf, 0xc5, 0x28, 0x24, 0x69, 0x41, 0x49, 0xe5, 0x4c,
	0xbb, 0x5d, 0x38, 0x2e, 0x74, 0x88, 0x95, 0x45, 0xe4, 0x00, 0x76, 0xc4, 0x2c, 0x36, 0xed, 0xf6,
	0x5f, 0x09, 0x9c, 0x06, 0x46, 0x0f, 0x9a, 0xa6, 0xc4, 0x79, 0x1f, 0x25, 0x77, 0xbd, 0x3f, 0x90,
	0x70, 0x27, 0x8b, 0x10, 0x13, 0x89, 0xa6, 0x95, 0x06, 0xc6, 0x8f, 0x02, 0x90, 0x4b, 0xee, 0xb8,
	0xbe, 0x33, 0x0c, 0x02, 0x5b, 0x2c, 0x45, 0x4e, 0x61, 0x57, 0x29, 0x27, 0x7c, 0x25, 0x53, 0xeb,
	0xd6, 0xe9, 0x40, 0x21, 0x8c, 0x7b, 0x28, 0x14, 0x6c, 0xe5, 0x04, 0x72, 0x04, 0xf0, 0x9a, 0x4b,
	0x74, 0x82, 0x68, 0x91, 0x75, 0x58, 0xb4, 0xd6, 0x10, 0xd2, 0x86, 0xf2, 0x3b, 0x5c, 0xdc, 0x05,
	0x91, 0xdd, 0x2e, 0x1e, 0x17, 0x3a, 0x15, 0x6b, 0x19, 0x92, 0x13, 0x28, 0x5d, 0xf2, 0x88, 0xcf,
	0x45, 0xfb, 0xef, 0xe3, 0x42, 0xa7, 0xda, 0xad, 0x51, 0x96, 0x36, 0x93, 0xa2, 0x56, 0x96, 0x35,
	0xbe, 0x43, 0x2b, 0xc5, 0xd9, 0x34, 0x08, 0x37, 0x1a, 0x6d, 0x41, 0x49, 0x61, 0xd9, 0xb4, 0x45,
	0x2b, 0x8b, 0x1e, 0xec, 0x69, 0xf5, 0x72, 0xf1, 0xbe, 0x97, 0x1f, 0x3f, 0x83, 0xda, 0xe6, 0xdc,
	0x64, 0x1f, 0x2a, 0xe6, 0xe4, 0xfa, 0x62, 0x6c, 0xbd, 0xef, 0x8d, 0x1a, 0x1a, 0x69, 0xc0, 0x9e,
	0x39, 0xb9, 0xfe, 0xf4, 0x66, 0x3c, 0x1a, 0xb0, 0xde, 0x68, 0xd0, 0x28, 0x74, 0x7f, 0xee, 0x40,
	0x35, 0x29, 0x49, 0x9d, 0x40, 0x4e, 0xa0, 0x3c, 0x44, 0xa9, 0x10, 0x52, 0xa2, 0xa6, 0x2f, 0x5f,
	0x9c, 0xe9, 0x4d, 0xca, 0x3e, 0xfa, 0xee, 0x57, 0x17, 0xed, 0x2b, 0x17, 0xef, 0x54, 0xca, 0xd0,
	0xc8, 0x29, 0xd4, 0x33, 0x1e, 0xf3, 0x79, 0x28, 0xa6, 0x81, 0xcc, 0xf9, 0x35, 0xca, 0xd6, 0x71,
	0x43, 0x23, 0x4f, 0xa0, 0x31, 0x44, 0x39, 0x89, 0xb8, 0x8d, 0x5b, 0xec, 0x3a, 0x65, 0x1b, 0x09,
	0x43, 0x23, 0x47, 0x50, 0x1a, 0xa2, 0x64, 0xb3, 0x98, 0x54, 0xe9, 0xca, 0x6e, 0xfa, 0x0e, 0x65,
	0x6c, 0x16, 0x1b, 0x1a, 0xf9, 0x0f, 0x6a, 0xcb, 0xb7, 0x67, 0xf1, 0x5b, 0x11, 0xf8, 0xb9, 0x58,
	0x99, 0x32, 0x19, 0xb9, 0xbe, 0x63, 0x68, 0xa4, 0x0b, 0xcd, 0x8c, 0x94, 0x3a, 0xae, 0xcf, 0x25,
	0x27, 0x84, 0x6e, 0x59, 0x70, 0xbd, 0x66, 0x0c, 0xed, 0x21, 0xca, 0x2b, 0xee, 0xc5, 0x98, 0xdc,
	0xed, 0x7c, 0xa1, 0x36, 0x39, 0xe2, 0x37, 0xe8, 0x91, 0x43, 0x9a, 0xc9, 0x89, 0xf3, 0x45, 0x82,
	0x2c, 0xeb, 0xdb, 0x74, 0xeb, 0xda, 0x22, 0x0c, 0x7c, 0x81, 0x86, 0x46, 0x3e, 0x80, 0xae, 0x26,
	0x99, 0x06, 0xe1, 0x25, 0x77, 0xd0, 0x1e, 0xfb, 0x6c, 0x8a, 0xde, 0x2d, 0x8a, 0x84, 0x47, 0x0e,
	0xe9, 0xef, 0x7d, 0x72, 0xaf, 0x64, 0x1f, 0xfe, 0x1d, 0xa2, 0xdc, 0x94, 0x4b, 0xce, 0xf5, 0x0f,
	0xdd, 0xfe, 0x6b, 0xe8, 0x07, 0x9b, 0x60, 0xae, 0x72, 0x06, 0xbb, 0xcb, 0x71, 0x48, 0x23, 0x9f,
	0xec, 0xe1, 0x2a, 0x75, 0xc7, 0x9e, 0xe7, 0xe5, 0x6b, 0x11, 0xa4, 0x44, 0x07, 0xf3, 0x50, 0x2e,
	0xf4, 0x56, 0xb2, 0xda, 0x04, 0x1c, 0xb9, 0x42, 0xae, 0x55, 0x75, 0x60, 0x4f, 0x2d, 0x21, 0xdf,
	0x64, 0x85, 0x9a, 0xf6, 0x38, 0xba, 0xe0, 0x73, 0xd4, 0xab, 0xa9, 0x55, 0x12, 0xdc, 0xd0, 0xc8,
	0x23, 0xd8, 0x67, 0xfc, 0x16, 0x57, 0xd4, 0xf5, 0xbc, 0x5e, 0xa6, 0x16, 0x8a, 0xd8, 0x53, 0x0e,
	0xf9, 0x1f, 0xea, 0x7d, 0xf4, 0x50, 0xae, 0x51, 0x57, 0x16, 0x58, 0xb2, 0xce, 0x2b, 0x9f, 0xcb,
	0xf4, 0x55, 0xf2, 0xe1, 0xba, 0x29, 0x25, 0x3f, 0xcf, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xd4,
	0xea, 0x9d, 0xf7, 0xf7, 0x04, 0x00, 0x00,
}

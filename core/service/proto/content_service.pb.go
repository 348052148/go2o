// Code generated by protoc-gen-go. DO NOT EDIT.
// source: content_service.proto

package proto // import "."

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PagingArticleRequest struct {
	Cat                  string   `protobuf:"bytes,1,opt,name=cat,proto3" json:"cat,omitempty"`
	Begin                int32    `protobuf:"zigzag32,2,opt,name=begin,proto3" json:"begin,omitempty"`
	Size                 int32    `protobuf:"zigzag32,3,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PagingArticleRequest) Reset()         { *m = PagingArticleRequest{} }
func (m *PagingArticleRequest) String() string { return proto.CompactTextString(m) }
func (*PagingArticleRequest) ProtoMessage()    {}
func (*PagingArticleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_service_4b993f449a144a95, []int{0}
}
func (m *PagingArticleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PagingArticleRequest.Unmarshal(m, b)
}
func (m *PagingArticleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PagingArticleRequest.Marshal(b, m, deterministic)
}
func (dst *PagingArticleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PagingArticleRequest.Merge(dst, src)
}
func (m *PagingArticleRequest) XXX_Size() int {
	return xxx_messageInfo_PagingArticleRequest.Size(m)
}
func (m *PagingArticleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PagingArticleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PagingArticleRequest proto.InternalMessageInfo

func (m *PagingArticleRequest) GetCat() string {
	if m != nil {
		return m.Cat
	}
	return ""
}

func (m *PagingArticleRequest) GetBegin() int32 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *PagingArticleRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type ArticlesResponse struct {
	Value                []*SArticle `protobuf:"bytes,1,rep,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ArticlesResponse) Reset()         { *m = ArticlesResponse{} }
func (m *ArticlesResponse) String() string { return proto.CompactTextString(m) }
func (*ArticlesResponse) ProtoMessage()    {}
func (*ArticlesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_service_4b993f449a144a95, []int{1}
}
func (m *ArticlesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArticlesResponse.Unmarshal(m, b)
}
func (m *ArticlesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArticlesResponse.Marshal(b, m, deterministic)
}
func (dst *ArticlesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticlesResponse.Merge(dst, src)
}
func (m *ArticlesResponse) XXX_Size() int {
	return xxx_messageInfo_ArticlesResponse.Size(m)
}
func (m *ArticlesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticlesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArticlesResponse proto.InternalMessageInfo

func (m *ArticlesResponse) GetValue() []*SArticle {
	if m != nil {
		return m.Value
	}
	return nil
}

// * 文章
type SArticle struct {
	// * 编号
	Id int32 `protobuf:"zigzag32,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// * 栏目编号
	CatId int32 `protobuf:"zigzag32,2,opt,name=CatId,proto3" json:"CatId,omitempty"`
	// * 标题
	Title string `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	// * 小标题
	SmallTitle string `protobuf:"bytes,4,opt,name=SmallTitle,proto3" json:"SmallTitle,omitempty"`
	// * 文章附图
	Thumbnail string `protobuf:"bytes,5,opt,name=Thumbnail,proto3" json:"Thumbnail,omitempty"`
	// * 重定向URL
	PublisherId int32 `protobuf:"zigzag32,6,opt,name=PublisherId,proto3" json:"PublisherId,omitempty"`
	// * 重定向URL
	Location string `protobuf:"bytes,7,opt,name=Location,proto3" json:"Location,omitempty"`
	// * 优先级,优先级越高，则置顶
	Priority int32 `protobuf:"zigzag32,8,opt,name=Priority,proto3" json:"Priority,omitempty"`
	// * 浏览钥匙
	AccessKey string `protobuf:"bytes,9,opt,name=AccessKey,proto3" json:"AccessKey,omitempty"`
	// * 文档内容
	Content string `protobuf:"bytes,10,opt,name=Content,proto3" json:"Content,omitempty"`
	// * 标签（关键词）
	Tags string `protobuf:"bytes,11,opt,name=Tags,proto3" json:"Tags,omitempty"`
	// * 显示次数
	ViewCount int32 `protobuf:"zigzag32,12,opt,name=ViewCount,proto3" json:"ViewCount,omitempty"`
	// * 排序序号
	SortNum int32 `protobuf:"zigzag32,13,opt,name=SortNum,proto3" json:"SortNum,omitempty"`
	// * 创建时间
	CreateTime int32 `protobuf:"zigzag32,14,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	// * 最后修改时间
	UpdateTime           int32    `protobuf:"zigzag32,15,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SArticle) Reset()         { *m = SArticle{} }
func (m *SArticle) String() string { return proto.CompactTextString(m) }
func (*SArticle) ProtoMessage()    {}
func (*SArticle) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_service_4b993f449a144a95, []int{2}
}
func (m *SArticle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SArticle.Unmarshal(m, b)
}
func (m *SArticle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SArticle.Marshal(b, m, deterministic)
}
func (dst *SArticle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SArticle.Merge(dst, src)
}
func (m *SArticle) XXX_Size() int {
	return xxx_messageInfo_SArticle.Size(m)
}
func (m *SArticle) XXX_DiscardUnknown() {
	xxx_messageInfo_SArticle.DiscardUnknown(m)
}

var xxx_messageInfo_SArticle proto.InternalMessageInfo

func (m *SArticle) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SArticle) GetCatId() int32 {
	if m != nil {
		return m.CatId
	}
	return 0
}

func (m *SArticle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SArticle) GetSmallTitle() string {
	if m != nil {
		return m.SmallTitle
	}
	return ""
}

func (m *SArticle) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *SArticle) GetPublisherId() int32 {
	if m != nil {
		return m.PublisherId
	}
	return 0
}

func (m *SArticle) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *SArticle) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *SArticle) GetAccessKey() string {
	if m != nil {
		return m.AccessKey
	}
	return ""
}

func (m *SArticle) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *SArticle) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

func (m *SArticle) GetViewCount() int32 {
	if m != nil {
		return m.ViewCount
	}
	return 0
}

func (m *SArticle) GetSortNum() int32 {
	if m != nil {
		return m.SortNum
	}
	return 0
}

func (m *SArticle) GetCreateTime() int32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *SArticle) GetUpdateTime() int32 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func init() {
	proto.RegisterType((*PagingArticleRequest)(nil), "PagingArticleRequest")
	proto.RegisterType((*ArticlesResponse)(nil), "ArticlesResponse")
	proto.RegisterType((*SArticle)(nil), "SArticle")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContentServiceClient interface {
	// * 获取置顶的文章,cat
	QueryTopArticles(ctx context.Context, in *String, opts ...grpc.CallOption) (*ArticlesResponse, error)
	// * 获取分页文章
	QueryPagingArticles(ctx context.Context, in *PagingArticleRequest, opts ...grpc.CallOption) (*SPagingResult, error)
}

type contentServiceClient struct {
	cc *grpc.ClientConn
}

func NewContentServiceClient(cc *grpc.ClientConn) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) QueryTopArticles(ctx context.Context, in *String, opts ...grpc.CallOption) (*ArticlesResponse, error) {
	out := new(ArticlesResponse)
	err := c.cc.Invoke(ctx, "/ContentService/QueryTopArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) QueryPagingArticles(ctx context.Context, in *PagingArticleRequest, opts ...grpc.CallOption) (*SPagingResult, error) {
	out := new(SPagingResult)
	err := c.cc.Invoke(ctx, "/ContentService/QueryPagingArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
type ContentServiceServer interface {
	// * 获取置顶的文章,cat
	QueryTopArticles(context.Context, *String) (*ArticlesResponse, error)
	// * 获取分页文章
	QueryPagingArticles(context.Context, *PagingArticleRequest) (*SPagingResult, error)
}

func RegisterContentServiceServer(s *grpc.Server, srv ContentServiceServer) {
	s.RegisterService(&_ContentService_serviceDesc, srv)
}

func _ContentService_QueryTopArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).QueryTopArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentService/QueryTopArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).QueryTopArticles(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_QueryPagingArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagingArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).QueryPagingArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentService/QueryPagingArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).QueryPagingArticles(ctx, req.(*PagingArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryTopArticles",
			Handler:    _ContentService_QueryTopArticles_Handler,
		},
		{
			MethodName: "QueryPagingArticles",
			Handler:    _ContentService_QueryPagingArticles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content_service.proto",
}

func init() {
	proto.RegisterFile("content_service.proto", fileDescriptor_content_service_4b993f449a144a95)
}

var fileDescriptor_content_service_4b993f449a144a95 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0x97, 0x76, 0x5d, 0x9b, 0xd7, 0x51, 0x5a, 0xb3, 0x49, 0x56, 0x85, 0xa0, 0xca, 0xa9,
	0xa7, 0x08, 0x6d, 0x47, 0x24, 0xa4, 0xd1, 0x53, 0x05, 0x42, 0x25, 0x09, 0x3b, 0x70, 0x41, 0x4e,
	0xf2, 0x94, 0x59, 0x72, 0xed, 0x62, 0x3b, 0xa0, 0x72, 0xe4, 0x4f, 0xe1, 0x2f, 0x45, 0xb6, 0x97,
	0xb6, 0xa0, 0x9d, 0xe2, 0xef, 0xf7, 0xe9, 0xbd, 0x2f, 0xb2, 0x3f, 0xb8, 0xae, 0x94, 0xb4, 0x28,
	0xed, 0x37, 0x83, 0xfa, 0x07, 0xaf, 0x30, 0xdd, 0x69, 0x65, 0xd5, 0xfc, 0xb2, 0x11, 0xaa, 0x64,
	0x22, 0xa8, 0x24, 0x83, 0xab, 0x0d, 0x6b, 0xb8, 0x6c, 0xee, 0xb4, 0xe5, 0x95, 0xc0, 0x0c, 0xbf,
	0xb7, 0x68, 0x2c, 0x99, 0x42, 0xbf, 0x62, 0x96, 0x46, 0x8b, 0x68, 0x19, 0x67, 0xee, 0x48, 0xae,
	0x60, 0x50, 0x62, 0xc3, 0x25, 0xed, 0x2d, 0xa2, 0xe5, 0x2c, 0x0b, 0x82, 0x10, 0x38, 0x37, 0xfc,
	0x17, 0xd2, 0xbe, 0x87, 0xfe, 0x9c, 0xdc, 0xc2, 0xf4, 0x71, 0x9b, 0xc9, 0xd0, 0xec, 0x94, 0x34,
	0x48, 0x5e, 0xc3, 0xe0, 0x9e, 0x89, 0x16, 0x69, 0xb4, 0xe8, 0x2f, 0xc7, 0x37, 0x71, 0x9a, 0x77,
	0x81, 0x81, 0x27, 0x7f, 0xfa, 0x30, 0xea, 0x18, 0x99, 0x40, 0x6f, 0x5d, 0xfb, 0xf0, 0x59, 0xd6,
	0x5b, 0xd7, 0x2e, 0x7b, 0xc5, 0xec, 0xba, 0xee, 0xb2, 0xbd, 0x70, 0xb4, 0xe0, 0x56, 0x84, 0xf0,
	0x38, 0x0b, 0x82, 0xbc, 0x02, 0xc8, 0xb7, 0x4c, 0x88, 0x60, 0x9d, 0x7b, 0xeb, 0x84, 0x90, 0x97,
	0x10, 0x17, 0x0f, 0xed, 0xb6, 0x94, 0x8c, 0x0b, 0x3a, 0xf0, 0xf6, 0x11, 0x90, 0x05, 0x8c, 0x37,
	0x6d, 0x29, 0xb8, 0x79, 0x40, 0xbd, 0xae, 0xe9, 0x85, 0xcf, 0x3b, 0x45, 0x64, 0x0e, 0xa3, 0x8f,
	0xaa, 0x62, 0x96, 0x2b, 0x49, 0x87, 0x7e, 0xfc, 0xa0, 0x9d, 0xb7, 0xd1, 0x5c, 0x69, 0x6e, 0xf7,
	0x74, 0xe4, 0x47, 0x0f, 0xda, 0xe5, 0xde, 0x55, 0x15, 0x1a, 0xf3, 0x01, 0xf7, 0x34, 0x0e, 0xb9,
	0x07, 0x40, 0x28, 0x0c, 0x57, 0xe1, 0xb9, 0x28, 0x78, 0xaf, 0x93, 0xee, 0x86, 0x0b, 0xd6, 0x18,
	0x3a, 0xf6, 0xd8, 0x9f, 0xdd, 0xae, 0x7b, 0x8e, 0x3f, 0x57, 0xaa, 0x95, 0x96, 0x5e, 0xfa, 0xa0,
	0x23, 0x70, 0xbb, 0x72, 0xa5, 0xed, 0xa7, 0x76, 0x4b, 0x9f, 0x79, 0xaf, 0x93, 0xee, 0x6e, 0x56,
	0x1a, 0x99, 0xc5, 0x82, 0x6f, 0x91, 0x4e, 0xbc, 0x79, 0x42, 0x9c, 0xff, 0x65, 0x57, 0x77, 0xfe,
	0xf3, 0xe0, 0x1f, 0xc9, 0xcd, 0xef, 0x08, 0x26, 0x8f, 0xff, 0x95, 0x87, 0x52, 0x91, 0x37, 0x30,
	0xfd, 0xdc, 0xa2, 0xde, 0x17, 0x6a, 0xd7, 0x3d, 0x3a, 0x19, 0xa6, 0xb9, 0xd5, 0x5c, 0x36, 0xf3,
	0x59, 0xfa, 0x7f, 0x11, 0x92, 0x33, 0xf2, 0x0e, 0x5e, 0xf8, 0x89, 0x7f, 0x7a, 0x67, 0xc8, 0x75,
	0xfa, 0x54, 0x11, 0xe7, 0x93, 0x34, 0x0f, 0x3c, 0x43, 0xd3, 0x0a, 0x9b, 0x9c, 0xbd, 0x8f, 0xbf,
	0x0e, 0xd3, 0xb7, 0xbe, 0xbd, 0xe5, 0x85, 0xff, 0xdc, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x19,
	0x1d, 0x50, 0x42, 0xeb, 0x02, 0x00, 0x00,
}

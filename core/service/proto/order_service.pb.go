// Code generated by protoc-gen-go. DO NOT EDIT.
// source: order_service.proto

package proto // import "."

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// * 订单状态
type EOrderState int32

const (
	EOrderState__3 EOrderState = 0
	// * 等待支付
	EOrderState_StatAwaitingPayment EOrderState = 1
	// * 等待确认
	EOrderState_StatAwaitingConfirm EOrderState = 2
	// * 等待备货
	EOrderState_StatAwaitingPickup EOrderState = 3
	// * 等待发货
	EOrderState_StatAwaitingShipment EOrderState = 4
	// * 系统取消
	EOrderState_StatCancelled EOrderState = 11
	// * 买家申请取消,等待卖家确认
	EOrderState_StatAwaitingCancel EOrderState = 12
	// * 卖家谢绝订单,由于无货等原因
	EOrderState_StatDeclined EOrderState = 13
	// * 已退款,完成取消
	EOrderState_StatRefunded EOrderState = 14
	// * 部分发货(将订单商品分多个包裹发货)
	EOrderState_PartiallyShipped EOrderState = 5
	// * 完成发货
	EOrderState_StatShipped EOrderState = 6
	// * 订单已拆分
	EOrderState_StatBreak EOrderState = 7
	// * 订单完成
	EOrderState_StatCompleted EOrderState = 8
	// * 已退货
	EOrderState_StatGoodsRefunded EOrderState = 15
)

var EOrderState_name = map[int32]string{
	0:  "_3",
	1:  "StatAwaitingPayment",
	2:  "StatAwaitingConfirm",
	3:  "StatAwaitingPickup",
	4:  "StatAwaitingShipment",
	11: "StatCancelled",
	12: "StatAwaitingCancel",
	13: "StatDeclined",
	14: "StatRefunded",
	5:  "PartiallyShipped",
	6:  "StatShipped",
	7:  "StatBreak",
	8:  "StatCompleted",
	15: "StatGoodsRefunded",
}
var EOrderState_value = map[string]int32{
	"_3":                   0,
	"StatAwaitingPayment":  1,
	"StatAwaitingConfirm":  2,
	"StatAwaitingPickup":   3,
	"StatAwaitingShipment": 4,
	"StatCancelled":        11,
	"StatAwaitingCancel":   12,
	"StatDeclined":         13,
	"StatRefunded":         14,
	"PartiallyShipped":     5,
	"StatShipped":          6,
	"StatBreak":            7,
	"StatCompleted":        8,
	"StatGoodsRefunded":    15,
}

func (x EOrderState) String() string {
	return proto.EnumName(EOrderState_name, int32(x))
}
func (EOrderState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_order_service_0c84ef1103135340, []int{0}
}

type WsCartRequest struct {
	MemberId             int64             `protobuf:"zigzag64,1,opt,name=memberId,proto3" json:"memberId,omitempty"`
	Action               string            `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Data                 map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WsCartRequest) Reset()         { *m = WsCartRequest{} }
func (m *WsCartRequest) String() string { return proto.CompactTextString(m) }
func (*WsCartRequest) ProtoMessage()    {}
func (*WsCartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_service_0c84ef1103135340, []int{0}
}
func (m *WsCartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WsCartRequest.Unmarshal(m, b)
}
func (m *WsCartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WsCartRequest.Marshal(b, m, deterministic)
}
func (dst *WsCartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WsCartRequest.Merge(dst, src)
}
func (m *WsCartRequest) XXX_Size() int {
	return xxx_messageInfo_WsCartRequest.Size(m)
}
func (m *WsCartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WsCartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WsCartRequest proto.InternalMessageInfo

func (m *WsCartRequest) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *WsCartRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *WsCartRequest) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type NormalCartRequest struct {
	MemberId             int64             `protobuf:"zigzag64,1,opt,name=memberId,proto3" json:"memberId,omitempty"`
	Action               string            `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Data                 map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NormalCartRequest) Reset()         { *m = NormalCartRequest{} }
func (m *NormalCartRequest) String() string { return proto.CompactTextString(m) }
func (*NormalCartRequest) ProtoMessage()    {}
func (*NormalCartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_service_0c84ef1103135340, []int{1}
}
func (m *NormalCartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NormalCartRequest.Unmarshal(m, b)
}
func (m *NormalCartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NormalCartRequest.Marshal(b, m, deterministic)
}
func (dst *NormalCartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NormalCartRequest.Merge(dst, src)
}
func (m *NormalCartRequest) XXX_Size() int {
	return xxx_messageInfo_NormalCartRequest.Size(m)
}
func (m *NormalCartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NormalCartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NormalCartRequest proto.InternalMessageInfo

func (m *NormalCartRequest) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *NormalCartRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *NormalCartRequest) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type SubmitOrderRequest struct {
	BuyerId              int64             `protobuf:"zigzag64,1,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	CartType             int32             `protobuf:"zigzag32,2,opt,name=cartType,proto3" json:"cartType,omitempty"`
	Data                 map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SubmitOrderRequest) Reset()         { *m = SubmitOrderRequest{} }
func (m *SubmitOrderRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitOrderRequest) ProtoMessage()    {}
func (*SubmitOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_service_0c84ef1103135340, []int{2}
}
func (m *SubmitOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitOrderRequest.Unmarshal(m, b)
}
func (m *SubmitOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitOrderRequest.Marshal(b, m, deterministic)
}
func (dst *SubmitOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitOrderRequest.Merge(dst, src)
}
func (m *SubmitOrderRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitOrderRequest.Size(m)
}
func (m *SubmitOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitOrderRequest proto.InternalMessageInfo

func (m *SubmitOrderRequest) GetBuyerId() int64 {
	if m != nil {
		return m.BuyerId
	}
	return 0
}

func (m *SubmitOrderRequest) GetCartType() int32 {
	if m != nil {
		return m.CartType
	}
	return 0
}

func (m *SubmitOrderRequest) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetOrderRequest struct {
	OrderNo              string   `protobuf:"bytes,1,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	SubOrder             bool     `protobuf:"varint,2,opt,name=sub_order,json=subOrder,proto3" json:"sub_order,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOrderRequest) Reset()         { *m = GetOrderRequest{} }
func (m *GetOrderRequest) String() string { return proto.CompactTextString(m) }
func (*GetOrderRequest) ProtoMessage()    {}
func (*GetOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_service_0c84ef1103135340, []int{3}
}
func (m *GetOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOrderRequest.Unmarshal(m, b)
}
func (m *GetOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOrderRequest.Marshal(b, m, deterministic)
}
func (dst *GetOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrderRequest.Merge(dst, src)
}
func (m *GetOrderRequest) XXX_Size() int {
	return xxx_messageInfo_GetOrderRequest.Size(m)
}
func (m *GetOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrderRequest proto.InternalMessageInfo

func (m *GetOrderRequest) GetOrderNo() string {
	if m != nil {
		return m.OrderNo
	}
	return ""
}

func (m *GetOrderRequest) GetSubOrder() bool {
	if m != nil {
		return m.SubOrder
	}
	return false
}

type GetOrderItemsRequest struct {
	OrderNo              string   `protobuf:"bytes,1,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	SubOrder             bool     `protobuf:"varint,2,opt,name=sub_order,json=subOrder,proto3" json:"sub_order,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOrderItemsRequest) Reset()         { *m = GetOrderItemsRequest{} }
func (m *GetOrderItemsRequest) String() string { return proto.CompactTextString(m) }
func (*GetOrderItemsRequest) ProtoMessage()    {}
func (*GetOrderItemsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_service_0c84ef1103135340, []int{4}
}
func (m *GetOrderItemsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOrderItemsRequest.Unmarshal(m, b)
}
func (m *GetOrderItemsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOrderItemsRequest.Marshal(b, m, deterministic)
}
func (dst *GetOrderItemsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrderItemsRequest.Merge(dst, src)
}
func (m *GetOrderItemsRequest) XXX_Size() int {
	return xxx_messageInfo_GetOrderItemsRequest.Size(m)
}
func (m *GetOrderItemsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrderItemsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrderItemsRequest proto.InternalMessageInfo

func (m *GetOrderItemsRequest) GetOrderNo() string {
	if m != nil {
		return m.OrderNo
	}
	return ""
}

func (m *GetOrderItemsRequest) GetSubOrder() bool {
	if m != nil {
		return m.SubOrder
	}
	return false
}

type TradeOrderSubmitRequest struct {
	Order                *SComplexOrder `protobuf:"bytes,1,opt,name=Order,proto3" json:"Order,omitempty"`
	Rate                 float64        `protobuf:"fixed64,2,opt,name=Rate,proto3" json:"Rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TradeOrderSubmitRequest) Reset()         { *m = TradeOrderSubmitRequest{} }
func (m *TradeOrderSubmitRequest) String() string { return proto.CompactTextString(m) }
func (*TradeOrderSubmitRequest) ProtoMessage()    {}
func (*TradeOrderSubmitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_service_0c84ef1103135340, []int{5}
}
func (m *TradeOrderSubmitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeOrderSubmitRequest.Unmarshal(m, b)
}
func (m *TradeOrderSubmitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeOrderSubmitRequest.Marshal(b, m, deterministic)
}
func (dst *TradeOrderSubmitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeOrderSubmitRequest.Merge(dst, src)
}
func (m *TradeOrderSubmitRequest) XXX_Size() int {
	return xxx_messageInfo_TradeOrderSubmitRequest.Size(m)
}
func (m *TradeOrderSubmitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeOrderSubmitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradeOrderSubmitRequest proto.InternalMessageInfo

func (m *TradeOrderSubmitRequest) GetOrder() *SComplexOrder {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *TradeOrderSubmitRequest) GetRate() float64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

type TradeOrderTicketRequest struct {
	OrderId              int64    `protobuf:"zigzag64,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Img                  string   `protobuf:"bytes,2,opt,name=img,proto3" json:"img,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradeOrderTicketRequest) Reset()         { *m = TradeOrderTicketRequest{} }
func (m *TradeOrderTicketRequest) String() string { return proto.CompactTextString(m) }
func (*TradeOrderTicketRequest) ProtoMessage()    {}
func (*TradeOrderTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_service_0c84ef1103135340, []int{6}
}
func (m *TradeOrderTicketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeOrderTicketRequest.Unmarshal(m, b)
}
func (m *TradeOrderTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeOrderTicketRequest.Marshal(b, m, deterministic)
}
func (dst *TradeOrderTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeOrderTicketRequest.Merge(dst, src)
}
func (m *TradeOrderTicketRequest) XXX_Size() int {
	return xxx_messageInfo_TradeOrderTicketRequest.Size(m)
}
func (m *TradeOrderTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeOrderTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradeOrderTicketRequest proto.InternalMessageInfo

func (m *TradeOrderTicketRequest) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *TradeOrderTicketRequest) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

type ComplexItemsResponse struct {
	Value                []*SComplexItem `protobuf:"bytes,1,rep,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ComplexItemsResponse) Reset()         { *m = ComplexItemsResponse{} }
func (m *ComplexItemsResponse) String() string { return proto.CompactTextString(m) }
func (*ComplexItemsResponse) ProtoMessage()    {}
func (*ComplexItemsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_service_0c84ef1103135340, []int{7}
}
func (m *ComplexItemsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComplexItemsResponse.Unmarshal(m, b)
}
func (m *ComplexItemsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComplexItemsResponse.Marshal(b, m, deterministic)
}
func (dst *ComplexItemsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplexItemsResponse.Merge(dst, src)
}
func (m *ComplexItemsResponse) XXX_Size() int {
	return xxx_messageInfo_ComplexItemsResponse.Size(m)
}
func (m *ComplexItemsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplexItemsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ComplexItemsResponse proto.InternalMessageInfo

func (m *ComplexItemsResponse) GetValue() []*SComplexItem {
	if m != nil {
		return m.Value
	}
	return nil
}

// 订单项
type SComplexItem struct {
	ID                   int64             `protobuf:"zigzag64,1,opt,name=ID,proto3" json:"ID,omitempty"`
	OrderId              int64             `protobuf:"zigzag64,2,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
	ItemId               int64             `protobuf:"zigzag64,3,opt,name=ItemId,proto3" json:"ItemId,omitempty"`
	SkuId                int64             `protobuf:"zigzag64,4,opt,name=SkuId,proto3" json:"SkuId,omitempty"`
	SnapshotId           int64             `protobuf:"zigzag64,5,opt,name=SnapshotId,proto3" json:"SnapshotId,omitempty"`
	Quantity             int32             `protobuf:"zigzag32,6,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	ReturnQuantity       int32             `protobuf:"zigzag32,7,opt,name=ReturnQuantity,proto3" json:"ReturnQuantity,omitempty"`
	Amount               float64           `protobuf:"fixed64,8,opt,name=Amount,proto3" json:"Amount,omitempty"`
	FinalAmount          float64           `protobuf:"fixed64,9,opt,name=FinalAmount,proto3" json:"FinalAmount,omitempty"`
	IsShipped            int32             `protobuf:"zigzag32,10,opt,name=IsShipped,proto3" json:"IsShipped,omitempty"`
	Data                 map[string]string `protobuf:"bytes,11,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SComplexItem) Reset()         { *m = SComplexItem{} }
func (m *SComplexItem) String() string { return proto.CompactTextString(m) }
func (*SComplexItem) ProtoMessage()    {}
func (*SComplexItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_service_0c84ef1103135340, []int{8}
}
func (m *SComplexItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SComplexItem.Unmarshal(m, b)
}
func (m *SComplexItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SComplexItem.Marshal(b, m, deterministic)
}
func (dst *SComplexItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SComplexItem.Merge(dst, src)
}
func (m *SComplexItem) XXX_Size() int {
	return xxx_messageInfo_SComplexItem.Size(m)
}
func (m *SComplexItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SComplexItem.DiscardUnknown(m)
}

var xxx_messageInfo_SComplexItem proto.InternalMessageInfo

func (m *SComplexItem) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SComplexItem) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *SComplexItem) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *SComplexItem) GetSkuId() int64 {
	if m != nil {
		return m.SkuId
	}
	return 0
}

func (m *SComplexItem) GetSnapshotId() int64 {
	if m != nil {
		return m.SnapshotId
	}
	return 0
}

func (m *SComplexItem) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *SComplexItem) GetReturnQuantity() int32 {
	if m != nil {
		return m.ReturnQuantity
	}
	return 0
}

func (m *SComplexItem) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *SComplexItem) GetFinalAmount() float64 {
	if m != nil {
		return m.FinalAmount
	}
	return 0
}

func (m *SComplexItem) GetIsShipped() int32 {
	if m != nil {
		return m.IsShipped
	}
	return 0
}

func (m *SComplexItem) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

// 子订单
type SComplexOrder struct {
	OrderId         int64           `protobuf:"zigzag64,1,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
	SubOrderId      int64           `protobuf:"zigzag64,2,opt,name=SubOrderId,proto3" json:"SubOrderId,omitempty"`
	OrderType       int32           `protobuf:"zigzag32,3,opt,name=OrderType,proto3" json:"OrderType,omitempty"`
	OrderNo         string          `protobuf:"bytes,4,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	BuyerId         int64           `protobuf:"zigzag64,5,opt,name=BuyerId,proto3" json:"BuyerId,omitempty"`
	VendorId        int32           `protobuf:"zigzag32,6,opt,name=VendorId,proto3" json:"VendorId,omitempty"`
	ShopId          int32           `protobuf:"zigzag32,7,opt,name=ShopId,proto3" json:"ShopId,omitempty"`
	Subject         string          `protobuf:"bytes,8,opt,name=Subject,proto3" json:"Subject,omitempty"`
	ItemAmount      float64         `protobuf:"fixed64,9,opt,name=ItemAmount,proto3" json:"ItemAmount,omitempty"`
	DiscountAmount  float64         `protobuf:"fixed64,10,opt,name=DiscountAmount,proto3" json:"DiscountAmount,omitempty"`
	ExpressFee      float64         `protobuf:"fixed64,11,opt,name=ExpressFee,proto3" json:"ExpressFee,omitempty"`
	PackageFee      float64         `protobuf:"fixed64,12,opt,name=PackageFee,proto3" json:"PackageFee,omitempty"`
	FinalAmount     float64         `protobuf:"fixed64,13,opt,name=FinalAmount,proto3" json:"FinalAmount,omitempty"`
	ConsigneePerson string          `protobuf:"bytes,14,opt,name=ConsigneePerson,proto3" json:"ConsigneePerson,omitempty"`
	ConsigneePhone  string          `protobuf:"bytes,15,opt,name=ConsigneePhone,proto3" json:"ConsigneePhone,omitempty"`
	ShippingAddress string          `protobuf:"bytes,16,opt,name=ShippingAddress,proto3" json:"ShippingAddress,omitempty"`
	BuyerComment    string          `protobuf:"bytes,17,opt,name=BuyerComment,proto3" json:"BuyerComment,omitempty"`
	IsBreak         int32           `protobuf:"zigzag32,18,opt,name=IsBreak,proto3" json:"IsBreak,omitempty"`
	State           int32           `protobuf:"zigzag32,19,opt,name=State,proto3" json:"State,omitempty"`
	CreateTime      int64           `protobuf:"zigzag64,20,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdateTime      int64           `protobuf:"zigzag64,21,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	Items           []*SComplexItem `protobuf:"bytes,22,rep,name=Items,proto3" json:"Items,omitempty"`
	// 扩展信息
	Data map[string]string `protobuf:"bytes,23,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 是否为子订单
	SubOrder             bool     `protobuf:"varint,24,opt,name=SubOrder,proto3" json:"SubOrder,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SComplexOrder) Reset()         { *m = SComplexOrder{} }
func (m *SComplexOrder) String() string { return proto.CompactTextString(m) }
func (*SComplexOrder) ProtoMessage()    {}
func (*SComplexOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_service_0c84ef1103135340, []int{9}
}
func (m *SComplexOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SComplexOrder.Unmarshal(m, b)
}
func (m *SComplexOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SComplexOrder.Marshal(b, m, deterministic)
}
func (dst *SComplexOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SComplexOrder.Merge(dst, src)
}
func (m *SComplexOrder) XXX_Size() int {
	return xxx_messageInfo_SComplexOrder.Size(m)
}
func (m *SComplexOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SComplexOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SComplexOrder proto.InternalMessageInfo

func (m *SComplexOrder) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *SComplexOrder) GetSubOrderId() int64 {
	if m != nil {
		return m.SubOrderId
	}
	return 0
}

func (m *SComplexOrder) GetOrderType() int32 {
	if m != nil {
		return m.OrderType
	}
	return 0
}

func (m *SComplexOrder) GetOrderNo() string {
	if m != nil {
		return m.OrderNo
	}
	return ""
}

func (m *SComplexOrder) GetBuyerId() int64 {
	if m != nil {
		return m.BuyerId
	}
	return 0
}

func (m *SComplexOrder) GetVendorId() int32 {
	if m != nil {
		return m.VendorId
	}
	return 0
}

func (m *SComplexOrder) GetShopId() int32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *SComplexOrder) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *SComplexOrder) GetItemAmount() float64 {
	if m != nil {
		return m.ItemAmount
	}
	return 0
}

func (m *SComplexOrder) GetDiscountAmount() float64 {
	if m != nil {
		return m.DiscountAmount
	}
	return 0
}

func (m *SComplexOrder) GetExpressFee() float64 {
	if m != nil {
		return m.ExpressFee
	}
	return 0
}

func (m *SComplexOrder) GetPackageFee() float64 {
	if m != nil {
		return m.PackageFee
	}
	return 0
}

func (m *SComplexOrder) GetFinalAmount() float64 {
	if m != nil {
		return m.FinalAmount
	}
	return 0
}

func (m *SComplexOrder) GetConsigneePerson() string {
	if m != nil {
		return m.ConsigneePerson
	}
	return ""
}

func (m *SComplexOrder) GetConsigneePhone() string {
	if m != nil {
		return m.ConsigneePhone
	}
	return ""
}

func (m *SComplexOrder) GetShippingAddress() string {
	if m != nil {
		return m.ShippingAddress
	}
	return ""
}

func (m *SComplexOrder) GetBuyerComment() string {
	if m != nil {
		return m.BuyerComment
	}
	return ""
}

func (m *SComplexOrder) GetIsBreak() int32 {
	if m != nil {
		return m.IsBreak
	}
	return 0
}

func (m *SComplexOrder) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SComplexOrder) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *SComplexOrder) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *SComplexOrder) GetItems() []*SComplexItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *SComplexOrder) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SComplexOrder) GetSubOrder() bool {
	if m != nil {
		return m.SubOrder
	}
	return false
}

func init() {
	proto.RegisterType((*WsCartRequest)(nil), "WsCartRequest")
	proto.RegisterMapType((map[string]string)(nil), "WsCartRequest.DataEntry")
	proto.RegisterType((*NormalCartRequest)(nil), "NormalCartRequest")
	proto.RegisterMapType((map[string]string)(nil), "NormalCartRequest.DataEntry")
	proto.RegisterType((*SubmitOrderRequest)(nil), "SubmitOrderRequest")
	proto.RegisterMapType((map[string]string)(nil), "SubmitOrderRequest.DataEntry")
	proto.RegisterType((*GetOrderRequest)(nil), "GetOrderRequest")
	proto.RegisterType((*GetOrderItemsRequest)(nil), "GetOrderItemsRequest")
	proto.RegisterType((*TradeOrderSubmitRequest)(nil), "TradeOrderSubmitRequest")
	proto.RegisterType((*TradeOrderTicketRequest)(nil), "TradeOrderTicketRequest")
	proto.RegisterType((*ComplexItemsResponse)(nil), "ComplexItemsResponse")
	proto.RegisterType((*SComplexItem)(nil), "SComplexItem")
	proto.RegisterMapType((map[string]string)(nil), "SComplexItem.DataEntry")
	proto.RegisterType((*SComplexOrder)(nil), "SComplexOrder")
	proto.RegisterMapType((map[string]string)(nil), "SComplexOrder.DataEntry")
	proto.RegisterEnum("EOrderState", EOrderState_name, EOrderState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderServiceClient interface {
	// 批发购物车接口
	WholesaleCartV1(ctx context.Context, in *WsCartRequest, opts ...grpc.CallOption) (*Result, error)
	// 普通购物车接口
	NormalCartV1(ctx context.Context, in *NormalCartRequest, opts ...grpc.CallOption) (*Result, error)
	// 提交订单
	SubmitOrderV1(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*StringMap, error)
	// 获取订单信息
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*SComplexOrder, error)
	// 获取订单和商品项信息
	GetOrderAndItems(ctx context.Context, in *GetOrderItemsRequest, opts ...grpc.CallOption) (*SComplexOrder, error)
	// 获取子订单,orderId
	GetSubOrder(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SComplexOrder, error)
	// 根据订单号获取子订单,orderNo
	GetSubOrderByNo(ctx context.Context, in *String, opts ...grpc.CallOption) (*SComplexOrder, error)
	// 获取订单商品项,subOrderId
	GetSubOrderItems(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*ComplexItemsResponse, error)
	// 提交交易订单
	SubmitTradeOrder(ctx context.Context, in *TradeOrderSubmitRequest, opts ...grpc.CallOption) (*Result, error)
	// 交易单现金支付,orderId
	TradeOrderCashPay(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
	// 上传交易单发票
	TradeOrderUpdateTicket(ctx context.Context, in *TradeOrderTicketRequest, opts ...grpc.CallOption) (*Result, error)
}

type orderServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrderServiceClient(cc *grpc.ClientConn) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) WholesaleCartV1(ctx context.Context, in *WsCartRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/OrderService/WholesaleCartV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) NormalCartV1(ctx context.Context, in *NormalCartRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/OrderService/NormalCartV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) SubmitOrderV1(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*StringMap, error) {
	out := new(StringMap)
	err := c.cc.Invoke(ctx, "/OrderService/SubmitOrderV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*SComplexOrder, error) {
	out := new(SComplexOrder)
	err := c.cc.Invoke(ctx, "/OrderService/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderAndItems(ctx context.Context, in *GetOrderItemsRequest, opts ...grpc.CallOption) (*SComplexOrder, error) {
	out := new(SComplexOrder)
	err := c.cc.Invoke(ctx, "/OrderService/GetOrderAndItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetSubOrder(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SComplexOrder, error) {
	out := new(SComplexOrder)
	err := c.cc.Invoke(ctx, "/OrderService/GetSubOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetSubOrderByNo(ctx context.Context, in *String, opts ...grpc.CallOption) (*SComplexOrder, error) {
	out := new(SComplexOrder)
	err := c.cc.Invoke(ctx, "/OrderService/GetSubOrderByNo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetSubOrderItems(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*ComplexItemsResponse, error) {
	out := new(ComplexItemsResponse)
	err := c.cc.Invoke(ctx, "/OrderService/GetSubOrderItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) SubmitTradeOrder(ctx context.Context, in *TradeOrderSubmitRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/OrderService/SubmitTradeOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) TradeOrderCashPay(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/OrderService/TradeOrderCashPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) TradeOrderUpdateTicket(ctx context.Context, in *TradeOrderTicketRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/OrderService/TradeOrderUpdateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
type OrderServiceServer interface {
	// 批发购物车接口
	WholesaleCartV1(context.Context, *WsCartRequest) (*Result, error)
	// 普通购物车接口
	NormalCartV1(context.Context, *NormalCartRequest) (*Result, error)
	// 提交订单
	SubmitOrderV1(context.Context, *SubmitOrderRequest) (*StringMap, error)
	// 获取订单信息
	GetOrder(context.Context, *GetOrderRequest) (*SComplexOrder, error)
	// 获取订单和商品项信息
	GetOrderAndItems(context.Context, *GetOrderItemsRequest) (*SComplexOrder, error)
	// 获取子订单,orderId
	GetSubOrder(context.Context, *Int64) (*SComplexOrder, error)
	// 根据订单号获取子订单,orderNo
	GetSubOrderByNo(context.Context, *String) (*SComplexOrder, error)
	// 获取订单商品项,subOrderId
	GetSubOrderItems(context.Context, *Int64) (*ComplexItemsResponse, error)
	// 提交交易订单
	SubmitTradeOrder(context.Context, *TradeOrderSubmitRequest) (*Result, error)
	// 交易单现金支付,orderId
	TradeOrderCashPay(context.Context, *Int64) (*Result, error)
	// 上传交易单发票
	TradeOrderUpdateTicket(context.Context, *TradeOrderTicketRequest) (*Result, error)
}

func RegisterOrderServiceServer(s *grpc.Server, srv OrderServiceServer) {
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

func _OrderService_WholesaleCartV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WsCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).WholesaleCartV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/WholesaleCartV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).WholesaleCartV1(ctx, req.(*WsCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_NormalCartV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NormalCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).NormalCartV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/NormalCartV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).NormalCartV1(ctx, req.(*NormalCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_SubmitOrderV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).SubmitOrderV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/SubmitOrderV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).SubmitOrderV1(ctx, req.(*SubmitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderAndItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderAndItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/GetOrderAndItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderAndItems(ctx, req.(*GetOrderItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetSubOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetSubOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/GetSubOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetSubOrder(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetSubOrderByNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetSubOrderByNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/GetSubOrderByNo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetSubOrderByNo(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetSubOrderItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetSubOrderItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/GetSubOrderItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetSubOrderItems(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_SubmitTradeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeOrderSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).SubmitTradeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/SubmitTradeOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).SubmitTradeOrder(ctx, req.(*TradeOrderSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_TradeOrderCashPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).TradeOrderCashPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/TradeOrderCashPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).TradeOrderCashPay(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_TradeOrderUpdateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeOrderTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).TradeOrderUpdateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/TradeOrderUpdateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).TradeOrderUpdateTicket(ctx, req.(*TradeOrderTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WholesaleCartV1",
			Handler:    _OrderService_WholesaleCartV1_Handler,
		},
		{
			MethodName: "NormalCartV1",
			Handler:    _OrderService_NormalCartV1_Handler,
		},
		{
			MethodName: "SubmitOrderV1",
			Handler:    _OrderService_SubmitOrderV1_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _OrderService_GetOrder_Handler,
		},
		{
			MethodName: "GetOrderAndItems",
			Handler:    _OrderService_GetOrderAndItems_Handler,
		},
		{
			MethodName: "GetSubOrder",
			Handler:    _OrderService_GetSubOrder_Handler,
		},
		{
			MethodName: "GetSubOrderByNo",
			Handler:    _OrderService_GetSubOrderByNo_Handler,
		},
		{
			MethodName: "GetSubOrderItems",
			Handler:    _OrderService_GetSubOrderItems_Handler,
		},
		{
			MethodName: "SubmitTradeOrder",
			Handler:    _OrderService_SubmitTradeOrder_Handler,
		},
		{
			MethodName: "TradeOrderCashPay",
			Handler:    _OrderService_TradeOrderCashPay_Handler,
		},
		{
			MethodName: "TradeOrderUpdateTicket",
			Handler:    _OrderService_TradeOrderUpdateTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_service.proto",
}

func init() { proto.RegisterFile("order_service.proto", fileDescriptor_order_service_0c84ef1103135340) }

var fileDescriptor_order_service_0c84ef1103135340 = []byte{
	// 1203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdf, 0x72, 0xdb, 0xc4,
	0x17, 0x8e, 0xed, 0xc4, 0x7f, 0x8e, 0xed, 0x44, 0xd9, 0x38, 0xc9, 0xfe, 0xfc, 0x2b, 0x4c, 0xc6,
	0x30, 0x25, 0x03, 0x45, 0x43, 0x52, 0x86, 0x32, 0x74, 0xb8, 0x48, 0xec, 0xb4, 0xa3, 0x0b, 0xd2,
	0x20, 0x87, 0x74, 0x86, 0x9b, 0xce, 0xda, 0xda, 0xda, 0xc2, 0xd2, 0x4a, 0x48, 0xab, 0x52, 0xbf,
	0x01, 0x8f, 0xc2, 0x70, 0xc9, 0x05, 0xc3, 0x3b, 0xf0, 0x52, 0xcc, 0xd9, 0x95, 0x64, 0xc9, 0x31,
	0x37, 0xb4, 0x57, 0xf6, 0xf7, 0x9d, 0xa3, 0x6f, 0xcf, 0x9e, 0x73, 0x76, 0xf7, 0xc0, 0x41, 0x10,
	0x39, 0x3c, 0x7a, 0x15, 0xf3, 0xe8, 0x8d, 0x3b, 0xe5, 0x66, 0x18, 0x05, 0x32, 0xe8, 0xb7, 0xa5,
	0x5c, 0x86, 0x29, 0x18, 0xfc, 0x5e, 0x81, 0xee, 0xcb, 0x78, 0xc8, 0x22, 0x69, 0xf3, 0x9f, 0x13,
	0x1e, 0x4b, 0xd2, 0x87, 0xa6, 0xcf, 0xfd, 0x09, 0x8f, 0x2c, 0x87, 0x56, 0x4e, 0x2a, 0xa7, 0xc4,
	0xce, 0x31, 0x39, 0x82, 0x3a, 0x9b, 0x4a, 0x37, 0x10, 0xb4, 0x7a, 0x52, 0x39, 0x6d, 0xd9, 0x29,
	0x22, 0x8f, 0x60, 0xdb, 0x61, 0x92, 0xd1, 0xda, 0x49, 0xed, 0xb4, 0x7d, 0x4e, 0xcd, 0x92, 0xa2,
	0x39, 0x62, 0x92, 0x5d, 0x09, 0x19, 0x2d, 0x6d, 0xe5, 0xd5, 0x7f, 0x02, 0xad, 0x9c, 0x22, 0x06,
	0xd4, 0x16, 0x7c, 0xa9, 0x56, 0x6a, 0xd9, 0xf8, 0x97, 0xf4, 0x60, 0xe7, 0x0d, 0xf3, 0x12, 0x9e,
	0xae, 0xa1, 0xc1, 0x37, 0xd5, 0xaf, 0x2b, 0x83, 0x3f, 0x2a, 0xb0, 0x7f, 0x1d, 0x44, 0x3e, 0xf3,
	0xde, 0x35, 0xe0, 0x2f, 0x4a, 0x01, 0x3f, 0x30, 0xef, 0xa9, 0xbe, 0xbf, 0xa0, 0xff, 0xac, 0x00,
	0x19, 0x27, 0x13, 0xdf, 0x95, 0x2f, 0xb0, 0x18, 0x59, 0xd4, 0x14, 0x1a, 0x93, 0x64, 0x59, 0x08,
	0x3a, 0x83, 0xb8, 0x9f, 0x29, 0x8b, 0xe4, 0xed, 0x32, 0xd4, 0x6a, 0xfb, 0x76, 0x8e, 0xc9, 0x59,
	0x29, 0xee, 0x0f, 0xcc, 0xfb, 0xc2, 0xef, 0x2f, 0x70, 0x0b, 0xf6, 0x9e, 0xf3, 0x72, 0xd0, 0xff,
	0x83, 0xa6, 0xee, 0x28, 0x11, 0xa4, 0x1a, 0x0d, 0x85, 0xaf, 0x03, 0xf2, 0x7f, 0x68, 0xc5, 0xc9,
	0xe4, 0x95, 0x82, 0x4a, 0xab, 0x69, 0x37, 0xe3, 0x64, 0xa2, 0x3e, 0x1f, 0x5c, 0x43, 0x2f, 0x93,
	0xb2, 0x24, 0xf7, 0xe3, 0x77, 0xd5, 0x1b, 0xc3, 0xf1, 0x6d, 0xc4, 0x1c, 0xae, 0x90, 0xce, 0x41,
	0x26, 0xf9, 0x31, 0xec, 0x28, 0x56, 0xe9, 0xb5, 0xcf, 0x77, 0xcd, 0xf1, 0x30, 0xf0, 0x43, 0x8f,
	0xbf, 0xd5, 0x1b, 0xd1, 0x46, 0x42, 0x60, 0xdb, 0x66, 0x52, 0x6f, 0xba, 0x62, 0xab, 0xff, 0x83,
	0xab, 0xa2, 0xe8, 0xad, 0x3b, 0x5d, 0x70, 0x59, 0x28, 0x96, 0x0a, 0x64, 0x55, 0xac, 0x14, 0x62,
	0x42, 0x5d, 0x7f, 0x96, 0x26, 0x0f, 0xff, 0x0e, 0x9e, 0x42, 0x2f, 0x5d, 0x31, 0xdd, 0x6a, 0x1c,
	0x06, 0x22, 0xe6, 0xe4, 0x23, 0xd8, 0xb9, 0x53, 0x89, 0xae, 0xa8, 0xda, 0x75, 0xf3, 0xc0, 0xd0,
	0xcd, 0xd6, 0xb6, 0xc1, 0xaf, 0x35, 0xe8, 0x14, 0x79, 0xb2, 0x0b, 0x55, 0x6b, 0x94, 0x2e, 0x5a,
	0xb5, 0x46, 0x18, 0xc9, 0x8b, 0x34, 0x92, 0xaa, 0x8e, 0x24, 0x85, 0xd8, 0xea, 0xf8, 0x85, 0xe5,
	0xd0, 0x9a, 0x32, 0xa4, 0x08, 0x0b, 0x3c, 0x5e, 0x24, 0x96, 0x43, 0xb7, 0x15, 0xad, 0x01, 0xf9,
	0x10, 0x60, 0x2c, 0x58, 0x18, 0xcf, 0x03, 0x69, 0x39, 0x74, 0x47, 0x99, 0x0a, 0x0c, 0x36, 0xe1,
	0xf7, 0x09, 0x13, 0xd2, 0x95, 0x4b, 0x5a, 0xd7, 0x4d, 0x98, 0x61, 0xf2, 0x10, 0x76, 0x6d, 0x2e,
	0x93, 0x48, 0xe4, 0x1e, 0x0d, 0xe5, 0xb1, 0xc6, 0x62, 0x44, 0x17, 0x7e, 0x90, 0x08, 0x49, 0x9b,
	0x2a, 0xcd, 0x29, 0x22, 0x27, 0xd0, 0x7e, 0xe6, 0x0a, 0xe6, 0xa5, 0xc6, 0x96, 0x32, 0x16, 0x29,
	0xf2, 0x00, 0x5a, 0x56, 0x3c, 0x9e, 0xbb, 0x61, 0xc8, 0x1d, 0x0a, 0x4a, 0x7c, 0x45, 0x90, 0xcf,
	0x60, 0x1b, 0x3b, 0x9a, 0xb6, 0x55, 0x22, 0x8f, 0x4b, 0x89, 0x2c, 0xb6, 0xff, 0xe8, 0x9d, 0xda,
	0xff, 0xef, 0x3a, 0x74, 0x4b, 0xbd, 0x53, 0xcc, 0x7d, 0xa5, 0x9c, 0x7b, 0xcc, 0x66, 0xda, 0x9b,
	0x79, 0x61, 0x0a, 0x0c, 0xee, 0x47, 0x77, 0x15, 0x9e, 0xe9, 0x9a, 0xde, 0x4f, 0x4e, 0xe4, 0xba,
	0xd7, 0x81, 0xaa, 0x51, 0xcb, 0xce, 0x20, 0x5a, 0x2e, 0xd3, 0x4b, 0x42, 0x97, 0x28, 0x83, 0x58,
	0x9f, 0x3b, 0x2e, 0x9c, 0x00, 0x4d, 0x69, 0x7d, 0x32, 0x8c, 0x79, 0x1f, 0xcf, 0x83, 0xd0, 0x72,
	0xd2, 0xba, 0xa4, 0x08, 0xd5, 0xc6, 0xc9, 0xe4, 0x27, 0x3e, 0xd5, 0x05, 0x69, 0xd9, 0x19, 0xc4,
	0xf8, 0x31, 0x79, 0xa5, 0x82, 0x14, 0x18, 0xac, 0xf8, 0xc8, 0x8d, 0xa7, 0xf8, 0x3f, 0xf5, 0x01,
	0xe5, 0xb3, 0xc6, 0xa2, 0xce, 0xd5, 0xdb, 0x30, 0xe2, 0x71, 0xfc, 0x8c, 0x73, 0xda, 0xd6, 0x3a,
	0x2b, 0x06, 0xed, 0x37, 0x6c, 0xba, 0x60, 0x33, 0x8e, 0xf6, 0x8e, 0xb6, 0xaf, 0x98, 0xf5, 0xce,
	0xe8, 0xde, 0xef, 0x8c, 0x53, 0xd8, 0x1b, 0x06, 0x22, 0x76, 0x67, 0x82, 0xf3, 0x1b, 0x1e, 0xc5,
	0x81, 0xa0, 0xbb, 0x6a, 0x2f, 0xeb, 0x34, 0xc6, 0xbc, 0xa2, 0xe6, 0x81, 0xe0, 0x74, 0x4f, 0x39,
	0xae, 0xb1, 0xa8, 0xa8, 0x1a, 0xcb, 0x15, 0xb3, 0x0b, 0xc7, 0xc1, 0x48, 0xa9, 0xa1, 0x15, 0xd7,
	0x68, 0x32, 0x80, 0x8e, 0x4a, 0xff, 0x30, 0xf0, 0x7d, 0x2e, 0x24, 0xdd, 0x57, 0x6e, 0x25, 0x0e,
	0x73, 0x6c, 0xc5, 0x97, 0x11, 0x67, 0x0b, 0x4a, 0x54, 0xf2, 0x33, 0xa8, 0xce, 0xa1, 0xc4, 0x3b,
	0xe7, 0x40, 0xf1, 0x1a, 0x60, 0x46, 0x86, 0x11, 0x67, 0x92, 0xdf, 0xba, 0x3e, 0xa7, 0x3d, 0xdd,
	0x39, 0x2b, 0x06, 0xed, 0x3f, 0x84, 0x4e, 0x66, 0x3f, 0xd4, 0xf6, 0x15, 0x83, 0xb7, 0x8a, 0xba,
	0x66, 0xe8, 0xd1, 0xc6, 0x5b, 0x45, 0xd9, 0xf0, 0x79, 0x56, 0x07, 0xe6, 0x38, 0x7d, 0x9e, 0x4b,
	0x6d, 0xbd, 0x7e, 0x62, 0xb0, 0xb5, 0xb2, 0xd6, 0xa5, 0x54, 0x5f, 0xbc, 0x19, 0xfe, 0xcf, 0xa7,
	0xe9, 0xd3, 0xdf, 0xaa, 0xd0, 0xbe, 0xd2, 0xd7, 0xb5, 0xda, 0x77, 0x1d, 0xaa, 0xaf, 0x1e, 0x1b,
	0x5b, 0xe4, 0x18, 0x0e, 0x90, 0xb8, 0xf8, 0x85, 0xb9, 0xd2, 0x15, 0xb3, 0x1b, 0xb6, 0xc4, 0x34,
	0x1a, 0x95, 0x75, 0xc3, 0x30, 0x10, 0xaf, 0xdd, 0xc8, 0x37, 0xaa, 0xe4, 0x08, 0x48, 0xe9, 0x0b,
	0x77, 0xba, 0x48, 0x42, 0xa3, 0x46, 0x28, 0xf4, 0x8a, 0x3c, 0x16, 0x4f, 0x49, 0x6d, 0x93, 0x7d,
	0xe8, 0xa2, 0x65, 0xc8, 0xc4, 0x94, 0x7b, 0x1e, 0x77, 0x8c, 0xf6, 0xba, 0x88, 0x36, 0x19, 0x1d,
	0x62, 0x40, 0x07, 0xf9, 0x11, 0x9f, 0x7a, 0xae, 0xe0, 0x8e, 0xd1, 0xcd, 0x18, 0x9b, 0xbf, 0x4e,
	0x84, 0xc3, 0x1d, 0x63, 0x97, 0xf4, 0xc0, 0xb8, 0x61, 0x91, 0x74, 0x99, 0xe7, 0x2d, 0xd3, 0x2b,
	0xc9, 0xd8, 0x21, 0x7b, 0xd0, 0x46, 0xbf, 0x8c, 0xa8, 0x93, 0x2e, 0xb4, 0x90, 0x50, 0xc5, 0x37,
	0x1a, 0x79, 0x10, 0x2a, 0xf3, 0x92, 0x3b, 0x46, 0x93, 0x1c, 0xc2, 0x3e, 0x52, 0xcf, 0x83, 0xc0,
	0x89, 0x73, 0xfd, 0xbd, 0xf3, 0xbf, 0xb6, 0xa1, 0xa3, 0x33, 0xa5, 0xc7, 0x36, 0xf2, 0x08, 0xf6,
	0x5e, 0xce, 0x03, 0x8f, 0xc7, 0xcc, 0xe3, 0x38, 0xa2, 0xdc, 0x9d, 0x91, 0xdd, 0xf2, 0x88, 0xd5,
	0x6f, 0x98, 0x36, 0x8f, 0x13, 0x4f, 0x0e, 0xb6, 0xc8, 0xe7, 0xd0, 0x59, 0x4d, 0x33, 0x77, 0x67,
	0x84, 0xdc, 0x1f, 0x6e, 0x8a, 0xee, 0xe7, 0xd0, 0x2d, 0x0c, 0x11, 0x77, 0x67, 0xe4, 0x60, 0xc3,
	0x50, 0xd1, 0x07, 0x73, 0x2c, 0x23, 0x57, 0xcc, 0xbe, 0x63, 0xe1, 0x60, 0x8b, 0x98, 0xd0, 0xcc,
	0x9e, 0x73, 0x62, 0x98, 0x6b, 0x43, 0x42, 0x7f, 0xed, 0xc9, 0x1d, 0x6c, 0x91, 0xa7, 0x60, 0x64,
	0x4e, 0x17, 0xc2, 0xd1, 0x3d, 0x79, 0x68, 0x6e, 0x9a, 0x08, 0x36, 0x7c, 0xfc, 0x09, 0xb4, 0x9f,
	0x73, 0x99, 0x75, 0x20, 0xa9, 0x9b, 0x96, 0x90, 0x5f, 0x7d, 0xb9, 0xc1, 0xf1, 0x91, 0x9a, 0x57,
	0x32, 0xc7, 0xcb, 0xe5, 0x75, 0x40, 0x1a, 0x69, 0xd8, 0x1b, 0xbc, 0x1f, 0xab, 0x98, 0xf2, 0x3b,
	0x5a, 0xc5, 0x94, 0x69, 0x1f, 0x9a, 0x9b, 0x5e, 0xf0, 0xc1, 0x16, 0x79, 0x02, 0x86, 0x4e, 0xce,
	0x6a, 0x50, 0x20, 0xd4, 0xfc, 0x97, 0x51, 0xa4, 0x98, 0xe5, 0x87, 0xb0, 0xbf, 0xf2, 0x1a, 0xb2,
	0x78, 0x7e, 0xc3, 0x96, 0xf9, 0x72, 0x05, 0xbf, 0x6f, 0xe1, 0x68, 0xe5, 0x97, 0x1d, 0x73, 0x9c,
	0x44, 0x4a, 0xcb, 0x94, 0x86, 0x93, 0xc2, 0xe7, 0x97, 0xad, 0x1f, 0x1b, 0xe6, 0x53, 0x35, 0xd8,
	0x4f, 0xea, 0xea, 0xe7, 0xf1, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x97, 0x1e, 0xba, 0xd5, 0x03,
	0x0c, 0x00, 0x00,
}

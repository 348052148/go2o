// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registry_service.proto

package proto // import "."

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegistriesResponse struct {
	Value                []*SRegistry `protobuf:"bytes,1,rep,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RegistriesResponse) Reset()         { *m = RegistriesResponse{} }
func (m *RegistriesResponse) String() string { return proto.CompactTextString(m) }
func (*RegistriesResponse) ProtoMessage()    {}
func (*RegistriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_service_7da12811da3b9b64, []int{0}
}
func (m *RegistriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistriesResponse.Unmarshal(m, b)
}
func (m *RegistriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistriesResponse.Marshal(b, m, deterministic)
}
func (dst *RegistriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistriesResponse.Merge(dst, src)
}
func (m *RegistriesResponse) XXX_Size() int {
	return xxx_messageInfo_RegistriesResponse.Size(m)
}
func (m *RegistriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegistriesResponse proto.InternalMessageInfo

func (m *RegistriesResponse) GetValue() []*SRegistry {
	if m != nil {
		return m.Value
	}
	return nil
}

type RegistryValueResponse struct {
	Value                string   `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	ErrorMsg             string   `protobuf:"bytes,2,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistryValueResponse) Reset()         { *m = RegistryValueResponse{} }
func (m *RegistryValueResponse) String() string { return proto.CompactTextString(m) }
func (*RegistryValueResponse) ProtoMessage()    {}
func (*RegistryValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_service_7da12811da3b9b64, []int{1}
}
func (m *RegistryValueResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistryValueResponse.Unmarshal(m, b)
}
func (m *RegistryValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistryValueResponse.Marshal(b, m, deterministic)
}
func (dst *RegistryValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryValueResponse.Merge(dst, src)
}
func (m *RegistryValueResponse) XXX_Size() int {
	return xxx_messageInfo_RegistryValueResponse.Size(m)
}
func (m *RegistryValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryValueResponse proto.InternalMessageInfo

func (m *RegistryValueResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *RegistryValueResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type RegistryCreateRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DefaultValue         string   `protobuf:"bytes,2,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistryCreateRequest) Reset()         { *m = RegistryCreateRequest{} }
func (m *RegistryCreateRequest) String() string { return proto.CompactTextString(m) }
func (*RegistryCreateRequest) ProtoMessage()    {}
func (*RegistryCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_service_7da12811da3b9b64, []int{2}
}
func (m *RegistryCreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistryCreateRequest.Unmarshal(m, b)
}
func (m *RegistryCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistryCreateRequest.Marshal(b, m, deterministic)
}
func (dst *RegistryCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryCreateRequest.Merge(dst, src)
}
func (m *RegistryCreateRequest) XXX_Size() int {
	return xxx_messageInfo_RegistryCreateRequest.Size(m)
}
func (m *RegistryCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryCreateRequest proto.InternalMessageInfo

func (m *RegistryCreateRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RegistryCreateRequest) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

func (m *RegistryCreateRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// * 注册表
type SRegistry struct {
	// * 键
	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// * 值
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	// * 默认值
	Default string `protobuf:"bytes,3,opt,name=Default,proto3" json:"Default,omitempty"`
	// * 可选值
	Options string `protobuf:"bytes,4,opt,name=Options,proto3" json:"Options,omitempty"`
	// * 标志
	Flag int32 `protobuf:"zigzag32,5,opt,name=Flag,proto3" json:"Flag,omitempty"`
	// * 描述
	Description          string   `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SRegistry) Reset()         { *m = SRegistry{} }
func (m *SRegistry) String() string { return proto.CompactTextString(m) }
func (*SRegistry) ProtoMessage()    {}
func (*SRegistry) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_service_7da12811da3b9b64, []int{3}
}
func (m *SRegistry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SRegistry.Unmarshal(m, b)
}
func (m *SRegistry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SRegistry.Marshal(b, m, deterministic)
}
func (dst *SRegistry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SRegistry.Merge(dst, src)
}
func (m *SRegistry) XXX_Size() int {
	return xxx_messageInfo_SRegistry.Size(m)
}
func (m *SRegistry) XXX_DiscardUnknown() {
	xxx_messageInfo_SRegistry.DiscardUnknown(m)
}

var xxx_messageInfo_SRegistry proto.InternalMessageInfo

func (m *SRegistry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SRegistry) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SRegistry) GetDefault() string {
	if m != nil {
		return m.Default
	}
	return ""
}

func (m *SRegistry) GetOptions() string {
	if m != nil {
		return m.Options
	}
	return ""
}

func (m *SRegistry) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *SRegistry) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*RegistriesResponse)(nil), "RegistriesResponse")
	proto.RegisterType((*RegistryValueResponse)(nil), "RegistryValueResponse")
	proto.RegisterType((*RegistryCreateRequest)(nil), "RegistryCreateRequest")
	proto.RegisterType((*SRegistry)(nil), "SRegistry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryServiceClient is the client API for RegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryServiceClient interface {
	// * 获取注册表键值,key
	GetValue(ctx context.Context, in *String, opts ...grpc.CallOption) (*RegistryValueResponse, error)
	// * 获取键值存储数据字典,keys
	GetRegistries(ctx context.Context, in *StringArray, opts ...grpc.CallOption) (*StringMap, error)
	// * 按键前缀获取键数据,prefix
	FindRegistries(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringMap, error)
	// * 更新注册表键值
	UpdateRegistryValues(ctx context.Context, in *StringMap, opts ...grpc.CallOption) (*Result, error)
	// * 搜索注册表,keyword
	SearchRegistry(ctx context.Context, in *String, opts ...grpc.CallOption) (*RegistriesResponse, error)
	// * 创建自定义注册表项,@defaultValue 默认值,如需更改,使用UpdateRegistry方法
	CreateRegistry(ctx context.Context, in *RegistryCreateRequest, opts ...grpc.CallOption) (*Result, error)
	// * 获取键值存储数据,keys
	GetRegistryV1(ctx context.Context, in *StringArray, opts ...grpc.CallOption) (*StringArray, error)
}

type registryServiceClient struct {
	cc *grpc.ClientConn
}

func NewRegistryServiceClient(cc *grpc.ClientConn) RegistryServiceClient {
	return &registryServiceClient{cc}
}

func (c *registryServiceClient) GetValue(ctx context.Context, in *String, opts ...grpc.CallOption) (*RegistryValueResponse, error) {
	out := new(RegistryValueResponse)
	err := c.cc.Invoke(ctx, "/RegistryService/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetRegistries(ctx context.Context, in *StringArray, opts ...grpc.CallOption) (*StringMap, error) {
	out := new(StringMap)
	err := c.cc.Invoke(ctx, "/RegistryService/GetRegistries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) FindRegistries(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringMap, error) {
	out := new(StringMap)
	err := c.cc.Invoke(ctx, "/RegistryService/FindRegistries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) UpdateRegistryValues(ctx context.Context, in *StringMap, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RegistryService/UpdateRegistryValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) SearchRegistry(ctx context.Context, in *String, opts ...grpc.CallOption) (*RegistriesResponse, error) {
	out := new(RegistriesResponse)
	err := c.cc.Invoke(ctx, "/RegistryService/SearchRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) CreateRegistry(ctx context.Context, in *RegistryCreateRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RegistryService/CreateRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetRegistryV1(ctx context.Context, in *StringArray, opts ...grpc.CallOption) (*StringArray, error) {
	out := new(StringArray)
	err := c.cc.Invoke(ctx, "/RegistryService/GetRegistryV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServiceServer is the server API for RegistryService service.
type RegistryServiceServer interface {
	// * 获取注册表键值,key
	GetValue(context.Context, *String) (*RegistryValueResponse, error)
	// * 获取键值存储数据字典,keys
	GetRegistries(context.Context, *StringArray) (*StringMap, error)
	// * 按键前缀获取键数据,prefix
	FindRegistries(context.Context, *String) (*StringMap, error)
	// * 更新注册表键值
	UpdateRegistryValues(context.Context, *StringMap) (*Result, error)
	// * 搜索注册表,keyword
	SearchRegistry(context.Context, *String) (*RegistriesResponse, error)
	// * 创建自定义注册表项,@defaultValue 默认值,如需更改,使用UpdateRegistry方法
	CreateRegistry(context.Context, *RegistryCreateRequest) (*Result, error)
	// * 获取键值存储数据,keys
	GetRegistryV1(context.Context, *StringArray) (*StringArray, error)
}

func RegisterRegistryServiceServer(s *grpc.Server, srv RegistryServiceServer) {
	s.RegisterService(&_RegistryService_serviceDesc, srv)
}

func _RegistryService_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RegistryService/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetValue(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetRegistries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetRegistries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RegistryService/GetRegistries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetRegistries(ctx, req.(*StringArray))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_FindRegistries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).FindRegistries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RegistryService/FindRegistries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).FindRegistries(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_UpdateRegistryValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).UpdateRegistryValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RegistryService/UpdateRegistryValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).UpdateRegistryValues(ctx, req.(*StringMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_SearchRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).SearchRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RegistryService/SearchRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).SearchRegistry(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_CreateRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).CreateRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RegistryService/CreateRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).CreateRegistry(ctx, req.(*RegistryCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetRegistryV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetRegistryV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RegistryService/GetRegistryV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetRegistryV1(ctx, req.(*StringArray))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegistryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RegistryService",
	HandlerType: (*RegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValue",
			Handler:    _RegistryService_GetValue_Handler,
		},
		{
			MethodName: "GetRegistries",
			Handler:    _RegistryService_GetRegistries_Handler,
		},
		{
			MethodName: "FindRegistries",
			Handler:    _RegistryService_FindRegistries_Handler,
		},
		{
			MethodName: "UpdateRegistryValues",
			Handler:    _RegistryService_UpdateRegistryValues_Handler,
		},
		{
			MethodName: "SearchRegistry",
			Handler:    _RegistryService_SearchRegistry_Handler,
		},
		{
			MethodName: "CreateRegistry",
			Handler:    _RegistryService_CreateRegistry_Handler,
		},
		{
			MethodName: "GetRegistryV1",
			Handler:    _RegistryService_GetRegistryV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry_service.proto",
}

func init() {
	proto.RegisterFile("registry_service.proto", fileDescriptor_registry_service_7da12811da3b9b64)
}

var fileDescriptor_registry_service_7da12811da3b9b64 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x51, 0x8f, 0x93, 0x40,
	0x10, 0x86, 0xf6, 0xee, 0xb8, 0x4e, 0xcf, 0xaa, 0xeb, 0x79, 0x21, 0x3c, 0x91, 0x7d, 0xb1, 0x89,
	0x29, 0xd1, 0x36, 0xf1, 0xc5, 0x27, 0xb5, 0xb6, 0x31, 0x4d, 0x63, 0x02, 0xb1, 0x0f, 0xbe, 0x18,
	0x2c, 0x23, 0x12, 0x09, 0xe0, 0xee, 0x62, 0xc2, 0x8f, 0xf1, 0x97, 0xf9, 0x67, 0x0c, 0xbb, 0x0b,
	0x2c, 0x7a, 0x4f, 0xec, 0xcc, 0x7c, 0xf3, 0x7d, 0xf3, 0x31, 0x03, 0x77, 0x0c, 0xd3, 0x8c, 0x0b,
	0xd6, 0x7c, 0xe1, 0xc8, 0x7e, 0x65, 0x67, 0x0c, 0x2a, 0x56, 0x8a, 0xd2, 0x9b, 0x0b, 0xd1, 0x54,
	0x3a, 0xa0, 0xaf, 0x80, 0x84, 0x0a, 0x96, 0x21, 0x0f, 0x91, 0x57, 0x65, 0xc1, 0x91, 0xf8, 0x70,
	0x79, 0x8a, 0xf3, 0x1a, 0x5d, 0xdb, 0x9f, 0x2e, 0xe7, 0x6b, 0x08, 0x22, 0x0d, 0x6a, 0x42, 0x55,
	0xa0, 0x1f, 0xe0, 0x69, 0x97, 0x92, 0x89, 0xbe, 0xf5, 0x76, 0x68, 0xb5, 0x97, 0x33, 0x0d, 0x27,
	0x1e, 0x5c, 0xbf, 0x67, 0xac, 0x64, 0x47, 0x9e, 0xba, 0x13, 0x59, 0xe8, 0x63, 0x5a, 0x0e, 0x54,
	0xef, 0x18, 0xc6, 0x02, 0x43, 0xfc, 0x59, 0x23, 0x17, 0xe4, 0x11, 0x4c, 0x7f, 0x60, 0xa3, 0x89,
	0xda, 0x27, 0xa1, 0x70, 0x93, 0xe0, 0xb7, 0xb8, 0xce, 0x85, 0xd2, 0x50, 0x54, 0xa3, 0x1c, 0xf1,
	0x61, 0x9e, 0x20, 0x3f, 0xb3, 0xac, 0x12, 0x59, 0x59, 0xb8, 0x53, 0x09, 0x31, 0x53, 0xf4, 0xb7,
	0x0d, 0xb3, 0xde, 0x50, 0xab, 0x72, 0x18, 0x54, 0x0e, 0xd8, 0x0c, 0x16, 0x26, 0xa6, 0x05, 0x17,
	0x9c, 0xad, 0xd2, 0xd1, 0x9c, 0x5d, 0xd8, 0x56, 0x3e, 0x4a, 0x66, 0xee, 0x5e, 0xa8, 0x8a, 0x0e,
	0x09, 0x81, 0x8b, 0x5d, 0x1e, 0xa7, 0xee, 0xa5, 0x6f, 0x2f, 0x1f, 0x87, 0xf2, 0xdd, 0xce, 0xb7,
	0x35, 0xe6, 0xbb, 0x52, 0xf3, 0x19, 0xa9, 0xf5, 0x9f, 0x09, 0x3c, 0xec, 0xc6, 0x8b, 0xd4, 0xea,
	0xc8, 0x0a, 0xae, 0xf7, 0xa8, 0x1d, 0x3a, 0x41, 0x24, 0x58, 0x56, 0xa4, 0xde, 0x5d, 0x70, 0xef,
	0x0e, 0xa8, 0x45, 0x9e, 0xc3, 0x83, 0x3d, 0x8a, 0x61, 0xb3, 0xe4, 0x46, 0xf7, 0xbc, 0x61, 0x2c,
	0x6e, 0x3c, 0xd0, 0xd1, 0x31, 0xae, 0xa8, 0x45, 0x9e, 0xc1, 0x62, 0x97, 0x15, 0x89, 0x81, 0xee,
	0x15, 0xc6, 0xc0, 0x15, 0xdc, 0x7e, 0xaa, 0x12, 0xb9, 0x21, 0x43, 0x96, 0x13, 0x03, 0xe5, 0x39,
	0x41, 0x88, 0xbc, 0xce, 0x05, 0xb5, 0xc8, 0x0b, 0x58, 0x44, 0x18, 0xb3, 0xf3, 0xf7, 0xfe, 0x5f,
	0xf7, 0xbc, 0x4f, 0x82, 0xff, 0xaf, 0x8e, 0x5a, 0x64, 0x03, 0x8b, 0xee, 0x04, 0x74, 0xc7, 0x60,
	0x71, 0x74, 0x1b, 0xa6, 0xcc, 0xca, 0xf4, 0xda, 0x9c, 0x5e, 0xfe, 0xe3, 0x75, 0x14, 0x51, 0xeb,
	0xed, 0xec, 0xb3, 0x13, 0xbc, 0x96, 0xc7, 0xff, 0xf5, 0x4a, 0x7e, 0x36, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x5f, 0x8a, 0x4c, 0xbd, 0x2a, 0x03, 0x00, 0x00,
}
